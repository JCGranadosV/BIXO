Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    CHAR
    COLON
    FUNCESP
    GTE
    IFEQUAL
    LTE
    NUMPY
    QUOTE
    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON while
Rule 2     decvar -> VAR decvarp
Rule 3     decvar -> VAR decvarp decvar
Rule 4     decvarp -> type decvarpp SEMICOLON
Rule 5     decvarpp -> ID COMMA decvarpp
Rule 6     decvarpp -> ID
Rule 7     type -> INT
Rule 8     type -> FLOAT
Rule 9     function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
Rule 10    decfunc -> ID
Rule 11    voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
Rule 12    mainfunction -> MAIN
Rule 13    modules -> function modules
Rule 14    modules -> voidfunction modules
Rule 15    modules -> function
Rule 16    modules -> voidfunction
Rule 17    body -> decvar statements body
Rule 18    body -> statements body
Rule 19    body -> decvar
Rule 20    body -> <empty>
Rule 21    param -> type ID
Rule 22    param -> type ID COMMA param
Rule 23    exp -> texp
Rule 24    exp -> texp OR exp
Rule 25    texp -> gexp
Rule 26    texp -> gexp AND texp
Rule 27    gexp -> mexp
Rule 28    gexp -> mexp gexpp mexp
Rule 29    gexpp -> LT
Rule 30    gexpp -> GT
Rule 31    gexpp -> EQUAL
Rule 32    gexpp -> DIFF
Rule 33    mexp -> t
Rule 34    mexp -> t PLUS mexp
Rule 35    mexp -> t MINUS mexp
Rule 36    t -> f
Rule 37    t -> f MULT t
Rule 38    t -> f DIV t
Rule 39    f -> LPAREN exp RPAREN
Rule 40    f -> CTI
Rule 41    f -> CTF
Rule 42    f -> var
Rule 43    f -> call
Rule 44    statements -> assign
Rule 45    statements -> function
Rule 46    statements -> voidfunction
Rule 47    statements -> call
Rule 48    statements -> read
Rule 49    statements -> print
Rule 50    statements -> if
Rule 51    statements -> while
Rule 52    statements -> for
Rule 53    statements -> funcesp
Rule 54    assign -> var EQUAL exp SEMICOLON
Rule 55    read -> READ var
Rule 56    print -> PRINT LPAREN printp
Rule 57    printp -> exp RPAREN
Rule 58    printp -> exp COMMA printp
Rule 59    var -> ID
Rule 60    call -> ID LPAREN callp RPAREN
Rule 61    callp -> exp SEMICOLON callp
Rule 62    callp -> exp
Rule 63    if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
Rule 64    ifelse -> <empty>
Rule 65    ifelse -> ELSE quadsElse statements
Rule 66    quadsIf -> <empty>
Rule 67    jumpsIf -> <empty>
Rule 68    quadsElse -> <empty>
Rule 69    while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
Rule 70    whilep -> SEMICOLON
Rule 71    whilep -> statements whilep
Rule 72    saveJumps -> <empty>
Rule 73    quadsWhile -> <empty>
Rule 74    jumpsWhile -> <empty>
Rule 75    for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
Rule 76    forp -> RBRACKET
Rule 77    forp -> statements forp
Rule 78    funcesp -> array
Rule 79    funcesp -> matrix
Rule 80    funcesp -> mean
Rule 81    funcesp -> layers
Rule 82    funcesp -> sequential
Rule 83    funcesp -> compile
Rule 84    funcesp -> fit
Rule 85    funcesp -> predict
Rule 86    funcesp -> getweights
Rule 87    array -> ID EQUAL ARRAY LPAREN var arrayp
Rule 88    arrayp -> RPAREN
Rule 89    arrayp -> COMMA var RPAREN
Rule 90    matrix -> ID EQUAL MATRIX LPAREN array matrixp
Rule 91    matrixp -> RPAREN
Rule 92    matrixp -> COMMA array RPAREN
Rule 93    mean -> MEAN LPAREN array RPAREN
Rule 94    layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
Rule 95    sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
Rule 96    sequentialp -> RBRACKET RPAREN
Rule 97    sequentialp -> COMMA layers sequentialp
Rule 98    compile -> sequential DOT COMPILE LPAREN RPAREN
Rule 99    fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
Rule 100   fitp -> TRUE RPAREN
Rule 101   fitp -> FALSE RPAREN
Rule 102   predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
Rule 103   predictp -> INT RBRACKET RPAREN
Rule 104   predictp -> FLOAT RBRACKET RPAREN
Rule 105   getweights -> layers DOT GETWEIGHTS LPAREN RPAREN
Rule 106   empty -> <empty>

Terminals, with rules where they appear

AND                  : 26
ARRAY                : 87
ASSIGN               : 
CHAR                 : 
COLON                : 
COMMA                : 5 22 58 89 92 97 99 99 99
COMPILE              : 98
CTF                  : 41
CTI                  : 40
DIFF                 : 32
DIV                  : 38
DOT                  : 98 99 102 105
ELSE                 : 65
EPOCHS               : 99
EQUAL                : 31 54 87 90 94 94 95 99 99 99 102
FALSE                : 101
FIT                  : 99
FLOAT                : 8 104
FOR                  : 75
FUNCESP              : 
FUNCTION             : 9 11
GETWEIGHTS           : 105
GT                   : 30
GTE                  : 
ID                   : 1 5 6 10 21 22 59 60 87 90 94 95 99 102
IF                   : 63
IFEQUAL              : 
INT                  : 7 94 99 103
LAYERS               : 94
LBRACE               : 9 11
LBRACKET             : 75 95 102
LPAREN               : 9 11 39 56 60 63 69 75 87 90 93 94 95 98 99 102 105
LT                   : 29
LTE                  : 
MAIN                 : 12
MATRIX               : 90
MEAN                 : 93
MINUS                : 35
MULT                 : 37
NUMPY                : 
OR                   : 24
PLUS                 : 34
PREDICT              : 102
PRINT                : 56
PROGRAM              : 1
QUOTE                : 
RBRACE               : 9 11
RBRACKET             : 76 96 103 104
READ                 : 55
RPAREN               : 9 11 39 57 60 63 69 75 88 89 91 92 93 94 96 98 100 101 103 104 105
SEMICOLON            : 1 4 54 61 70 75 75
SEQUENTIAL           : 95
STRING               : 
TRUE                 : 100
UNITS                : 94
VAR                  : 2 3
VERBOSE              : 99
VOID                 : 11
WHILE                : 69
error                : 

Nonterminals, with rules where they appear

array                : 78 90 92 93 99 99
arrayp               : 87
assign               : 44
body                 : 9 11 17 18
call                 : 43 47
callp                : 60 61
compile              : 83
decfunc              : 9 11
decvar               : 3 17 19
decvarp              : 2 3
decvarpp             : 4 5
empty                : 
exp                  : 24 39 54 57 58 61 62 63 69 75 75
f                    : 36 37 38
fit                  : 84
fitp                 : 99
for                  : 52
forp                 : 75 77
funcesp              : 53
function             : 13 15 45
getweights           : 86
gexp                 : 25 26
gexpp                : 28
if                   : 50
ifelse               : 63
jumpsIf              : 63
jumpsWhile           : 69
layers               : 81 95 97 105
mainfunction         : 
matrix               : 79
matrixp              : 90
mean                 : 80
mexp                 : 27 28 28 34 35
modules              : 13 14
param                : 9 11 22
predict              : 85
predictp             : 102
print                : 49
printp               : 56 58
program              : 0
quadsElse            : 65
quadsIf              : 63
quadsWhile           : 69
read                 : 48
saveJumps            : 69
sequential           : 82 98 99 102
sequentialp          : 95 97
statements           : 17 18 63 65 69 71 75 77
t                    : 33 34 35 37 38
texp                 : 23 24 26
type                 : 4 9 21 22
var                  : 42 54 55 75 87 89
voidfunction         : 14 16 46
while                : 1 51
whilep               : 69 71

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON while

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON while

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON while

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . while
    (69) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep

    WHILE           shift and go to state 6

    while                          shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMICOLON while .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON while .)


state 6

    (69) while -> WHILE . LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep

    LPAREN          shift and go to state 7


state 7

    (69) while -> WHILE LPAREN . saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (72) saveJumps -> .

    LPAREN          reduce using rule 72 (saveJumps -> .)
    CTI             reduce using rule 72 (saveJumps -> .)
    CTF             reduce using rule 72 (saveJumps -> .)
    ID              reduce using rule 72 (saveJumps -> .)

    saveJumps                      shift and go to state 8

state 8

    (69) while -> WHILE LPAREN saveJumps . exp RPAREN quadsWhile statements jumpsWhile whilep
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 10
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 9

    (39) f -> LPAREN . exp RPAREN
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 21
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 10

    (69) while -> WHILE LPAREN saveJumps exp . RPAREN quadsWhile statements jumpsWhile whilep

    RPAREN          shift and go to state 22


state 11

    (23) exp -> texp .
    (24) exp -> texp . OR exp

    RPAREN          reduce using rule 23 (exp -> texp .)
    SEMICOLON       reduce using rule 23 (exp -> texp .)
    COMMA           reduce using rule 23 (exp -> texp .)
    OR              shift and go to state 23


state 12

    (25) texp -> gexp .
    (26) texp -> gexp . AND texp

    OR              reduce using rule 25 (texp -> gexp .)
    RPAREN          reduce using rule 25 (texp -> gexp .)
    SEMICOLON       reduce using rule 25 (texp -> gexp .)
    COMMA           reduce using rule 25 (texp -> gexp .)
    AND             shift and go to state 24


state 13

    (27) gexp -> mexp .
    (28) gexp -> mexp . gexpp mexp
    (29) gexpp -> . LT
    (30) gexpp -> . GT
    (31) gexpp -> . EQUAL
    (32) gexpp -> . DIFF

    AND             reduce using rule 27 (gexp -> mexp .)
    OR              reduce using rule 27 (gexp -> mexp .)
    RPAREN          reduce using rule 27 (gexp -> mexp .)
    SEMICOLON       reduce using rule 27 (gexp -> mexp .)
    COMMA           reduce using rule 27 (gexp -> mexp .)
    LT              shift and go to state 26
    GT              shift and go to state 27
    EQUAL           shift and go to state 28
    DIFF            shift and go to state 29

    gexpp                          shift and go to state 25

state 14

    (33) mexp -> t .
    (34) mexp -> t . PLUS mexp
    (35) mexp -> t . MINUS mexp

    LT              reduce using rule 33 (mexp -> t .)
    GT              reduce using rule 33 (mexp -> t .)
    EQUAL           reduce using rule 33 (mexp -> t .)
    DIFF            reduce using rule 33 (mexp -> t .)
    AND             reduce using rule 33 (mexp -> t .)
    OR              reduce using rule 33 (mexp -> t .)
    RPAREN          reduce using rule 33 (mexp -> t .)
    SEMICOLON       reduce using rule 33 (mexp -> t .)
    COMMA           reduce using rule 33 (mexp -> t .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31


state 15

    (36) t -> f .
    (37) t -> f . MULT t
    (38) t -> f . DIV t

    PLUS            reduce using rule 36 (t -> f .)
    MINUS           reduce using rule 36 (t -> f .)
    LT              reduce using rule 36 (t -> f .)
    GT              reduce using rule 36 (t -> f .)
    EQUAL           reduce using rule 36 (t -> f .)
    DIFF            reduce using rule 36 (t -> f .)
    AND             reduce using rule 36 (t -> f .)
    OR              reduce using rule 36 (t -> f .)
    RPAREN          reduce using rule 36 (t -> f .)
    SEMICOLON       reduce using rule 36 (t -> f .)
    COMMA           reduce using rule 36 (t -> f .)
    MULT            shift and go to state 32
    DIV             shift and go to state 33


state 16

    (40) f -> CTI .

    MULT            reduce using rule 40 (f -> CTI .)
    DIV             reduce using rule 40 (f -> CTI .)
    PLUS            reduce using rule 40 (f -> CTI .)
    MINUS           reduce using rule 40 (f -> CTI .)
    LT              reduce using rule 40 (f -> CTI .)
    GT              reduce using rule 40 (f -> CTI .)
    EQUAL           reduce using rule 40 (f -> CTI .)
    DIFF            reduce using rule 40 (f -> CTI .)
    AND             reduce using rule 40 (f -> CTI .)
    OR              reduce using rule 40 (f -> CTI .)
    RPAREN          reduce using rule 40 (f -> CTI .)
    SEMICOLON       reduce using rule 40 (f -> CTI .)
    COMMA           reduce using rule 40 (f -> CTI .)


state 17

    (41) f -> CTF .

    MULT            reduce using rule 41 (f -> CTF .)
    DIV             reduce using rule 41 (f -> CTF .)
    PLUS            reduce using rule 41 (f -> CTF .)
    MINUS           reduce using rule 41 (f -> CTF .)
    LT              reduce using rule 41 (f -> CTF .)
    GT              reduce using rule 41 (f -> CTF .)
    EQUAL           reduce using rule 41 (f -> CTF .)
    DIFF            reduce using rule 41 (f -> CTF .)
    AND             reduce using rule 41 (f -> CTF .)
    OR              reduce using rule 41 (f -> CTF .)
    RPAREN          reduce using rule 41 (f -> CTF .)
    SEMICOLON       reduce using rule 41 (f -> CTF .)
    COMMA           reduce using rule 41 (f -> CTF .)


state 18

    (42) f -> var .

    MULT            reduce using rule 42 (f -> var .)
    DIV             reduce using rule 42 (f -> var .)
    PLUS            reduce using rule 42 (f -> var .)
    MINUS           reduce using rule 42 (f -> var .)
    LT              reduce using rule 42 (f -> var .)
    GT              reduce using rule 42 (f -> var .)
    EQUAL           reduce using rule 42 (f -> var .)
    DIFF            reduce using rule 42 (f -> var .)
    AND             reduce using rule 42 (f -> var .)
    OR              reduce using rule 42 (f -> var .)
    RPAREN          reduce using rule 42 (f -> var .)
    SEMICOLON       reduce using rule 42 (f -> var .)
    COMMA           reduce using rule 42 (f -> var .)


state 19

    (43) f -> call .

    MULT            reduce using rule 43 (f -> call .)
    DIV             reduce using rule 43 (f -> call .)
    PLUS            reduce using rule 43 (f -> call .)
    MINUS           reduce using rule 43 (f -> call .)
    LT              reduce using rule 43 (f -> call .)
    GT              reduce using rule 43 (f -> call .)
    EQUAL           reduce using rule 43 (f -> call .)
    DIFF            reduce using rule 43 (f -> call .)
    AND             reduce using rule 43 (f -> call .)
    OR              reduce using rule 43 (f -> call .)
    RPAREN          reduce using rule 43 (f -> call .)
    SEMICOLON       reduce using rule 43 (f -> call .)
    COMMA           reduce using rule 43 (f -> call .)


state 20

    (59) var -> ID .
    (60) call -> ID . LPAREN callp RPAREN

    MULT            reduce using rule 59 (var -> ID .)
    DIV             reduce using rule 59 (var -> ID .)
    PLUS            reduce using rule 59 (var -> ID .)
    MINUS           reduce using rule 59 (var -> ID .)
    LT              reduce using rule 59 (var -> ID .)
    GT              reduce using rule 59 (var -> ID .)
    EQUAL           reduce using rule 59 (var -> ID .)
    DIFF            reduce using rule 59 (var -> ID .)
    AND             reduce using rule 59 (var -> ID .)
    OR              reduce using rule 59 (var -> ID .)
    RPAREN          reduce using rule 59 (var -> ID .)
    SEMICOLON       reduce using rule 59 (var -> ID .)
    COMMA           reduce using rule 59 (var -> ID .)
    LPAREN          shift and go to state 34


state 21

    (39) f -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 35


state 22

    (69) while -> WHILE LPAREN saveJumps exp RPAREN . quadsWhile statements jumpsWhile whilep
    (73) quadsWhile -> .

    FUNCTION        reduce using rule 73 (quadsWhile -> .)
    ID              reduce using rule 73 (quadsWhile -> .)
    READ            reduce using rule 73 (quadsWhile -> .)
    PRINT           reduce using rule 73 (quadsWhile -> .)
    IF              reduce using rule 73 (quadsWhile -> .)
    WHILE           reduce using rule 73 (quadsWhile -> .)
    FOR             reduce using rule 73 (quadsWhile -> .)
    MEAN            reduce using rule 73 (quadsWhile -> .)

    quadsWhile                     shift and go to state 36

state 23

    (24) exp -> texp OR . exp
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    texp                           shift and go to state 11
    exp                            shift and go to state 37
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 24

    (26) texp -> gexp AND . texp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    gexp                           shift and go to state 12
    texp                           shift and go to state 38
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 25

    (28) gexp -> mexp gexpp . mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    mexp                           shift and go to state 39
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 26

    (29) gexpp -> LT .

    LPAREN          reduce using rule 29 (gexpp -> LT .)
    CTI             reduce using rule 29 (gexpp -> LT .)
    CTF             reduce using rule 29 (gexpp -> LT .)
    ID              reduce using rule 29 (gexpp -> LT .)


state 27

    (30) gexpp -> GT .

    LPAREN          reduce using rule 30 (gexpp -> GT .)
    CTI             reduce using rule 30 (gexpp -> GT .)
    CTF             reduce using rule 30 (gexpp -> GT .)
    ID              reduce using rule 30 (gexpp -> GT .)


state 28

    (31) gexpp -> EQUAL .

    LPAREN          reduce using rule 31 (gexpp -> EQUAL .)
    CTI             reduce using rule 31 (gexpp -> EQUAL .)
    CTF             reduce using rule 31 (gexpp -> EQUAL .)
    ID              reduce using rule 31 (gexpp -> EQUAL .)


state 29

    (32) gexpp -> DIFF .

    LPAREN          reduce using rule 32 (gexpp -> DIFF .)
    CTI             reduce using rule 32 (gexpp -> DIFF .)
    CTF             reduce using rule 32 (gexpp -> DIFF .)
    ID              reduce using rule 32 (gexpp -> DIFF .)


state 30

    (34) mexp -> t PLUS . mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    t                              shift and go to state 14
    mexp                           shift and go to state 40
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 31

    (35) mexp -> t MINUS . mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    t                              shift and go to state 14
    mexp                           shift and go to state 41
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 32

    (37) t -> f MULT . t
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    f                              shift and go to state 15
    t                              shift and go to state 42
    var                            shift and go to state 18
    call                           shift and go to state 19

state 33

    (38) t -> f DIV . t
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    f                              shift and go to state 15
    t                              shift and go to state 43
    var                            shift and go to state 18
    call                           shift and go to state 19

state 34

    (60) call -> ID LPAREN . callp RPAREN
    (61) callp -> . exp SEMICOLON callp
    (62) callp -> . exp
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    callp                          shift and go to state 44
    exp                            shift and go to state 45
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 35

    (39) f -> LPAREN exp RPAREN .

    MULT            reduce using rule 39 (f -> LPAREN exp RPAREN .)
    DIV             reduce using rule 39 (f -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 39 (f -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 39 (f -> LPAREN exp RPAREN .)
    LT              reduce using rule 39 (f -> LPAREN exp RPAREN .)
    GT              reduce using rule 39 (f -> LPAREN exp RPAREN .)
    EQUAL           reduce using rule 39 (f -> LPAREN exp RPAREN .)
    DIFF            reduce using rule 39 (f -> LPAREN exp RPAREN .)
    AND             reduce using rule 39 (f -> LPAREN exp RPAREN .)
    OR              reduce using rule 39 (f -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 39 (f -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 39 (f -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 39 (f -> LPAREN exp RPAREN .)


state 36

    (69) while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile . statements jumpsWhile whilep
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (69) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (75) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (78) funcesp -> . array
    (79) funcesp -> . matrix
    (80) funcesp -> . mean
    (81) funcesp -> . layers
    (82) funcesp -> . sequential
    (83) funcesp -> . compile
    (84) funcesp -> . fit
    (85) funcesp -> . predict
    (86) funcesp -> . getweights
    (59) var -> . ID
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (90) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (93) mean -> . MEAN LPAREN array RPAREN
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (98) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (99) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (105) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 46
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 37

    (24) exp -> texp OR exp .

    RPAREN          reduce using rule 24 (exp -> texp OR exp .)
    SEMICOLON       reduce using rule 24 (exp -> texp OR exp .)
    COMMA           reduce using rule 24 (exp -> texp OR exp .)


state 38

    (26) texp -> gexp AND texp .

    OR              reduce using rule 26 (texp -> gexp AND texp .)
    RPAREN          reduce using rule 26 (texp -> gexp AND texp .)
    SEMICOLON       reduce using rule 26 (texp -> gexp AND texp .)
    COMMA           reduce using rule 26 (texp -> gexp AND texp .)


state 39

    (28) gexp -> mexp gexpp mexp .

    AND             reduce using rule 28 (gexp -> mexp gexpp mexp .)
    OR              reduce using rule 28 (gexp -> mexp gexpp mexp .)
    RPAREN          reduce using rule 28 (gexp -> mexp gexpp mexp .)
    SEMICOLON       reduce using rule 28 (gexp -> mexp gexpp mexp .)
    COMMA           reduce using rule 28 (gexp -> mexp gexpp mexp .)


state 40

    (34) mexp -> t PLUS mexp .

    LT              reduce using rule 34 (mexp -> t PLUS mexp .)
    GT              reduce using rule 34 (mexp -> t PLUS mexp .)
    EQUAL           reduce using rule 34 (mexp -> t PLUS mexp .)
    DIFF            reduce using rule 34 (mexp -> t PLUS mexp .)
    AND             reduce using rule 34 (mexp -> t PLUS mexp .)
    OR              reduce using rule 34 (mexp -> t PLUS mexp .)
    RPAREN          reduce using rule 34 (mexp -> t PLUS mexp .)
    SEMICOLON       reduce using rule 34 (mexp -> t PLUS mexp .)
    COMMA           reduce using rule 34 (mexp -> t PLUS mexp .)


state 41

    (35) mexp -> t MINUS mexp .

    LT              reduce using rule 35 (mexp -> t MINUS mexp .)
    GT              reduce using rule 35 (mexp -> t MINUS mexp .)
    EQUAL           reduce using rule 35 (mexp -> t MINUS mexp .)
    DIFF            reduce using rule 35 (mexp -> t MINUS mexp .)
    AND             reduce using rule 35 (mexp -> t MINUS mexp .)
    OR              reduce using rule 35 (mexp -> t MINUS mexp .)
    RPAREN          reduce using rule 35 (mexp -> t MINUS mexp .)
    SEMICOLON       reduce using rule 35 (mexp -> t MINUS mexp .)
    COMMA           reduce using rule 35 (mexp -> t MINUS mexp .)


state 42

    (37) t -> f MULT t .

    PLUS            reduce using rule 37 (t -> f MULT t .)
    MINUS           reduce using rule 37 (t -> f MULT t .)
    LT              reduce using rule 37 (t -> f MULT t .)
    GT              reduce using rule 37 (t -> f MULT t .)
    EQUAL           reduce using rule 37 (t -> f MULT t .)
    DIFF            reduce using rule 37 (t -> f MULT t .)
    AND             reduce using rule 37 (t -> f MULT t .)
    OR              reduce using rule 37 (t -> f MULT t .)
    RPAREN          reduce using rule 37 (t -> f MULT t .)
    SEMICOLON       reduce using rule 37 (t -> f MULT t .)
    COMMA           reduce using rule 37 (t -> f MULT t .)


state 43

    (38) t -> f DIV t .

    PLUS            reduce using rule 38 (t -> f DIV t .)
    MINUS           reduce using rule 38 (t -> f DIV t .)
    LT              reduce using rule 38 (t -> f DIV t .)
    GT              reduce using rule 38 (t -> f DIV t .)
    EQUAL           reduce using rule 38 (t -> f DIV t .)
    DIFF            reduce using rule 38 (t -> f DIV t .)
    AND             reduce using rule 38 (t -> f DIV t .)
    OR              reduce using rule 38 (t -> f DIV t .)
    RPAREN          reduce using rule 38 (t -> f DIV t .)
    SEMICOLON       reduce using rule 38 (t -> f DIV t .)
    COMMA           reduce using rule 38 (t -> f DIV t .)


state 44

    (60) call -> ID LPAREN callp . RPAREN

    RPAREN          shift and go to state 74


state 45

    (61) callp -> exp . SEMICOLON callp
    (62) callp -> exp .

    SEMICOLON       shift and go to state 75
    RPAREN          reduce using rule 62 (callp -> exp .)


state 46

    (69) while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements . jumpsWhile whilep
    (74) jumpsWhile -> .

    SEMICOLON       reduce using rule 74 (jumpsWhile -> .)
    FUNCTION        reduce using rule 74 (jumpsWhile -> .)
    ID              reduce using rule 74 (jumpsWhile -> .)
    READ            reduce using rule 74 (jumpsWhile -> .)
    PRINT           reduce using rule 74 (jumpsWhile -> .)
    IF              reduce using rule 74 (jumpsWhile -> .)
    WHILE           reduce using rule 74 (jumpsWhile -> .)
    FOR             reduce using rule 74 (jumpsWhile -> .)
    MEAN            reduce using rule 74 (jumpsWhile -> .)

    jumpsWhile                     shift and go to state 76

state 47

    (44) statements -> assign .

    SEMICOLON       reduce using rule 44 (statements -> assign .)
    FUNCTION        reduce using rule 44 (statements -> assign .)
    ID              reduce using rule 44 (statements -> assign .)
    READ            reduce using rule 44 (statements -> assign .)
    PRINT           reduce using rule 44 (statements -> assign .)
    IF              reduce using rule 44 (statements -> assign .)
    WHILE           reduce using rule 44 (statements -> assign .)
    FOR             reduce using rule 44 (statements -> assign .)
    MEAN            reduce using rule 44 (statements -> assign .)
    ELSE            reduce using rule 44 (statements -> assign .)
    VAR             reduce using rule 44 (statements -> assign .)
    RBRACE          reduce using rule 44 (statements -> assign .)
    RBRACKET        reduce using rule 44 (statements -> assign .)


state 48

    (45) statements -> function .

    SEMICOLON       reduce using rule 45 (statements -> function .)
    FUNCTION        reduce using rule 45 (statements -> function .)
    ID              reduce using rule 45 (statements -> function .)
    READ            reduce using rule 45 (statements -> function .)
    PRINT           reduce using rule 45 (statements -> function .)
    IF              reduce using rule 45 (statements -> function .)
    WHILE           reduce using rule 45 (statements -> function .)
    FOR             reduce using rule 45 (statements -> function .)
    MEAN            reduce using rule 45 (statements -> function .)
    ELSE            reduce using rule 45 (statements -> function .)
    VAR             reduce using rule 45 (statements -> function .)
    RBRACE          reduce using rule 45 (statements -> function .)
    RBRACKET        reduce using rule 45 (statements -> function .)


state 49

    (46) statements -> voidfunction .

    SEMICOLON       reduce using rule 46 (statements -> voidfunction .)
    FUNCTION        reduce using rule 46 (statements -> voidfunction .)
    ID              reduce using rule 46 (statements -> voidfunction .)
    READ            reduce using rule 46 (statements -> voidfunction .)
    PRINT           reduce using rule 46 (statements -> voidfunction .)
    IF              reduce using rule 46 (statements -> voidfunction .)
    WHILE           reduce using rule 46 (statements -> voidfunction .)
    FOR             reduce using rule 46 (statements -> voidfunction .)
    MEAN            reduce using rule 46 (statements -> voidfunction .)
    ELSE            reduce using rule 46 (statements -> voidfunction .)
    VAR             reduce using rule 46 (statements -> voidfunction .)
    RBRACE          reduce using rule 46 (statements -> voidfunction .)
    RBRACKET        reduce using rule 46 (statements -> voidfunction .)


state 50

    (47) statements -> call .

    SEMICOLON       reduce using rule 47 (statements -> call .)
    FUNCTION        reduce using rule 47 (statements -> call .)
    ID              reduce using rule 47 (statements -> call .)
    READ            reduce using rule 47 (statements -> call .)
    PRINT           reduce using rule 47 (statements -> call .)
    IF              reduce using rule 47 (statements -> call .)
    WHILE           reduce using rule 47 (statements -> call .)
    FOR             reduce using rule 47 (statements -> call .)
    MEAN            reduce using rule 47 (statements -> call .)
    ELSE            reduce using rule 47 (statements -> call .)
    VAR             reduce using rule 47 (statements -> call .)
    RBRACE          reduce using rule 47 (statements -> call .)
    RBRACKET        reduce using rule 47 (statements -> call .)


state 51

    (48) statements -> read .

    SEMICOLON       reduce using rule 48 (statements -> read .)
    FUNCTION        reduce using rule 48 (statements -> read .)
    ID              reduce using rule 48 (statements -> read .)
    READ            reduce using rule 48 (statements -> read .)
    PRINT           reduce using rule 48 (statements -> read .)
    IF              reduce using rule 48 (statements -> read .)
    WHILE           reduce using rule 48 (statements -> read .)
    FOR             reduce using rule 48 (statements -> read .)
    MEAN            reduce using rule 48 (statements -> read .)
    ELSE            reduce using rule 48 (statements -> read .)
    VAR             reduce using rule 48 (statements -> read .)
    RBRACE          reduce using rule 48 (statements -> read .)
    RBRACKET        reduce using rule 48 (statements -> read .)


state 52

    (49) statements -> print .

    SEMICOLON       reduce using rule 49 (statements -> print .)
    FUNCTION        reduce using rule 49 (statements -> print .)
    ID              reduce using rule 49 (statements -> print .)
    READ            reduce using rule 49 (statements -> print .)
    PRINT           reduce using rule 49 (statements -> print .)
    IF              reduce using rule 49 (statements -> print .)
    WHILE           reduce using rule 49 (statements -> print .)
    FOR             reduce using rule 49 (statements -> print .)
    MEAN            reduce using rule 49 (statements -> print .)
    ELSE            reduce using rule 49 (statements -> print .)
    VAR             reduce using rule 49 (statements -> print .)
    RBRACE          reduce using rule 49 (statements -> print .)
    RBRACKET        reduce using rule 49 (statements -> print .)


state 53

    (50) statements -> if .

    SEMICOLON       reduce using rule 50 (statements -> if .)
    FUNCTION        reduce using rule 50 (statements -> if .)
    ID              reduce using rule 50 (statements -> if .)
    READ            reduce using rule 50 (statements -> if .)
    PRINT           reduce using rule 50 (statements -> if .)
    IF              reduce using rule 50 (statements -> if .)
    WHILE           reduce using rule 50 (statements -> if .)
    FOR             reduce using rule 50 (statements -> if .)
    MEAN            reduce using rule 50 (statements -> if .)
    ELSE            reduce using rule 50 (statements -> if .)
    VAR             reduce using rule 50 (statements -> if .)
    RBRACE          reduce using rule 50 (statements -> if .)
    RBRACKET        reduce using rule 50 (statements -> if .)


state 54

    (51) statements -> while .

    SEMICOLON       reduce using rule 51 (statements -> while .)
    FUNCTION        reduce using rule 51 (statements -> while .)
    ID              reduce using rule 51 (statements -> while .)
    READ            reduce using rule 51 (statements -> while .)
    PRINT           reduce using rule 51 (statements -> while .)
    IF              reduce using rule 51 (statements -> while .)
    WHILE           reduce using rule 51 (statements -> while .)
    FOR             reduce using rule 51 (statements -> while .)
    MEAN            reduce using rule 51 (statements -> while .)
    ELSE            reduce using rule 51 (statements -> while .)
    VAR             reduce using rule 51 (statements -> while .)
    RBRACE          reduce using rule 51 (statements -> while .)
    RBRACKET        reduce using rule 51 (statements -> while .)


state 55

    (52) statements -> for .

    SEMICOLON       reduce using rule 52 (statements -> for .)
    FUNCTION        reduce using rule 52 (statements -> for .)
    ID              reduce using rule 52 (statements -> for .)
    READ            reduce using rule 52 (statements -> for .)
    PRINT           reduce using rule 52 (statements -> for .)
    IF              reduce using rule 52 (statements -> for .)
    WHILE           reduce using rule 52 (statements -> for .)
    FOR             reduce using rule 52 (statements -> for .)
    MEAN            reduce using rule 52 (statements -> for .)
    ELSE            reduce using rule 52 (statements -> for .)
    VAR             reduce using rule 52 (statements -> for .)
    RBRACE          reduce using rule 52 (statements -> for .)
    RBRACKET        reduce using rule 52 (statements -> for .)


state 56

    (53) statements -> funcesp .

    SEMICOLON       reduce using rule 53 (statements -> funcesp .)
    FUNCTION        reduce using rule 53 (statements -> funcesp .)
    ID              reduce using rule 53 (statements -> funcesp .)
    READ            reduce using rule 53 (statements -> funcesp .)
    PRINT           reduce using rule 53 (statements -> funcesp .)
    IF              reduce using rule 53 (statements -> funcesp .)
    WHILE           reduce using rule 53 (statements -> funcesp .)
    FOR             reduce using rule 53 (statements -> funcesp .)
    MEAN            reduce using rule 53 (statements -> funcesp .)
    ELSE            reduce using rule 53 (statements -> funcesp .)
    VAR             reduce using rule 53 (statements -> funcesp .)
    RBRACE          reduce using rule 53 (statements -> funcesp .)
    RBRACKET        reduce using rule 53 (statements -> funcesp .)


state 57

    (54) assign -> var . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 77


state 58

    (9) function -> FUNCTION . type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> FUNCTION . VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (7) type -> . INT
    (8) type -> . FLOAT

    VOID            shift and go to state 79
    INT             shift and go to state 80
    FLOAT           shift and go to state 81

    type                           shift and go to state 78

state 59

    (60) call -> ID . LPAREN callp RPAREN
    (59) var -> ID .
    (87) array -> ID . EQUAL ARRAY LPAREN var arrayp
    (90) matrix -> ID . EQUAL MATRIX LPAREN array matrixp
    (94) layers -> ID . EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> ID . EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (99) fit -> ID . EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> ID . EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp

  ! shift/reduce conflict for EQUAL resolved as shift
    LPAREN          shift and go to state 34
    EQUAL           shift and go to state 82

  ! EQUAL           [ reduce using rule 59 (var -> ID .) ]


state 60

    (55) read -> READ . var
    (59) var -> . ID

    ID              shift and go to state 84

    var                            shift and go to state 83

state 61

    (56) print -> PRINT . LPAREN printp

    LPAREN          shift and go to state 85


state 62

    (63) if -> IF . LPAREN exp RPAREN quadsIf statements ifelse jumpsIf

    LPAREN          shift and go to state 86


state 63

    (75) for -> FOR . LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp

    LPAREN          shift and go to state 87


state 64

    (78) funcesp -> array .

    SEMICOLON       reduce using rule 78 (funcesp -> array .)
    FUNCTION        reduce using rule 78 (funcesp -> array .)
    ID              reduce using rule 78 (funcesp -> array .)
    READ            reduce using rule 78 (funcesp -> array .)
    PRINT           reduce using rule 78 (funcesp -> array .)
    IF              reduce using rule 78 (funcesp -> array .)
    WHILE           reduce using rule 78 (funcesp -> array .)
    FOR             reduce using rule 78 (funcesp -> array .)
    MEAN            reduce using rule 78 (funcesp -> array .)
    ELSE            reduce using rule 78 (funcesp -> array .)
    VAR             reduce using rule 78 (funcesp -> array .)
    RBRACE          reduce using rule 78 (funcesp -> array .)
    RBRACKET        reduce using rule 78 (funcesp -> array .)


state 65

    (79) funcesp -> matrix .

    SEMICOLON       reduce using rule 79 (funcesp -> matrix .)
    FUNCTION        reduce using rule 79 (funcesp -> matrix .)
    ID              reduce using rule 79 (funcesp -> matrix .)
    READ            reduce using rule 79 (funcesp -> matrix .)
    PRINT           reduce using rule 79 (funcesp -> matrix .)
    IF              reduce using rule 79 (funcesp -> matrix .)
    WHILE           reduce using rule 79 (funcesp -> matrix .)
    FOR             reduce using rule 79 (funcesp -> matrix .)
    MEAN            reduce using rule 79 (funcesp -> matrix .)
    ELSE            reduce using rule 79 (funcesp -> matrix .)
    VAR             reduce using rule 79 (funcesp -> matrix .)
    RBRACE          reduce using rule 79 (funcesp -> matrix .)
    RBRACKET        reduce using rule 79 (funcesp -> matrix .)


state 66

    (80) funcesp -> mean .

    SEMICOLON       reduce using rule 80 (funcesp -> mean .)
    FUNCTION        reduce using rule 80 (funcesp -> mean .)
    ID              reduce using rule 80 (funcesp -> mean .)
    READ            reduce using rule 80 (funcesp -> mean .)
    PRINT           reduce using rule 80 (funcesp -> mean .)
    IF              reduce using rule 80 (funcesp -> mean .)
    WHILE           reduce using rule 80 (funcesp -> mean .)
    FOR             reduce using rule 80 (funcesp -> mean .)
    MEAN            reduce using rule 80 (funcesp -> mean .)
    ELSE            reduce using rule 80 (funcesp -> mean .)
    VAR             reduce using rule 80 (funcesp -> mean .)
    RBRACE          reduce using rule 80 (funcesp -> mean .)
    RBRACKET        reduce using rule 80 (funcesp -> mean .)


state 67

    (81) funcesp -> layers .
    (105) getweights -> layers . DOT GETWEIGHTS LPAREN RPAREN

    SEMICOLON       reduce using rule 81 (funcesp -> layers .)
    FUNCTION        reduce using rule 81 (funcesp -> layers .)
    ID              reduce using rule 81 (funcesp -> layers .)
    READ            reduce using rule 81 (funcesp -> layers .)
    PRINT           reduce using rule 81 (funcesp -> layers .)
    IF              reduce using rule 81 (funcesp -> layers .)
    WHILE           reduce using rule 81 (funcesp -> layers .)
    FOR             reduce using rule 81 (funcesp -> layers .)
    MEAN            reduce using rule 81 (funcesp -> layers .)
    ELSE            reduce using rule 81 (funcesp -> layers .)
    VAR             reduce using rule 81 (funcesp -> layers .)
    RBRACE          reduce using rule 81 (funcesp -> layers .)
    RBRACKET        reduce using rule 81 (funcesp -> layers .)
    DOT             shift and go to state 88


state 68

    (82) funcesp -> sequential .
    (98) compile -> sequential . DOT COMPILE LPAREN RPAREN

    SEMICOLON       reduce using rule 82 (funcesp -> sequential .)
    FUNCTION        reduce using rule 82 (funcesp -> sequential .)
    ID              reduce using rule 82 (funcesp -> sequential .)
    READ            reduce using rule 82 (funcesp -> sequential .)
    PRINT           reduce using rule 82 (funcesp -> sequential .)
    IF              reduce using rule 82 (funcesp -> sequential .)
    WHILE           reduce using rule 82 (funcesp -> sequential .)
    FOR             reduce using rule 82 (funcesp -> sequential .)
    MEAN            reduce using rule 82 (funcesp -> sequential .)
    ELSE            reduce using rule 82 (funcesp -> sequential .)
    VAR             reduce using rule 82 (funcesp -> sequential .)
    RBRACE          reduce using rule 82 (funcesp -> sequential .)
    RBRACKET        reduce using rule 82 (funcesp -> sequential .)
    DOT             shift and go to state 89


state 69

    (83) funcesp -> compile .

    SEMICOLON       reduce using rule 83 (funcesp -> compile .)
    FUNCTION        reduce using rule 83 (funcesp -> compile .)
    ID              reduce using rule 83 (funcesp -> compile .)
    READ            reduce using rule 83 (funcesp -> compile .)
    PRINT           reduce using rule 83 (funcesp -> compile .)
    IF              reduce using rule 83 (funcesp -> compile .)
    WHILE           reduce using rule 83 (funcesp -> compile .)
    FOR             reduce using rule 83 (funcesp -> compile .)
    MEAN            reduce using rule 83 (funcesp -> compile .)
    ELSE            reduce using rule 83 (funcesp -> compile .)
    VAR             reduce using rule 83 (funcesp -> compile .)
    RBRACE          reduce using rule 83 (funcesp -> compile .)
    RBRACKET        reduce using rule 83 (funcesp -> compile .)


state 70

    (84) funcesp -> fit .

    SEMICOLON       reduce using rule 84 (funcesp -> fit .)
    FUNCTION        reduce using rule 84 (funcesp -> fit .)
    ID              reduce using rule 84 (funcesp -> fit .)
    READ            reduce using rule 84 (funcesp -> fit .)
    PRINT           reduce using rule 84 (funcesp -> fit .)
    IF              reduce using rule 84 (funcesp -> fit .)
    WHILE           reduce using rule 84 (funcesp -> fit .)
    FOR             reduce using rule 84 (funcesp -> fit .)
    MEAN            reduce using rule 84 (funcesp -> fit .)
    ELSE            reduce using rule 84 (funcesp -> fit .)
    VAR             reduce using rule 84 (funcesp -> fit .)
    RBRACE          reduce using rule 84 (funcesp -> fit .)
    RBRACKET        reduce using rule 84 (funcesp -> fit .)


state 71

    (85) funcesp -> predict .

    SEMICOLON       reduce using rule 85 (funcesp -> predict .)
    FUNCTION        reduce using rule 85 (funcesp -> predict .)
    ID              reduce using rule 85 (funcesp -> predict .)
    READ            reduce using rule 85 (funcesp -> predict .)
    PRINT           reduce using rule 85 (funcesp -> predict .)
    IF              reduce using rule 85 (funcesp -> predict .)
    WHILE           reduce using rule 85 (funcesp -> predict .)
    FOR             reduce using rule 85 (funcesp -> predict .)
    MEAN            reduce using rule 85 (funcesp -> predict .)
    ELSE            reduce using rule 85 (funcesp -> predict .)
    VAR             reduce using rule 85 (funcesp -> predict .)
    RBRACE          reduce using rule 85 (funcesp -> predict .)
    RBRACKET        reduce using rule 85 (funcesp -> predict .)


state 72

    (86) funcesp -> getweights .

    SEMICOLON       reduce using rule 86 (funcesp -> getweights .)
    FUNCTION        reduce using rule 86 (funcesp -> getweights .)
    ID              reduce using rule 86 (funcesp -> getweights .)
    READ            reduce using rule 86 (funcesp -> getweights .)
    PRINT           reduce using rule 86 (funcesp -> getweights .)
    IF              reduce using rule 86 (funcesp -> getweights .)
    WHILE           reduce using rule 86 (funcesp -> getweights .)
    FOR             reduce using rule 86 (funcesp -> getweights .)
    MEAN            reduce using rule 86 (funcesp -> getweights .)
    ELSE            reduce using rule 86 (funcesp -> getweights .)
    VAR             reduce using rule 86 (funcesp -> getweights .)
    RBRACE          reduce using rule 86 (funcesp -> getweights .)
    RBRACKET        reduce using rule 86 (funcesp -> getweights .)


state 73

    (93) mean -> MEAN . LPAREN array RPAREN

    LPAREN          shift and go to state 90


state 74

    (60) call -> ID LPAREN callp RPAREN .

    MULT            reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    DIV             reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    PLUS            reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    MINUS           reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    LT              reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    GT              reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    EQUAL           reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    DIFF            reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    AND             reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    OR              reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    RPAREN          reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    SEMICOLON       reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    COMMA           reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    FUNCTION        reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    ID              reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    READ            reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    PRINT           reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    IF              reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    WHILE           reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    FOR             reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    MEAN            reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    ELSE            reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    VAR             reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    RBRACE          reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    RBRACKET        reduce using rule 60 (call -> ID LPAREN callp RPAREN .)


state 75

    (61) callp -> exp SEMICOLON . callp
    (61) callp -> . exp SEMICOLON callp
    (62) callp -> . exp
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 45
    callp                          shift and go to state 91
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 76

    (69) while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile . whilep
    (70) whilep -> . SEMICOLON
    (71) whilep -> . statements whilep
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (69) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (75) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (78) funcesp -> . array
    (79) funcesp -> . matrix
    (80) funcesp -> . mean
    (81) funcesp -> . layers
    (82) funcesp -> . sequential
    (83) funcesp -> . compile
    (84) funcesp -> . fit
    (85) funcesp -> . predict
    (86) funcesp -> . getweights
    (59) var -> . ID
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (90) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (93) mean -> . MEAN LPAREN array RPAREN
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (98) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (99) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (105) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    SEMICOLON       shift and go to state 94
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 92
    whilep                         shift and go to state 93
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 77

    (54) assign -> var EQUAL . exp SEMICOLON
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    var                            shift and go to state 18
    exp                            shift and go to state 95
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    call                           shift and go to state 19

state 78

    (9) function -> FUNCTION type . decfunc LPAREN param RPAREN LBRACE body RBRACE
    (10) decfunc -> . ID

    ID              shift and go to state 97

    decfunc                        shift and go to state 96

state 79

    (11) voidfunction -> FUNCTION VOID . decfunc LPAREN param RPAREN LBRACE body RBRACE
    (10) decfunc -> . ID

    ID              shift and go to state 97

    decfunc                        shift and go to state 98

state 80

    (7) type -> INT .

    ID              reduce using rule 7 (type -> INT .)


state 81

    (8) type -> FLOAT .

    ID              reduce using rule 8 (type -> FLOAT .)


state 82

    (87) array -> ID EQUAL . ARRAY LPAREN var arrayp
    (90) matrix -> ID EQUAL . MATRIX LPAREN array matrixp
    (94) layers -> ID EQUAL . LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> ID EQUAL . SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (99) fit -> ID EQUAL . sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> ID EQUAL . sequential DOT PREDICT LPAREN LBRACKET predictp
    (95) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp

    ARRAY           shift and go to state 100
    MATRIX          shift and go to state 101
    LAYERS          shift and go to state 102
    SEQUENTIAL      shift and go to state 103
    ID              shift and go to state 99

    sequential                     shift and go to state 104

state 83

    (55) read -> READ var .

    SEMICOLON       reduce using rule 55 (read -> READ var .)
    FUNCTION        reduce using rule 55 (read -> READ var .)
    ID              reduce using rule 55 (read -> READ var .)
    READ            reduce using rule 55 (read -> READ var .)
    PRINT           reduce using rule 55 (read -> READ var .)
    IF              reduce using rule 55 (read -> READ var .)
    WHILE           reduce using rule 55 (read -> READ var .)
    FOR             reduce using rule 55 (read -> READ var .)
    MEAN            reduce using rule 55 (read -> READ var .)
    ELSE            reduce using rule 55 (read -> READ var .)
    VAR             reduce using rule 55 (read -> READ var .)
    RBRACE          reduce using rule 55 (read -> READ var .)
    RBRACKET        reduce using rule 55 (read -> READ var .)


state 84

    (59) var -> ID .

    SEMICOLON       reduce using rule 59 (var -> ID .)
    FUNCTION        reduce using rule 59 (var -> ID .)
    ID              reduce using rule 59 (var -> ID .)
    READ            reduce using rule 59 (var -> ID .)
    PRINT           reduce using rule 59 (var -> ID .)
    IF              reduce using rule 59 (var -> ID .)
    WHILE           reduce using rule 59 (var -> ID .)
    FOR             reduce using rule 59 (var -> ID .)
    MEAN            reduce using rule 59 (var -> ID .)
    ELSE            reduce using rule 59 (var -> ID .)
    VAR             reduce using rule 59 (var -> ID .)
    RBRACE          reduce using rule 59 (var -> ID .)
    RBRACKET        reduce using rule 59 (var -> ID .)
    RPAREN          reduce using rule 59 (var -> ID .)
    COMMA           reduce using rule 59 (var -> ID .)


state 85

    (56) print -> PRINT LPAREN . printp
    (57) printp -> . exp RPAREN
    (58) printp -> . exp COMMA printp
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    printp                         shift and go to state 105
    exp                            shift and go to state 106
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 86

    (63) if -> IF LPAREN . exp RPAREN quadsIf statements ifelse jumpsIf
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 107
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 87

    (75) for -> FOR LPAREN . var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (59) var -> . ID

    ID              shift and go to state 84

    var                            shift and go to state 108

state 88

    (105) getweights -> layers DOT . GETWEIGHTS LPAREN RPAREN

    GETWEIGHTS      shift and go to state 109


state 89

    (98) compile -> sequential DOT . COMPILE LPAREN RPAREN

    COMPILE         shift and go to state 110


state 90

    (93) mean -> MEAN LPAREN . array RPAREN
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 112

    array                          shift and go to state 111

state 91

    (61) callp -> exp SEMICOLON callp .

    RPAREN          reduce using rule 61 (callp -> exp SEMICOLON callp .)


state 92

    (71) whilep -> statements . whilep
    (70) whilep -> . SEMICOLON
    (71) whilep -> . statements whilep
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (69) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (75) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (78) funcesp -> . array
    (79) funcesp -> . matrix
    (80) funcesp -> . mean
    (81) funcesp -> . layers
    (82) funcesp -> . sequential
    (83) funcesp -> . compile
    (84) funcesp -> . fit
    (85) funcesp -> . predict
    (86) funcesp -> . getweights
    (59) var -> . ID
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (90) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (93) mean -> . MEAN LPAREN array RPAREN
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (98) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (99) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (105) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    SEMICOLON       shift and go to state 94
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 92
    whilep                         shift and go to state 113
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 93

    (69) while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .

    $end            reduce using rule 69 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    SEMICOLON       reduce using rule 69 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    FUNCTION        reduce using rule 69 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    ID              reduce using rule 69 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    READ            reduce using rule 69 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    PRINT           reduce using rule 69 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    IF              reduce using rule 69 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    WHILE           reduce using rule 69 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    FOR             reduce using rule 69 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    MEAN            reduce using rule 69 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    ELSE            reduce using rule 69 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    VAR             reduce using rule 69 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    RBRACE          reduce using rule 69 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    RBRACKET        reduce using rule 69 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)


state 94

    (70) whilep -> SEMICOLON .

    $end            reduce using rule 70 (whilep -> SEMICOLON .)
    SEMICOLON       reduce using rule 70 (whilep -> SEMICOLON .)
    FUNCTION        reduce using rule 70 (whilep -> SEMICOLON .)
    ID              reduce using rule 70 (whilep -> SEMICOLON .)
    READ            reduce using rule 70 (whilep -> SEMICOLON .)
    PRINT           reduce using rule 70 (whilep -> SEMICOLON .)
    IF              reduce using rule 70 (whilep -> SEMICOLON .)
    WHILE           reduce using rule 70 (whilep -> SEMICOLON .)
    FOR             reduce using rule 70 (whilep -> SEMICOLON .)
    MEAN            reduce using rule 70 (whilep -> SEMICOLON .)
    ELSE            reduce using rule 70 (whilep -> SEMICOLON .)
    VAR             reduce using rule 70 (whilep -> SEMICOLON .)
    RBRACE          reduce using rule 70 (whilep -> SEMICOLON .)
    RBRACKET        reduce using rule 70 (whilep -> SEMICOLON .)


state 95

    (54) assign -> var EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 114


state 96

    (9) function -> FUNCTION type decfunc . LPAREN param RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 115


state 97

    (10) decfunc -> ID .

    LPAREN          reduce using rule 10 (decfunc -> ID .)


state 98

    (11) voidfunction -> FUNCTION VOID decfunc . LPAREN param RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 116


state 99

    (95) sequential -> ID . EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp

    EQUAL           shift and go to state 117


state 100

    (87) array -> ID EQUAL ARRAY . LPAREN var arrayp

    LPAREN          shift and go to state 118


state 101

    (90) matrix -> ID EQUAL MATRIX . LPAREN array matrixp

    LPAREN          shift and go to state 119


state 102

    (94) layers -> ID EQUAL LAYERS . LPAREN UNITS EQUAL INT RPAREN

    LPAREN          shift and go to state 120


state 103

    (95) sequential -> ID EQUAL SEQUENTIAL . LPAREN LBRACKET layers sequentialp

    LPAREN          shift and go to state 121


state 104

    (99) fit -> ID EQUAL sequential . DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> ID EQUAL sequential . DOT PREDICT LPAREN LBRACKET predictp

    DOT             shift and go to state 122


state 105

    (56) print -> PRINT LPAREN printp .

    SEMICOLON       reduce using rule 56 (print -> PRINT LPAREN printp .)
    FUNCTION        reduce using rule 56 (print -> PRINT LPAREN printp .)
    ID              reduce using rule 56 (print -> PRINT LPAREN printp .)
    READ            reduce using rule 56 (print -> PRINT LPAREN printp .)
    PRINT           reduce using rule 56 (print -> PRINT LPAREN printp .)
    IF              reduce using rule 56 (print -> PRINT LPAREN printp .)
    WHILE           reduce using rule 56 (print -> PRINT LPAREN printp .)
    FOR             reduce using rule 56 (print -> PRINT LPAREN printp .)
    MEAN            reduce using rule 56 (print -> PRINT LPAREN printp .)
    ELSE            reduce using rule 56 (print -> PRINT LPAREN printp .)
    VAR             reduce using rule 56 (print -> PRINT LPAREN printp .)
    RBRACE          reduce using rule 56 (print -> PRINT LPAREN printp .)
    RBRACKET        reduce using rule 56 (print -> PRINT LPAREN printp .)


state 106

    (57) printp -> exp . RPAREN
    (58) printp -> exp . COMMA printp

    RPAREN          shift and go to state 123
    COMMA           shift and go to state 124


state 107

    (63) if -> IF LPAREN exp . RPAREN quadsIf statements ifelse jumpsIf

    RPAREN          shift and go to state 125


state 108

    (75) for -> FOR LPAREN var . SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp

    SEMICOLON       shift and go to state 126


state 109

    (105) getweights -> layers DOT GETWEIGHTS . LPAREN RPAREN

    LPAREN          shift and go to state 127


state 110

    (98) compile -> sequential DOT COMPILE . LPAREN RPAREN

    LPAREN          shift and go to state 128


state 111

    (93) mean -> MEAN LPAREN array . RPAREN

    RPAREN          shift and go to state 129


state 112

    (87) array -> ID . EQUAL ARRAY LPAREN var arrayp

    EQUAL           shift and go to state 130


state 113

    (71) whilep -> statements whilep .

    $end            reduce using rule 71 (whilep -> statements whilep .)
    SEMICOLON       reduce using rule 71 (whilep -> statements whilep .)
    FUNCTION        reduce using rule 71 (whilep -> statements whilep .)
    ID              reduce using rule 71 (whilep -> statements whilep .)
    READ            reduce using rule 71 (whilep -> statements whilep .)
    PRINT           reduce using rule 71 (whilep -> statements whilep .)
    IF              reduce using rule 71 (whilep -> statements whilep .)
    WHILE           reduce using rule 71 (whilep -> statements whilep .)
    FOR             reduce using rule 71 (whilep -> statements whilep .)
    MEAN            reduce using rule 71 (whilep -> statements whilep .)
    ELSE            reduce using rule 71 (whilep -> statements whilep .)
    VAR             reduce using rule 71 (whilep -> statements whilep .)
    RBRACE          reduce using rule 71 (whilep -> statements whilep .)
    RBRACKET        reduce using rule 71 (whilep -> statements whilep .)


state 114

    (54) assign -> var EQUAL exp SEMICOLON .

    SEMICOLON       reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    FUNCTION        reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    ID              reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    READ            reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    IF              reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    FOR             reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    MEAN            reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    ELSE            reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    VAR             reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    RBRACKET        reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)


state 115

    (9) function -> FUNCTION type decfunc LPAREN . param RPAREN LBRACE body RBRACE
    (21) param -> . type ID
    (22) param -> . type ID COMMA param
    (7) type -> . INT
    (8) type -> . FLOAT

    INT             shift and go to state 80
    FLOAT           shift and go to state 81

    type                           shift and go to state 131
    param                          shift and go to state 132

state 116

    (11) voidfunction -> FUNCTION VOID decfunc LPAREN . param RPAREN LBRACE body RBRACE
    (21) param -> . type ID
    (22) param -> . type ID COMMA param
    (7) type -> . INT
    (8) type -> . FLOAT

    INT             shift and go to state 80
    FLOAT           shift and go to state 81

    param                          shift and go to state 133
    type                           shift and go to state 131

state 117

    (95) sequential -> ID EQUAL . SEQUENTIAL LPAREN LBRACKET layers sequentialp

    SEQUENTIAL      shift and go to state 103


state 118

    (87) array -> ID EQUAL ARRAY LPAREN . var arrayp
    (59) var -> . ID

    ID              shift and go to state 84

    var                            shift and go to state 134

state 119

    (90) matrix -> ID EQUAL MATRIX LPAREN . array matrixp
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 112

    array                          shift and go to state 135

state 120

    (94) layers -> ID EQUAL LAYERS LPAREN . UNITS EQUAL INT RPAREN

    UNITS           shift and go to state 136


state 121

    (95) sequential -> ID EQUAL SEQUENTIAL LPAREN . LBRACKET layers sequentialp

    LBRACKET        shift and go to state 137


state 122

    (99) fit -> ID EQUAL sequential DOT . FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> ID EQUAL sequential DOT . PREDICT LPAREN LBRACKET predictp

    FIT             shift and go to state 138
    PREDICT         shift and go to state 139


state 123

    (57) printp -> exp RPAREN .

    SEMICOLON       reduce using rule 57 (printp -> exp RPAREN .)
    FUNCTION        reduce using rule 57 (printp -> exp RPAREN .)
    ID              reduce using rule 57 (printp -> exp RPAREN .)
    READ            reduce using rule 57 (printp -> exp RPAREN .)
    PRINT           reduce using rule 57 (printp -> exp RPAREN .)
    IF              reduce using rule 57 (printp -> exp RPAREN .)
    WHILE           reduce using rule 57 (printp -> exp RPAREN .)
    FOR             reduce using rule 57 (printp -> exp RPAREN .)
    MEAN            reduce using rule 57 (printp -> exp RPAREN .)
    ELSE            reduce using rule 57 (printp -> exp RPAREN .)
    VAR             reduce using rule 57 (printp -> exp RPAREN .)
    RBRACE          reduce using rule 57 (printp -> exp RPAREN .)
    RBRACKET        reduce using rule 57 (printp -> exp RPAREN .)


state 124

    (58) printp -> exp COMMA . printp
    (57) printp -> . exp RPAREN
    (58) printp -> . exp COMMA printp
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 106
    printp                         shift and go to state 140
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 125

    (63) if -> IF LPAREN exp RPAREN . quadsIf statements ifelse jumpsIf
    (66) quadsIf -> .

    FUNCTION        reduce using rule 66 (quadsIf -> .)
    ID              reduce using rule 66 (quadsIf -> .)
    READ            reduce using rule 66 (quadsIf -> .)
    PRINT           reduce using rule 66 (quadsIf -> .)
    IF              reduce using rule 66 (quadsIf -> .)
    WHILE           reduce using rule 66 (quadsIf -> .)
    FOR             reduce using rule 66 (quadsIf -> .)
    MEAN            reduce using rule 66 (quadsIf -> .)

    quadsIf                        shift and go to state 141

state 126

    (75) for -> FOR LPAREN var SEMICOLON . exp SEMICOLON exp RPAREN LBRACKET statements forp
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    var                            shift and go to state 18
    exp                            shift and go to state 142
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    call                           shift and go to state 19

state 127

    (105) getweights -> layers DOT GETWEIGHTS LPAREN . RPAREN

    RPAREN          shift and go to state 143


state 128

    (98) compile -> sequential DOT COMPILE LPAREN . RPAREN

    RPAREN          shift and go to state 144


state 129

    (93) mean -> MEAN LPAREN array RPAREN .

    SEMICOLON       reduce using rule 93 (mean -> MEAN LPAREN array RPAREN .)
    FUNCTION        reduce using rule 93 (mean -> MEAN LPAREN array RPAREN .)
    ID              reduce using rule 93 (mean -> MEAN LPAREN array RPAREN .)
    READ            reduce using rule 93 (mean -> MEAN LPAREN array RPAREN .)
    PRINT           reduce using rule 93 (mean -> MEAN LPAREN array RPAREN .)
    IF              reduce using rule 93 (mean -> MEAN LPAREN array RPAREN .)
    WHILE           reduce using rule 93 (mean -> MEAN LPAREN array RPAREN .)
    FOR             reduce using rule 93 (mean -> MEAN LPAREN array RPAREN .)
    MEAN            reduce using rule 93 (mean -> MEAN LPAREN array RPAREN .)
    ELSE            reduce using rule 93 (mean -> MEAN LPAREN array RPAREN .)
    VAR             reduce using rule 93 (mean -> MEAN LPAREN array RPAREN .)
    RBRACE          reduce using rule 93 (mean -> MEAN LPAREN array RPAREN .)
    RBRACKET        reduce using rule 93 (mean -> MEAN LPAREN array RPAREN .)


state 130

    (87) array -> ID EQUAL . ARRAY LPAREN var arrayp

    ARRAY           shift and go to state 100


state 131

    (21) param -> type . ID
    (22) param -> type . ID COMMA param

    ID              shift and go to state 145


state 132

    (9) function -> FUNCTION type decfunc LPAREN param . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 146


state 133

    (11) voidfunction -> FUNCTION VOID decfunc LPAREN param . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 147


state 134

    (87) array -> ID EQUAL ARRAY LPAREN var . arrayp
    (88) arrayp -> . RPAREN
    (89) arrayp -> . COMMA var RPAREN

    RPAREN          shift and go to state 149
    COMMA           shift and go to state 150

    arrayp                         shift and go to state 148

state 135

    (90) matrix -> ID EQUAL MATRIX LPAREN array . matrixp
    (91) matrixp -> . RPAREN
    (92) matrixp -> . COMMA array RPAREN

    RPAREN          shift and go to state 152
    COMMA           shift and go to state 153

    matrixp                        shift and go to state 151

state 136

    (94) layers -> ID EQUAL LAYERS LPAREN UNITS . EQUAL INT RPAREN

    EQUAL           shift and go to state 154


state 137

    (95) sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET . layers sequentialp
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN

    ID              shift and go to state 155

    layers                         shift and go to state 156

state 138

    (99) fit -> ID EQUAL sequential DOT FIT . LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp

    LPAREN          shift and go to state 157


state 139

    (102) predict -> ID EQUAL sequential DOT PREDICT . LPAREN LBRACKET predictp

    LPAREN          shift and go to state 158


state 140

    (58) printp -> exp COMMA printp .

    SEMICOLON       reduce using rule 58 (printp -> exp COMMA printp .)
    FUNCTION        reduce using rule 58 (printp -> exp COMMA printp .)
    ID              reduce using rule 58 (printp -> exp COMMA printp .)
    READ            reduce using rule 58 (printp -> exp COMMA printp .)
    PRINT           reduce using rule 58 (printp -> exp COMMA printp .)
    IF              reduce using rule 58 (printp -> exp COMMA printp .)
    WHILE           reduce using rule 58 (printp -> exp COMMA printp .)
    FOR             reduce using rule 58 (printp -> exp COMMA printp .)
    MEAN            reduce using rule 58 (printp -> exp COMMA printp .)
    ELSE            reduce using rule 58 (printp -> exp COMMA printp .)
    VAR             reduce using rule 58 (printp -> exp COMMA printp .)
    RBRACE          reduce using rule 58 (printp -> exp COMMA printp .)
    RBRACKET        reduce using rule 58 (printp -> exp COMMA printp .)


state 141

    (63) if -> IF LPAREN exp RPAREN quadsIf . statements ifelse jumpsIf
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (69) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (75) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (78) funcesp -> . array
    (79) funcesp -> . matrix
    (80) funcesp -> . mean
    (81) funcesp -> . layers
    (82) funcesp -> . sequential
    (83) funcesp -> . compile
    (84) funcesp -> . fit
    (85) funcesp -> . predict
    (86) funcesp -> . getweights
    (59) var -> . ID
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (90) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (93) mean -> . MEAN LPAREN array RPAREN
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (98) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (99) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (105) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 159
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 142

    (75) for -> FOR LPAREN var SEMICOLON exp . SEMICOLON exp RPAREN LBRACKET statements forp

    SEMICOLON       shift and go to state 160


state 143

    (105) getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .

    SEMICOLON       reduce using rule 105 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    FUNCTION        reduce using rule 105 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    ID              reduce using rule 105 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    READ            reduce using rule 105 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    PRINT           reduce using rule 105 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    IF              reduce using rule 105 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    WHILE           reduce using rule 105 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    FOR             reduce using rule 105 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    MEAN            reduce using rule 105 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    ELSE            reduce using rule 105 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    VAR             reduce using rule 105 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    RBRACE          reduce using rule 105 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    RBRACKET        reduce using rule 105 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)


state 144

    (98) compile -> sequential DOT COMPILE LPAREN RPAREN .

    SEMICOLON       reduce using rule 98 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    FUNCTION        reduce using rule 98 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    ID              reduce using rule 98 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    READ            reduce using rule 98 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    PRINT           reduce using rule 98 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    IF              reduce using rule 98 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    WHILE           reduce using rule 98 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    FOR             reduce using rule 98 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    MEAN            reduce using rule 98 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    ELSE            reduce using rule 98 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    VAR             reduce using rule 98 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    RBRACE          reduce using rule 98 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    RBRACKET        reduce using rule 98 (compile -> sequential DOT COMPILE LPAREN RPAREN .)


state 145

    (21) param -> type ID .
    (22) param -> type ID . COMMA param

    RPAREN          reduce using rule 21 (param -> type ID .)
    COMMA           shift and go to state 161


state 146

    (9) function -> FUNCTION type decfunc LPAREN param RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 162


state 147

    (11) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 163


state 148

    (87) array -> ID EQUAL ARRAY LPAREN var arrayp .

    SEMICOLON       reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    FUNCTION        reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    ID              reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    READ            reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    PRINT           reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    IF              reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    WHILE           reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    FOR             reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    MEAN            reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    RPAREN          reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    COMMA           reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    ELSE            reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    VAR             reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    RBRACE          reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    RBRACKET        reduce using rule 87 (array -> ID EQUAL ARRAY LPAREN var arrayp .)


state 149

    (88) arrayp -> RPAREN .

    SEMICOLON       reduce using rule 88 (arrayp -> RPAREN .)
    FUNCTION        reduce using rule 88 (arrayp -> RPAREN .)
    ID              reduce using rule 88 (arrayp -> RPAREN .)
    READ            reduce using rule 88 (arrayp -> RPAREN .)
    PRINT           reduce using rule 88 (arrayp -> RPAREN .)
    IF              reduce using rule 88 (arrayp -> RPAREN .)
    WHILE           reduce using rule 88 (arrayp -> RPAREN .)
    FOR             reduce using rule 88 (arrayp -> RPAREN .)
    MEAN            reduce using rule 88 (arrayp -> RPAREN .)
    RPAREN          reduce using rule 88 (arrayp -> RPAREN .)
    COMMA           reduce using rule 88 (arrayp -> RPAREN .)
    ELSE            reduce using rule 88 (arrayp -> RPAREN .)
    VAR             reduce using rule 88 (arrayp -> RPAREN .)
    RBRACE          reduce using rule 88 (arrayp -> RPAREN .)
    RBRACKET        reduce using rule 88 (arrayp -> RPAREN .)


state 150

    (89) arrayp -> COMMA . var RPAREN
    (59) var -> . ID

    ID              shift and go to state 84

    var                            shift and go to state 164

state 151

    (90) matrix -> ID EQUAL MATRIX LPAREN array matrixp .

    SEMICOLON       reduce using rule 90 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    FUNCTION        reduce using rule 90 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    ID              reduce using rule 90 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    READ            reduce using rule 90 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    PRINT           reduce using rule 90 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    IF              reduce using rule 90 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    WHILE           reduce using rule 90 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    FOR             reduce using rule 90 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    MEAN            reduce using rule 90 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    ELSE            reduce using rule 90 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    VAR             reduce using rule 90 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    RBRACE          reduce using rule 90 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    RBRACKET        reduce using rule 90 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)


state 152

    (91) matrixp -> RPAREN .

    SEMICOLON       reduce using rule 91 (matrixp -> RPAREN .)
    FUNCTION        reduce using rule 91 (matrixp -> RPAREN .)
    ID              reduce using rule 91 (matrixp -> RPAREN .)
    READ            reduce using rule 91 (matrixp -> RPAREN .)
    PRINT           reduce using rule 91 (matrixp -> RPAREN .)
    IF              reduce using rule 91 (matrixp -> RPAREN .)
    WHILE           reduce using rule 91 (matrixp -> RPAREN .)
    FOR             reduce using rule 91 (matrixp -> RPAREN .)
    MEAN            reduce using rule 91 (matrixp -> RPAREN .)
    ELSE            reduce using rule 91 (matrixp -> RPAREN .)
    VAR             reduce using rule 91 (matrixp -> RPAREN .)
    RBRACE          reduce using rule 91 (matrixp -> RPAREN .)
    RBRACKET        reduce using rule 91 (matrixp -> RPAREN .)


state 153

    (92) matrixp -> COMMA . array RPAREN
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 112

    array                          shift and go to state 165

state 154

    (94) layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL . INT RPAREN

    INT             shift and go to state 166


state 155

    (94) layers -> ID . EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN

    EQUAL           shift and go to state 167


state 156

    (95) sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers . sequentialp
    (96) sequentialp -> . RBRACKET RPAREN
    (97) sequentialp -> . COMMA layers sequentialp

    RBRACKET        shift and go to state 169
    COMMA           shift and go to state 170

    sequentialp                    shift and go to state 168

state 157

    (99) fit -> ID EQUAL sequential DOT FIT LPAREN . array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 112

    array                          shift and go to state 171

state 158

    (102) predict -> ID EQUAL sequential DOT PREDICT LPAREN . LBRACKET predictp

    LBRACKET        shift and go to state 172


state 159

    (63) if -> IF LPAREN exp RPAREN quadsIf statements . ifelse jumpsIf
    (64) ifelse -> .
    (65) ifelse -> . ELSE quadsElse statements

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 64 (ifelse -> .)
    FUNCTION        reduce using rule 64 (ifelse -> .)
    ID              reduce using rule 64 (ifelse -> .)
    READ            reduce using rule 64 (ifelse -> .)
    PRINT           reduce using rule 64 (ifelse -> .)
    IF              reduce using rule 64 (ifelse -> .)
    WHILE           reduce using rule 64 (ifelse -> .)
    FOR             reduce using rule 64 (ifelse -> .)
    MEAN            reduce using rule 64 (ifelse -> .)
    VAR             reduce using rule 64 (ifelse -> .)
    RBRACE          reduce using rule 64 (ifelse -> .)
    RBRACKET        reduce using rule 64 (ifelse -> .)
    ELSE            shift and go to state 174

  ! ELSE            [ reduce using rule 64 (ifelse -> .) ]

    ifelse                         shift and go to state 173

state 160

    (75) for -> FOR LPAREN var SEMICOLON exp SEMICOLON . exp RPAREN LBRACKET statements forp
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    var                            shift and go to state 18
    exp                            shift and go to state 175
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    call                           shift and go to state 19

state 161

    (22) param -> type ID COMMA . param
    (21) param -> . type ID
    (22) param -> . type ID COMMA param
    (7) type -> . INT
    (8) type -> . FLOAT

    INT             shift and go to state 80
    FLOAT           shift and go to state 81

    type                           shift and go to state 131
    param                          shift and go to state 176

state 162

    (9) function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE . body RBRACE
    (17) body -> . decvar statements body
    (18) body -> . statements body
    (19) body -> . decvar
    (20) body -> .
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (69) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (75) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (78) funcesp -> . array
    (79) funcesp -> . matrix
    (80) funcesp -> . mean
    (81) funcesp -> . layers
    (82) funcesp -> . sequential
    (83) funcesp -> . compile
    (84) funcesp -> . fit
    (85) funcesp -> . predict
    (86) funcesp -> . getweights
    (59) var -> . ID
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (90) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (93) mean -> . MEAN LPAREN array RPAREN
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (98) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (99) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (105) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACE          reduce using rule 20 (body -> .)
    VAR             shift and go to state 180
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    body                           shift and go to state 177
    decvar                         shift and go to state 178
    statements                     shift and go to state 179
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 163

    (11) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE . body RBRACE
    (17) body -> . decvar statements body
    (18) body -> . statements body
    (19) body -> . decvar
    (20) body -> .
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (69) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (75) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (78) funcesp -> . array
    (79) funcesp -> . matrix
    (80) funcesp -> . mean
    (81) funcesp -> . layers
    (82) funcesp -> . sequential
    (83) funcesp -> . compile
    (84) funcesp -> . fit
    (85) funcesp -> . predict
    (86) funcesp -> . getweights
    (59) var -> . ID
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (90) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (93) mean -> . MEAN LPAREN array RPAREN
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (98) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (99) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (105) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACE          reduce using rule 20 (body -> .)
    VAR             shift and go to state 180
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    body                           shift and go to state 181
    decvar                         shift and go to state 178
    statements                     shift and go to state 179
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 164

    (89) arrayp -> COMMA var . RPAREN

    RPAREN          shift and go to state 182


state 165

    (92) matrixp -> COMMA array . RPAREN

    RPAREN          shift and go to state 183


state 166

    (94) layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT . RPAREN

    RPAREN          shift and go to state 184


state 167

    (94) layers -> ID EQUAL . LAYERS LPAREN UNITS EQUAL INT RPAREN

    LAYERS          shift and go to state 102


state 168

    (95) sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .

    DOT             reduce using rule 95 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    SEMICOLON       reduce using rule 95 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    FUNCTION        reduce using rule 95 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    ID              reduce using rule 95 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    READ            reduce using rule 95 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    PRINT           reduce using rule 95 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    IF              reduce using rule 95 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    WHILE           reduce using rule 95 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    FOR             reduce using rule 95 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    MEAN            reduce using rule 95 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    ELSE            reduce using rule 95 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    VAR             reduce using rule 95 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    RBRACE          reduce using rule 95 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    RBRACKET        reduce using rule 95 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)


state 169

    (96) sequentialp -> RBRACKET . RPAREN

    RPAREN          shift and go to state 185


state 170

    (97) sequentialp -> COMMA . layers sequentialp
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN

    ID              shift and go to state 155

    layers                         shift and go to state 186

state 171

    (99) fit -> ID EQUAL sequential DOT FIT LPAREN array . COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp

    COMMA           shift and go to state 187


state 172

    (102) predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET . predictp
    (103) predictp -> . INT RBRACKET RPAREN
    (104) predictp -> . FLOAT RBRACKET RPAREN

    INT             shift and go to state 189
    FLOAT           shift and go to state 190

    predictp                       shift and go to state 188

state 173

    (63) if -> IF LPAREN exp RPAREN quadsIf statements ifelse . jumpsIf
    (67) jumpsIf -> .

    SEMICOLON       reduce using rule 67 (jumpsIf -> .)
    FUNCTION        reduce using rule 67 (jumpsIf -> .)
    ID              reduce using rule 67 (jumpsIf -> .)
    READ            reduce using rule 67 (jumpsIf -> .)
    PRINT           reduce using rule 67 (jumpsIf -> .)
    IF              reduce using rule 67 (jumpsIf -> .)
    WHILE           reduce using rule 67 (jumpsIf -> .)
    FOR             reduce using rule 67 (jumpsIf -> .)
    MEAN            reduce using rule 67 (jumpsIf -> .)
    ELSE            reduce using rule 67 (jumpsIf -> .)
    VAR             reduce using rule 67 (jumpsIf -> .)
    RBRACE          reduce using rule 67 (jumpsIf -> .)
    RBRACKET        reduce using rule 67 (jumpsIf -> .)

    jumpsIf                        shift and go to state 191

state 174

    (65) ifelse -> ELSE . quadsElse statements
    (68) quadsElse -> .

    FUNCTION        reduce using rule 68 (quadsElse -> .)
    ID              reduce using rule 68 (quadsElse -> .)
    READ            reduce using rule 68 (quadsElse -> .)
    PRINT           reduce using rule 68 (quadsElse -> .)
    IF              reduce using rule 68 (quadsElse -> .)
    WHILE           reduce using rule 68 (quadsElse -> .)
    FOR             reduce using rule 68 (quadsElse -> .)
    MEAN            reduce using rule 68 (quadsElse -> .)

    quadsElse                      shift and go to state 192

state 175

    (75) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp . RPAREN LBRACKET statements forp

    RPAREN          shift and go to state 193


state 176

    (22) param -> type ID COMMA param .

    RPAREN          reduce using rule 22 (param -> type ID COMMA param .)


state 177

    (9) function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 194


state 178

    (17) body -> decvar . statements body
    (19) body -> decvar .
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (69) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (75) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (78) funcesp -> . array
    (79) funcesp -> . matrix
    (80) funcesp -> . mean
    (81) funcesp -> . layers
    (82) funcesp -> . sequential
    (83) funcesp -> . compile
    (84) funcesp -> . fit
    (85) funcesp -> . predict
    (86) funcesp -> . getweights
    (59) var -> . ID
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (90) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (93) mean -> . MEAN LPAREN array RPAREN
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (98) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (99) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (105) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACE          reduce using rule 19 (body -> decvar .)
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 195
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 179

    (18) body -> statements . body
    (17) body -> . decvar statements body
    (18) body -> . statements body
    (19) body -> . decvar
    (20) body -> .
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (69) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (75) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (78) funcesp -> . array
    (79) funcesp -> . matrix
    (80) funcesp -> . mean
    (81) funcesp -> . layers
    (82) funcesp -> . sequential
    (83) funcesp -> . compile
    (84) funcesp -> . fit
    (85) funcesp -> . predict
    (86) funcesp -> . getweights
    (59) var -> . ID
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (90) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (93) mean -> . MEAN LPAREN array RPAREN
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (98) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (99) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (105) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACE          reduce using rule 20 (body -> .)
    VAR             shift and go to state 180
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 179
    body                           shift and go to state 196
    decvar                         shift and go to state 178
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 180

    (2) decvar -> VAR . decvarp
    (3) decvar -> VAR . decvarp decvar
    (4) decvarp -> . type decvarpp SEMICOLON
    (7) type -> . INT
    (8) type -> . FLOAT

    INT             shift and go to state 80
    FLOAT           shift and go to state 81

    decvarp                        shift and go to state 197
    type                           shift and go to state 198

state 181

    (11) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 199


state 182

    (89) arrayp -> COMMA var RPAREN .

    SEMICOLON       reduce using rule 89 (arrayp -> COMMA var RPAREN .)
    FUNCTION        reduce using rule 89 (arrayp -> COMMA var RPAREN .)
    ID              reduce using rule 89 (arrayp -> COMMA var RPAREN .)
    READ            reduce using rule 89 (arrayp -> COMMA var RPAREN .)
    PRINT           reduce using rule 89 (arrayp -> COMMA var RPAREN .)
    IF              reduce using rule 89 (arrayp -> COMMA var RPAREN .)
    WHILE           reduce using rule 89 (arrayp -> COMMA var RPAREN .)
    FOR             reduce using rule 89 (arrayp -> COMMA var RPAREN .)
    MEAN            reduce using rule 89 (arrayp -> COMMA var RPAREN .)
    RPAREN          reduce using rule 89 (arrayp -> COMMA var RPAREN .)
    COMMA           reduce using rule 89 (arrayp -> COMMA var RPAREN .)
    ELSE            reduce using rule 89 (arrayp -> COMMA var RPAREN .)
    VAR             reduce using rule 89 (arrayp -> COMMA var RPAREN .)
    RBRACE          reduce using rule 89 (arrayp -> COMMA var RPAREN .)
    RBRACKET        reduce using rule 89 (arrayp -> COMMA var RPAREN .)


state 183

    (92) matrixp -> COMMA array RPAREN .

    SEMICOLON       reduce using rule 92 (matrixp -> COMMA array RPAREN .)
    FUNCTION        reduce using rule 92 (matrixp -> COMMA array RPAREN .)
    ID              reduce using rule 92 (matrixp -> COMMA array RPAREN .)
    READ            reduce using rule 92 (matrixp -> COMMA array RPAREN .)
    PRINT           reduce using rule 92 (matrixp -> COMMA array RPAREN .)
    IF              reduce using rule 92 (matrixp -> COMMA array RPAREN .)
    WHILE           reduce using rule 92 (matrixp -> COMMA array RPAREN .)
    FOR             reduce using rule 92 (matrixp -> COMMA array RPAREN .)
    MEAN            reduce using rule 92 (matrixp -> COMMA array RPAREN .)
    ELSE            reduce using rule 92 (matrixp -> COMMA array RPAREN .)
    VAR             reduce using rule 92 (matrixp -> COMMA array RPAREN .)
    RBRACE          reduce using rule 92 (matrixp -> COMMA array RPAREN .)
    RBRACKET        reduce using rule 92 (matrixp -> COMMA array RPAREN .)


state 184

    (94) layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .

    DOT             reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    SEMICOLON       reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    FUNCTION        reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    ID              reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    READ            reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    PRINT           reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    IF              reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    WHILE           reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    FOR             reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    MEAN            reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    RBRACKET        reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    COMMA           reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    ELSE            reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    VAR             reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    RBRACE          reduce using rule 94 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)


state 185

    (96) sequentialp -> RBRACKET RPAREN .

    DOT             reduce using rule 96 (sequentialp -> RBRACKET RPAREN .)
    SEMICOLON       reduce using rule 96 (sequentialp -> RBRACKET RPAREN .)
    FUNCTION        reduce using rule 96 (sequentialp -> RBRACKET RPAREN .)
    ID              reduce using rule 96 (sequentialp -> RBRACKET RPAREN .)
    READ            reduce using rule 96 (sequentialp -> RBRACKET RPAREN .)
    PRINT           reduce using rule 96 (sequentialp -> RBRACKET RPAREN .)
    IF              reduce using rule 96 (sequentialp -> RBRACKET RPAREN .)
    WHILE           reduce using rule 96 (sequentialp -> RBRACKET RPAREN .)
    FOR             reduce using rule 96 (sequentialp -> RBRACKET RPAREN .)
    MEAN            reduce using rule 96 (sequentialp -> RBRACKET RPAREN .)
    ELSE            reduce using rule 96 (sequentialp -> RBRACKET RPAREN .)
    VAR             reduce using rule 96 (sequentialp -> RBRACKET RPAREN .)
    RBRACE          reduce using rule 96 (sequentialp -> RBRACKET RPAREN .)
    RBRACKET        reduce using rule 96 (sequentialp -> RBRACKET RPAREN .)


state 186

    (97) sequentialp -> COMMA layers . sequentialp
    (96) sequentialp -> . RBRACKET RPAREN
    (97) sequentialp -> . COMMA layers sequentialp

    RBRACKET        shift and go to state 169
    COMMA           shift and go to state 170

    sequentialp                    shift and go to state 200

state 187

    (99) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA . array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 112

    array                          shift and go to state 201

state 188

    (102) predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .

    SEMICOLON       reduce using rule 102 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    FUNCTION        reduce using rule 102 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    ID              reduce using rule 102 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    READ            reduce using rule 102 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    PRINT           reduce using rule 102 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    IF              reduce using rule 102 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    WHILE           reduce using rule 102 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    FOR             reduce using rule 102 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    MEAN            reduce using rule 102 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    ELSE            reduce using rule 102 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    VAR             reduce using rule 102 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    RBRACE          reduce using rule 102 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    RBRACKET        reduce using rule 102 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)


state 189

    (103) predictp -> INT . RBRACKET RPAREN

    RBRACKET        shift and go to state 202


state 190

    (104) predictp -> FLOAT . RBRACKET RPAREN

    RBRACKET        shift and go to state 203


state 191

    (63) if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .

    SEMICOLON       reduce using rule 63 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    FUNCTION        reduce using rule 63 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    ID              reduce using rule 63 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    READ            reduce using rule 63 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    PRINT           reduce using rule 63 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    IF              reduce using rule 63 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    WHILE           reduce using rule 63 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    FOR             reduce using rule 63 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    MEAN            reduce using rule 63 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    ELSE            reduce using rule 63 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    VAR             reduce using rule 63 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    RBRACE          reduce using rule 63 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    RBRACKET        reduce using rule 63 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)


state 192

    (65) ifelse -> ELSE quadsElse . statements
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (69) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (75) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (78) funcesp -> . array
    (79) funcesp -> . matrix
    (80) funcesp -> . mean
    (81) funcesp -> . layers
    (82) funcesp -> . sequential
    (83) funcesp -> . compile
    (84) funcesp -> . fit
    (85) funcesp -> . predict
    (86) funcesp -> . getweights
    (59) var -> . ID
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (90) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (93) mean -> . MEAN LPAREN array RPAREN
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (98) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (99) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (105) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 204
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 193

    (75) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN . LBRACKET statements forp

    LBRACKET        shift and go to state 205


state 194

    (9) function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .

    SEMICOLON       reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    READ            reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    MEAN            reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    ELSE            reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    VAR             reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RBRACKET        reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)


state 195

    (17) body -> decvar statements . body
    (17) body -> . decvar statements body
    (18) body -> . statements body
    (19) body -> . decvar
    (20) body -> .
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (69) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (75) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (78) funcesp -> . array
    (79) funcesp -> . matrix
    (80) funcesp -> . mean
    (81) funcesp -> . layers
    (82) funcesp -> . sequential
    (83) funcesp -> . compile
    (84) funcesp -> . fit
    (85) funcesp -> . predict
    (86) funcesp -> . getweights
    (59) var -> . ID
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (90) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (93) mean -> . MEAN LPAREN array RPAREN
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (98) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (99) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (105) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACE          reduce using rule 20 (body -> .)
    VAR             shift and go to state 180
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    decvar                         shift and go to state 178
    statements                     shift and go to state 179
    body                           shift and go to state 206
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 196

    (18) body -> statements body .

    RBRACE          reduce using rule 18 (body -> statements body .)


state 197

    (2) decvar -> VAR decvarp .
    (3) decvar -> VAR decvarp . decvar
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar

    FUNCTION        reduce using rule 2 (decvar -> VAR decvarp .)
    ID              reduce using rule 2 (decvar -> VAR decvarp .)
    READ            reduce using rule 2 (decvar -> VAR decvarp .)
    PRINT           reduce using rule 2 (decvar -> VAR decvarp .)
    IF              reduce using rule 2 (decvar -> VAR decvarp .)
    WHILE           reduce using rule 2 (decvar -> VAR decvarp .)
    FOR             reduce using rule 2 (decvar -> VAR decvarp .)
    MEAN            reduce using rule 2 (decvar -> VAR decvarp .)
    RBRACE          reduce using rule 2 (decvar -> VAR decvarp .)
    VAR             shift and go to state 180

    decvar                         shift and go to state 207

state 198

    (4) decvarp -> type . decvarpp SEMICOLON
    (5) decvarpp -> . ID COMMA decvarpp
    (6) decvarpp -> . ID

    ID              shift and go to state 209

    decvarpp                       shift and go to state 208

state 199

    (11) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .

    SEMICOLON       reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    READ            reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    MEAN            reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    ELSE            reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    VAR             reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RBRACKET        reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)


state 200

    (97) sequentialp -> COMMA layers sequentialp .

    DOT             reduce using rule 97 (sequentialp -> COMMA layers sequentialp .)
    SEMICOLON       reduce using rule 97 (sequentialp -> COMMA layers sequentialp .)
    FUNCTION        reduce using rule 97 (sequentialp -> COMMA layers sequentialp .)
    ID              reduce using rule 97 (sequentialp -> COMMA layers sequentialp .)
    READ            reduce using rule 97 (sequentialp -> COMMA layers sequentialp .)
    PRINT           reduce using rule 97 (sequentialp -> COMMA layers sequentialp .)
    IF              reduce using rule 97 (sequentialp -> COMMA layers sequentialp .)
    WHILE           reduce using rule 97 (sequentialp -> COMMA layers sequentialp .)
    FOR             reduce using rule 97 (sequentialp -> COMMA layers sequentialp .)
    MEAN            reduce using rule 97 (sequentialp -> COMMA layers sequentialp .)
    ELSE            reduce using rule 97 (sequentialp -> COMMA layers sequentialp .)
    VAR             reduce using rule 97 (sequentialp -> COMMA layers sequentialp .)
    RBRACE          reduce using rule 97 (sequentialp -> COMMA layers sequentialp .)
    RBRACKET        reduce using rule 97 (sequentialp -> COMMA layers sequentialp .)


state 201

    (99) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array . COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp

    COMMA           shift and go to state 210


state 202

    (103) predictp -> INT RBRACKET . RPAREN

    RPAREN          shift and go to state 211


state 203

    (104) predictp -> FLOAT RBRACKET . RPAREN

    RPAREN          shift and go to state 212


state 204

    (65) ifelse -> ELSE quadsElse statements .

    ELSE            reduce using rule 65 (ifelse -> ELSE quadsElse statements .)
    SEMICOLON       reduce using rule 65 (ifelse -> ELSE quadsElse statements .)
    FUNCTION        reduce using rule 65 (ifelse -> ELSE quadsElse statements .)
    ID              reduce using rule 65 (ifelse -> ELSE quadsElse statements .)
    READ            reduce using rule 65 (ifelse -> ELSE quadsElse statements .)
    PRINT           reduce using rule 65 (ifelse -> ELSE quadsElse statements .)
    IF              reduce using rule 65 (ifelse -> ELSE quadsElse statements .)
    WHILE           reduce using rule 65 (ifelse -> ELSE quadsElse statements .)
    FOR             reduce using rule 65 (ifelse -> ELSE quadsElse statements .)
    MEAN            reduce using rule 65 (ifelse -> ELSE quadsElse statements .)
    VAR             reduce using rule 65 (ifelse -> ELSE quadsElse statements .)
    RBRACE          reduce using rule 65 (ifelse -> ELSE quadsElse statements .)
    RBRACKET        reduce using rule 65 (ifelse -> ELSE quadsElse statements .)


state 205

    (75) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET . statements forp
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (69) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (75) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (78) funcesp -> . array
    (79) funcesp -> . matrix
    (80) funcesp -> . mean
    (81) funcesp -> . layers
    (82) funcesp -> . sequential
    (83) funcesp -> . compile
    (84) funcesp -> . fit
    (85) funcesp -> . predict
    (86) funcesp -> . getweights
    (59) var -> . ID
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (90) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (93) mean -> . MEAN LPAREN array RPAREN
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (98) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (99) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (105) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    var                            shift and go to state 57
    statements                     shift and go to state 213
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 206

    (17) body -> decvar statements body .

    RBRACE          reduce using rule 17 (body -> decvar statements body .)


state 207

    (3) decvar -> VAR decvarp decvar .

    FUNCTION        reduce using rule 3 (decvar -> VAR decvarp decvar .)
    ID              reduce using rule 3 (decvar -> VAR decvarp decvar .)
    READ            reduce using rule 3 (decvar -> VAR decvarp decvar .)
    PRINT           reduce using rule 3 (decvar -> VAR decvarp decvar .)
    IF              reduce using rule 3 (decvar -> VAR decvarp decvar .)
    WHILE           reduce using rule 3 (decvar -> VAR decvarp decvar .)
    FOR             reduce using rule 3 (decvar -> VAR decvarp decvar .)
    MEAN            reduce using rule 3 (decvar -> VAR decvarp decvar .)
    RBRACE          reduce using rule 3 (decvar -> VAR decvarp decvar .)


state 208

    (4) decvarp -> type decvarpp . SEMICOLON

    SEMICOLON       shift and go to state 214


state 209

    (5) decvarpp -> ID . COMMA decvarpp
    (6) decvarpp -> ID .

    COMMA           shift and go to state 215
    SEMICOLON       reduce using rule 6 (decvarpp -> ID .)


state 210

    (99) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA . EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp

    EPOCHS          shift and go to state 216


state 211

    (103) predictp -> INT RBRACKET RPAREN .

    SEMICOLON       reduce using rule 103 (predictp -> INT RBRACKET RPAREN .)
    FUNCTION        reduce using rule 103 (predictp -> INT RBRACKET RPAREN .)
    ID              reduce using rule 103 (predictp -> INT RBRACKET RPAREN .)
    READ            reduce using rule 103 (predictp -> INT RBRACKET RPAREN .)
    PRINT           reduce using rule 103 (predictp -> INT RBRACKET RPAREN .)
    IF              reduce using rule 103 (predictp -> INT RBRACKET RPAREN .)
    WHILE           reduce using rule 103 (predictp -> INT RBRACKET RPAREN .)
    FOR             reduce using rule 103 (predictp -> INT RBRACKET RPAREN .)
    MEAN            reduce using rule 103 (predictp -> INT RBRACKET RPAREN .)
    ELSE            reduce using rule 103 (predictp -> INT RBRACKET RPAREN .)
    VAR             reduce using rule 103 (predictp -> INT RBRACKET RPAREN .)
    RBRACE          reduce using rule 103 (predictp -> INT RBRACKET RPAREN .)
    RBRACKET        reduce using rule 103 (predictp -> INT RBRACKET RPAREN .)


state 212

    (104) predictp -> FLOAT RBRACKET RPAREN .

    SEMICOLON       reduce using rule 104 (predictp -> FLOAT RBRACKET RPAREN .)
    FUNCTION        reduce using rule 104 (predictp -> FLOAT RBRACKET RPAREN .)
    ID              reduce using rule 104 (predictp -> FLOAT RBRACKET RPAREN .)
    READ            reduce using rule 104 (predictp -> FLOAT RBRACKET RPAREN .)
    PRINT           reduce using rule 104 (predictp -> FLOAT RBRACKET RPAREN .)
    IF              reduce using rule 104 (predictp -> FLOAT RBRACKET RPAREN .)
    WHILE           reduce using rule 104 (predictp -> FLOAT RBRACKET RPAREN .)
    FOR             reduce using rule 104 (predictp -> FLOAT RBRACKET RPAREN .)
    MEAN            reduce using rule 104 (predictp -> FLOAT RBRACKET RPAREN .)
    ELSE            reduce using rule 104 (predictp -> FLOAT RBRACKET RPAREN .)
    VAR             reduce using rule 104 (predictp -> FLOAT RBRACKET RPAREN .)
    RBRACE          reduce using rule 104 (predictp -> FLOAT RBRACKET RPAREN .)
    RBRACKET        reduce using rule 104 (predictp -> FLOAT RBRACKET RPAREN .)


state 213

    (75) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements . forp
    (76) forp -> . RBRACKET
    (77) forp -> . statements forp
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (69) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (75) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (78) funcesp -> . array
    (79) funcesp -> . matrix
    (80) funcesp -> . mean
    (81) funcesp -> . layers
    (82) funcesp -> . sequential
    (83) funcesp -> . compile
    (84) funcesp -> . fit
    (85) funcesp -> . predict
    (86) funcesp -> . getweights
    (59) var -> . ID
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (90) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (93) mean -> . MEAN LPAREN array RPAREN
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (98) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (99) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (105) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACKET        shift and go to state 219
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    var                            shift and go to state 57
    statements                     shift and go to state 217
    forp                           shift and go to state 218
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 214

    (4) decvarp -> type decvarpp SEMICOLON .

    VAR             reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    FUNCTION        reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    ID              reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    READ            reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    PRINT           reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    IF              reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    WHILE           reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    FOR             reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    MEAN            reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    RBRACE          reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)


state 215

    (5) decvarpp -> ID COMMA . decvarpp
    (5) decvarpp -> . ID COMMA decvarpp
    (6) decvarpp -> . ID

    ID              shift and go to state 209

    decvarpp                       shift and go to state 220

state 216

    (99) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS . EQUAL INT COMMA VERBOSE EQUAL fitp

    EQUAL           shift and go to state 221


state 217

    (77) forp -> statements . forp
    (76) forp -> . RBRACKET
    (77) forp -> . statements forp
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (69) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (75) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (78) funcesp -> . array
    (79) funcesp -> . matrix
    (80) funcesp -> . mean
    (81) funcesp -> . layers
    (82) funcesp -> . sequential
    (83) funcesp -> . compile
    (84) funcesp -> . fit
    (85) funcesp -> . predict
    (86) funcesp -> . getweights
    (59) var -> . ID
    (87) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (90) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (93) mean -> . MEAN LPAREN array RPAREN
    (94) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (95) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (98) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (99) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (102) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (105) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACKET        shift and go to state 219
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 217
    forp                           shift and go to state 222
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 218

    (75) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .

    SEMICOLON       reduce using rule 75 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    FUNCTION        reduce using rule 75 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    ID              reduce using rule 75 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    READ            reduce using rule 75 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    PRINT           reduce using rule 75 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    IF              reduce using rule 75 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    WHILE           reduce using rule 75 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    FOR             reduce using rule 75 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    MEAN            reduce using rule 75 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    ELSE            reduce using rule 75 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    VAR             reduce using rule 75 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    RBRACE          reduce using rule 75 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    RBRACKET        reduce using rule 75 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)


state 219

    (76) forp -> RBRACKET .

    SEMICOLON       reduce using rule 76 (forp -> RBRACKET .)
    FUNCTION        reduce using rule 76 (forp -> RBRACKET .)
    ID              reduce using rule 76 (forp -> RBRACKET .)
    READ            reduce using rule 76 (forp -> RBRACKET .)
    PRINT           reduce using rule 76 (forp -> RBRACKET .)
    IF              reduce using rule 76 (forp -> RBRACKET .)
    WHILE           reduce using rule 76 (forp -> RBRACKET .)
    FOR             reduce using rule 76 (forp -> RBRACKET .)
    MEAN            reduce using rule 76 (forp -> RBRACKET .)
    ELSE            reduce using rule 76 (forp -> RBRACKET .)
    VAR             reduce using rule 76 (forp -> RBRACKET .)
    RBRACE          reduce using rule 76 (forp -> RBRACKET .)
    RBRACKET        reduce using rule 76 (forp -> RBRACKET .)


state 220

    (5) decvarpp -> ID COMMA decvarpp .

    SEMICOLON       reduce using rule 5 (decvarpp -> ID COMMA decvarpp .)


state 221

    (99) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL . INT COMMA VERBOSE EQUAL fitp

    INT             shift and go to state 223


state 222

    (77) forp -> statements forp .

    SEMICOLON       reduce using rule 77 (forp -> statements forp .)
    FUNCTION        reduce using rule 77 (forp -> statements forp .)
    ID              reduce using rule 77 (forp -> statements forp .)
    READ            reduce using rule 77 (forp -> statements forp .)
    PRINT           reduce using rule 77 (forp -> statements forp .)
    IF              reduce using rule 77 (forp -> statements forp .)
    WHILE           reduce using rule 77 (forp -> statements forp .)
    FOR             reduce using rule 77 (forp -> statements forp .)
    MEAN            reduce using rule 77 (forp -> statements forp .)
    ELSE            reduce using rule 77 (forp -> statements forp .)
    VAR             reduce using rule 77 (forp -> statements forp .)
    RBRACE          reduce using rule 77 (forp -> statements forp .)
    RBRACKET        reduce using rule 77 (forp -> statements forp .)


state 223

    (99) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT . COMMA VERBOSE EQUAL fitp

    COMMA           shift and go to state 224


state 224

    (99) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA . VERBOSE EQUAL fitp

    VERBOSE         shift and go to state 225


state 225

    (99) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE . EQUAL fitp

    EQUAL           shift and go to state 226


state 226

    (99) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL . fitp
    (100) fitp -> . TRUE RPAREN
    (101) fitp -> . FALSE RPAREN

    TRUE            shift and go to state 228
    FALSE           shift and go to state 229

    fitp                           shift and go to state 227

state 227

    (99) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .

    SEMICOLON       reduce using rule 99 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    FUNCTION        reduce using rule 99 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    ID              reduce using rule 99 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    READ            reduce using rule 99 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    PRINT           reduce using rule 99 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    IF              reduce using rule 99 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    WHILE           reduce using rule 99 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    FOR             reduce using rule 99 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    MEAN            reduce using rule 99 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    ELSE            reduce using rule 99 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    VAR             reduce using rule 99 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    RBRACE          reduce using rule 99 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    RBRACKET        reduce using rule 99 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)


state 228

    (100) fitp -> TRUE . RPAREN

    RPAREN          shift and go to state 230


state 229

    (101) fitp -> FALSE . RPAREN

    RPAREN          shift and go to state 231


state 230

    (100) fitp -> TRUE RPAREN .

    SEMICOLON       reduce using rule 100 (fitp -> TRUE RPAREN .)
    FUNCTION        reduce using rule 100 (fitp -> TRUE RPAREN .)
    ID              reduce using rule 100 (fitp -> TRUE RPAREN .)
    READ            reduce using rule 100 (fitp -> TRUE RPAREN .)
    PRINT           reduce using rule 100 (fitp -> TRUE RPAREN .)
    IF              reduce using rule 100 (fitp -> TRUE RPAREN .)
    WHILE           reduce using rule 100 (fitp -> TRUE RPAREN .)
    FOR             reduce using rule 100 (fitp -> TRUE RPAREN .)
    MEAN            reduce using rule 100 (fitp -> TRUE RPAREN .)
    ELSE            reduce using rule 100 (fitp -> TRUE RPAREN .)
    VAR             reduce using rule 100 (fitp -> TRUE RPAREN .)
    RBRACE          reduce using rule 100 (fitp -> TRUE RPAREN .)
    RBRACKET        reduce using rule 100 (fitp -> TRUE RPAREN .)


state 231

    (101) fitp -> FALSE RPAREN .

    SEMICOLON       reduce using rule 101 (fitp -> FALSE RPAREN .)
    FUNCTION        reduce using rule 101 (fitp -> FALSE RPAREN .)
    ID              reduce using rule 101 (fitp -> FALSE RPAREN .)
    READ            reduce using rule 101 (fitp -> FALSE RPAREN .)
    PRINT           reduce using rule 101 (fitp -> FALSE RPAREN .)
    IF              reduce using rule 101 (fitp -> FALSE RPAREN .)
    WHILE           reduce using rule 101 (fitp -> FALSE RPAREN .)
    FOR             reduce using rule 101 (fitp -> FALSE RPAREN .)
    MEAN            reduce using rule 101 (fitp -> FALSE RPAREN .)
    ELSE            reduce using rule 101 (fitp -> FALSE RPAREN .)
    VAR             reduce using rule 101 (fitp -> FALSE RPAREN .)
    RBRACE          reduce using rule 101 (fitp -> FALSE RPAREN .)
    RBRACKET        reduce using rule 101 (fitp -> FALSE RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 159 resolved as shift
