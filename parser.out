Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    CHAR
    COLON
    FUNCESP
    GTE
    LTE
    NUMPY
    QUOTE
    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON if
Rule 2     decvar -> VAR decvarp
Rule 3     decvar -> VAR decvarp decvar
Rule 4     decvarp -> type decvarpp SEMICOLON
Rule 5     decvarpp -> ID COMMA decvarpp
Rule 6     decvarpp -> ID
Rule 7     type -> INT
Rule 8     type -> FLOAT
Rule 9     function -> FUNCTION type ID LPAREN param RPAREN body
Rule 10    voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body
Rule 11    body -> LBRACE bodyp RBRACE
Rule 12    bodyp -> decvar statements bodyp
Rule 13    bodyp -> statements bodyp
Rule 14    bodyp -> decvar
Rule 15    bodyp -> <empty>
Rule 16    param -> <empty>
Rule 17    param -> type paramp
Rule 18    paramp -> ID
Rule 19    paramp -> ID COMMA param
Rule 20    exp -> texp
Rule 21    exp -> texp OR exp
Rule 22    texp -> gexp
Rule 23    texp -> gexp AND texp
Rule 24    gexp -> mexp
Rule 25    gexp -> mexp gexpp mexp
Rule 26    gexpp -> LT
Rule 27    gexpp -> GT
Rule 28    gexpp -> IFEQUAL
Rule 29    gexpp -> DIFF
Rule 30    mexp -> t
Rule 31    mexp -> t PLUS mexp
Rule 32    mexp -> t MINUS mexp
Rule 33    t -> f
Rule 34    t -> f MULT t
Rule 35    t -> f DIV t
Rule 36    f -> LPAREN exp RPAREN
Rule 37    f -> CTI
Rule 38    f -> CTF
Rule 39    f -> var
Rule 40    f -> call
Rule 41    statements -> assign
Rule 42    statements -> function
Rule 43    statements -> voidfunction
Rule 44    statements -> call
Rule 45    statements -> read
Rule 46    statements -> print
Rule 47    statements -> if
Rule 48    statements -> while
Rule 49    statements -> for
Rule 50    statements -> funcesp
Rule 51    assign -> var EQUAL exp
Rule 52    read -> READ var
Rule 53    print -> PRINT LPAREN printp
Rule 54    printp -> exp RPAREN
Rule 55    printp -> exp COMMA printp
Rule 56    var -> ID
Rule 57    call -> ID LPAREN callp RPAREN
Rule 58    callp -> exp SEMICOLON callp
Rule 59    callp -> exp
Rule 60    if -> IF LPAREN exp RPAREN quadsIf statement ifelse jumpsIf
Rule 61    ifelse -> <empty>
Rule 62    ifelse -> ELSE quadsElse statements
Rule 63    quadsIf -> <empty>
Rule 64    jumpsIf -> <empty>
Rule 65    quadsElse -> <empty>
Rule 66    while -> WHILE LPAREN exp RPAREN statements whilep
Rule 67    whilep -> SEMICOLON
Rule 68    whilep -> statements whilep
Rule 69    for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
Rule 70    forp -> RBRACKET
Rule 71    forp -> statements forp
Rule 72    funcesp -> array
Rule 73    funcesp -> matrix
Rule 74    funcesp -> mean
Rule 75    funcesp -> layers
Rule 76    funcesp -> sequential
Rule 77    funcesp -> compile
Rule 78    funcesp -> fit
Rule 79    funcesp -> predict
Rule 80    funcesp -> getweights
Rule 81    array -> ID EQUAL ARRAY LPAREN var arrayp
Rule 82    arrayp -> RPAREN
Rule 83    arrayp -> COMMA var RPAREN
Rule 84    matrix -> ID EQUAL MATRIX LPAREN array matrixp
Rule 85    matrixp -> RPAREN
Rule 86    matrixp -> COMMA array RPAREN
Rule 87    mean -> MEAN LPAREN array RPAREN
Rule 88    layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
Rule 89    sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
Rule 90    sequentialp -> RBRACKET RPAREN
Rule 91    sequentialp -> COMMA layers sequentialp
Rule 92    compile -> sequential DOT COMPILE LPAREN RPAREN
Rule 93    fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
Rule 94    fitp -> TRUE RPAREN
Rule 95    fitp -> FALSE RPAREN
Rule 96    predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
Rule 97    predictp -> INT RBRACKET RPAREN
Rule 98    predictp -> FLOAT RBRACKET RPAREN
Rule 99    getweights -> layers DOT GETWEIGHTS LPAREN RPAREN
Rule 100   empty -> <empty>

Terminals, with rules where they appear

AND                  : 23
ARRAY                : 81
ASSIGN               : 
CHAR                 : 
COLON                : 
COMMA                : 5 19 55 83 86 91 93 93 93
COMPILE              : 92
CTF                  : 38
CTI                  : 37
DIFF                 : 29
DIV                  : 35
DOT                  : 92 93 96 99
ELSE                 : 62
EPOCHS               : 93
EQUAL                : 51 81 84 88 88 89 93 93 93 96
FALSE                : 95
FIT                  : 93
FLOAT                : 8 98
FOR                  : 69
FUNCESP              : 
FUNCTION             : 9 10
GETWEIGHTS           : 99
GT                   : 27
GTE                  : 
ID                   : 1 5 6 9 10 18 19 56 57 81 84 88 89 93 96
IF                   : 60
IFEQUAL              : 28
INT                  : 7 88 93 97
LAYERS               : 88
LBRACE               : 11
LBRACKET             : 69 89 96
LPAREN               : 9 10 36 53 57 60 66 69 81 84 87 88 89 92 93 96 99
LT                   : 26
LTE                  : 
MATRIX               : 84
MEAN                 : 87
MINUS                : 32
MULT                 : 34
NUMPY                : 
OR                   : 21
PLUS                 : 31
PREDICT              : 96
PRINT                : 53
PROGRAM              : 1
QUOTE                : 
RBRACE               : 11
RBRACKET             : 70 90 97 98
READ                 : 52
RPAREN               : 9 10 36 54 57 60 66 69 82 83 85 86 87 88 90 92 94 95 97 98 99
SEMICOLON            : 1 4 58 67 69 69
SEQUENTIAL           : 89
STRING               : 
TRUE                 : 94
UNITS                : 88
VAR                  : 2 3
VERBOSE              : 93
VOID                 : 10
WHILE                : 66
error                : 

Nonterminals, with rules where they appear

array                : 72 84 86 87 93 93
arrayp               : 81
assign               : 41
body                 : 9 10
bodyp                : 11 12 13
call                 : 40 44
callp                : 57 58
compile              : 77
decvar               : 3 12 14
decvarp              : 2 3
decvarpp             : 4 5
empty                : 
exp                  : 21 36 51 54 55 58 59 60 66 69 69
f                    : 33 34 35
fit                  : 78
fitp                 : 93
for                  : 49
forp                 : 69 71
funcesp              : 50
function             : 42
getweights           : 80
gexp                 : 22 23
gexpp                : 25
if                   : 1 47
ifelse               : 60
jumpsIf              : 60
layers               : 75 89 91 99
matrix               : 73
matrixp              : 84
mean                 : 74
mexp                 : 24 25 25 31 32
param                : 9 10 19
paramp               : 17
predict              : 79
predictp             : 96
print                : 46
printp               : 53 55
program              : 0
quadsElse            : 62
quadsIf              : 60
read                 : 45
sequential           : 76 92 93 96
sequentialp          : 89 91
statement            : 60
statements           : 12 13 62 66 68 69 71
t                    : 30 31 32 34 35
texp                 : 20 21 23
type                 : 4 9 17
var                  : 39 51 52 69 81 83
voidfunction         : 43
while                : 48
whilep               : 66 68

