Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    CHAR
    COLON
    FUNCESP
    GTE
    LTE
    NUMPY
    QUOTE
    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON while
Rule 2     decvar -> VAR decvarp
Rule 3     decvar -> VAR decvarp decvar
Rule 4     decvarp -> type decvarpp SEMICOLON
Rule 5     decvarpp -> ID COMMA decvarpp
Rule 6     decvarpp -> ID
Rule 7     type -> INT
Rule 8     type -> FLOAT
Rule 9     function -> FUNCTION type ID LPAREN param RPAREN body
Rule 10    voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body
Rule 11    body -> LBRACE bodyp RBRACE
Rule 12    bodyp -> decvar statements bodyp
Rule 13    bodyp -> statements bodyp
Rule 14    bodyp -> decvar
Rule 15    bodyp -> <empty>
Rule 16    param -> <empty>
Rule 17    param -> type paramp
Rule 18    paramp -> ID
Rule 19    paramp -> ID COMMA param
Rule 20    exp -> texp
Rule 21    exp -> texp OR exp
Rule 22    texp -> gexp
Rule 23    texp -> gexp AND texp
Rule 24    gexp -> mexp
Rule 25    gexp -> mexp gexpp mexp
Rule 26    gexpp -> LT
Rule 27    gexpp -> GT
Rule 28    gexpp -> IFEQUAL
Rule 29    gexpp -> DIFF
Rule 30    mexp -> t
Rule 31    mexp -> t PLUS mexp
Rule 32    mexp -> t MINUS mexp
Rule 33    t -> f
Rule 34    t -> f MULT t
Rule 35    t -> f DIV t
Rule 36    f -> LPAREN exp RPAREN
Rule 37    f -> CTI
Rule 38    f -> CTF
Rule 39    f -> var
Rule 40    f -> call
Rule 41    statements -> assign
Rule 42    statements -> function
Rule 43    statements -> voidfunction
Rule 44    statements -> call
Rule 45    statements -> read
Rule 46    statements -> print
Rule 47    statements -> if
Rule 48    statements -> while
Rule 49    statements -> for
Rule 50    statements -> funcesp
Rule 51    assign -> var EQUAL exp
Rule 52    read -> READ var
Rule 53    print -> PRINT LPAREN printp
Rule 54    printp -> exp RPAREN
Rule 55    printp -> exp COMMA printp
Rule 56    var -> ID
Rule 57    call -> ID LPAREN callp RPAREN
Rule 58    callp -> exp SEMICOLON callp
Rule 59    callp -> exp
Rule 60    if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
Rule 61    ifelse -> <empty>
Rule 62    ifelse -> ELSE quadsElse statements
Rule 63    quadsIf -> <empty>
Rule 64    jumpsIf -> <empty>
Rule 65    quadsElse -> <empty>
Rule 66    while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
Rule 67    whilep -> SEMICOLON
Rule 68    whilep -> statements whilep
Rule 69    saveJumps -> <empty>
Rule 70    quadsWhile -> <empty>
Rule 71    jumpsWhile -> <empty>
Rule 72    for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
Rule 73    forp -> RBRACKET
Rule 74    forp -> statements forp
Rule 75    funcesp -> array
Rule 76    funcesp -> matrix
Rule 77    funcesp -> mean
Rule 78    funcesp -> layers
Rule 79    funcesp -> sequential
Rule 80    funcesp -> compile
Rule 81    funcesp -> fit
Rule 82    funcesp -> predict
Rule 83    funcesp -> getweights
Rule 84    array -> ID EQUAL ARRAY LPAREN var arrayp
Rule 85    arrayp -> RPAREN
Rule 86    arrayp -> COMMA var RPAREN
Rule 87    matrix -> ID EQUAL MATRIX LPAREN array matrixp
Rule 88    matrixp -> RPAREN
Rule 89    matrixp -> COMMA array RPAREN
Rule 90    mean -> MEAN LPAREN array RPAREN
Rule 91    layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
Rule 92    sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
Rule 93    sequentialp -> RBRACKET RPAREN
Rule 94    sequentialp -> COMMA layers sequentialp
Rule 95    compile -> sequential DOT COMPILE LPAREN RPAREN
Rule 96    fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
Rule 97    fitp -> TRUE RPAREN
Rule 98    fitp -> FALSE RPAREN
Rule 99    predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
Rule 100   predictp -> INT RBRACKET RPAREN
Rule 101   predictp -> FLOAT RBRACKET RPAREN
Rule 102   getweights -> layers DOT GETWEIGHTS LPAREN RPAREN
Rule 103   empty -> <empty>

Terminals, with rules where they appear

AND                  : 23
ARRAY                : 84
ASSIGN               : 
CHAR                 : 
COLON                : 
COMMA                : 5 19 55 86 89 94 96 96 96
COMPILE              : 95
CTF                  : 38
CTI                  : 37
DIFF                 : 29
DIV                  : 35
DOT                  : 95 96 99 102
ELSE                 : 62
EPOCHS               : 96
EQUAL                : 51 84 87 91 91 92 96 96 96 99
FALSE                : 98
FIT                  : 96
FLOAT                : 8 101
FOR                  : 72
FUNCESP              : 
FUNCTION             : 9 10
GETWEIGHTS           : 102
GT                   : 27
GTE                  : 
ID                   : 1 5 6 9 10 18 19 56 57 84 87 91 92 96 99
IF                   : 60
IFEQUAL              : 28
INT                  : 7 91 96 100
LAYERS               : 91
LBRACE               : 11
LBRACKET             : 72 92 99
LPAREN               : 9 10 36 53 57 60 66 72 84 87 90 91 92 95 96 99 102
LT                   : 26
LTE                  : 
MATRIX               : 87
MEAN                 : 90
MINUS                : 32
MULT                 : 34
NUMPY                : 
OR                   : 21
PLUS                 : 31
PREDICT              : 99
PRINT                : 53
PROGRAM              : 1
QUOTE                : 
RBRACE               : 11
RBRACKET             : 73 93 100 101
READ                 : 52
RPAREN               : 9 10 36 54 57 60 66 72 85 86 88 89 90 91 93 95 97 98 100 101 102
SEMICOLON            : 1 4 58 67 72 72
SEQUENTIAL           : 92
STRING               : 
TRUE                 : 97
UNITS                : 91
VAR                  : 2 3
VERBOSE              : 96
VOID                 : 10
WHILE                : 66
error                : 

Nonterminals, with rules where they appear

array                : 75 87 89 90 96 96
arrayp               : 84
assign               : 41
body                 : 9 10
bodyp                : 11 12 13
call                 : 40 44
callp                : 57 58
compile              : 80
decvar               : 3 12 14
decvarp              : 2 3
decvarpp             : 4 5
empty                : 
exp                  : 21 36 51 54 55 58 59 60 66 72 72
f                    : 33 34 35
fit                  : 81
fitp                 : 96
for                  : 49
forp                 : 72 74
funcesp              : 50
function             : 42
getweights           : 83
gexp                 : 22 23
gexpp                : 25
if                   : 47
ifelse               : 60
jumpsIf              : 60
jumpsWhile           : 66
layers               : 78 92 94 102
matrix               : 76
matrixp              : 87
mean                 : 77
mexp                 : 24 25 25 31 32
param                : 9 10 19
paramp               : 17
predict              : 82
predictp             : 99
print                : 46
printp               : 53 55
program              : 0
quadsElse            : 62
quadsIf              : 60
quadsWhile           : 66
read                 : 45
saveJumps            : 66
sequential           : 79 95 96 99
sequentialp          : 92 94
statements           : 12 13 60 62 66 68 72 74
t                    : 30 31 32 34 35
texp                 : 20 21 23
type                 : 4 9 17
var                  : 39 51 52 72 84 86
voidfunction         : 43
while                : 1 48
whilep               : 66 68

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON while

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON while

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON while

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . while
    (66) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep

    WHILE           shift and go to state 6

    while                          shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMICOLON while .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON while .)


state 6

    (66) while -> WHILE . LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep

    LPAREN          shift and go to state 7


state 7

    (66) while -> WHILE LPAREN . saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (69) saveJumps -> .

    LPAREN          reduce using rule 69 (saveJumps -> .)
    CTI             reduce using rule 69 (saveJumps -> .)
    CTF             reduce using rule 69 (saveJumps -> .)
    ID              reduce using rule 69 (saveJumps -> .)

    saveJumps                      shift and go to state 8

state 8

    (66) while -> WHILE LPAREN saveJumps . exp RPAREN quadsWhile statements jumpsWhile whilep
    (20) exp -> . texp
    (21) exp -> . texp OR exp
    (22) texp -> . gexp
    (23) texp -> . gexp AND texp
    (24) gexp -> . mexp
    (25) gexp -> . mexp gexpp mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 10
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 9

    (36) f -> LPAREN . exp RPAREN
    (20) exp -> . texp
    (21) exp -> . texp OR exp
    (22) texp -> . gexp
    (23) texp -> . gexp AND texp
    (24) gexp -> . mexp
    (25) gexp -> . mexp gexpp mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 21
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 10

    (66) while -> WHILE LPAREN saveJumps exp . RPAREN quadsWhile statements jumpsWhile whilep

    RPAREN          shift and go to state 22


state 11

    (20) exp -> texp .
    (21) exp -> texp . OR exp

    RPAREN          reduce using rule 20 (exp -> texp .)
    SEMICOLON       reduce using rule 20 (exp -> texp .)
    FUNCTION        reduce using rule 20 (exp -> texp .)
    ID              reduce using rule 20 (exp -> texp .)
    READ            reduce using rule 20 (exp -> texp .)
    PRINT           reduce using rule 20 (exp -> texp .)
    IF              reduce using rule 20 (exp -> texp .)
    WHILE           reduce using rule 20 (exp -> texp .)
    FOR             reduce using rule 20 (exp -> texp .)
    MEAN            reduce using rule 20 (exp -> texp .)
    ELSE            reduce using rule 20 (exp -> texp .)
    VAR             reduce using rule 20 (exp -> texp .)
    RBRACE          reduce using rule 20 (exp -> texp .)
    RBRACKET        reduce using rule 20 (exp -> texp .)
    COMMA           reduce using rule 20 (exp -> texp .)
    OR              shift and go to state 23


state 12

    (22) texp -> gexp .
    (23) texp -> gexp . AND texp

    OR              reduce using rule 22 (texp -> gexp .)
    RPAREN          reduce using rule 22 (texp -> gexp .)
    SEMICOLON       reduce using rule 22 (texp -> gexp .)
    FUNCTION        reduce using rule 22 (texp -> gexp .)
    ID              reduce using rule 22 (texp -> gexp .)
    READ            reduce using rule 22 (texp -> gexp .)
    PRINT           reduce using rule 22 (texp -> gexp .)
    IF              reduce using rule 22 (texp -> gexp .)
    WHILE           reduce using rule 22 (texp -> gexp .)
    FOR             reduce using rule 22 (texp -> gexp .)
    MEAN            reduce using rule 22 (texp -> gexp .)
    ELSE            reduce using rule 22 (texp -> gexp .)
    VAR             reduce using rule 22 (texp -> gexp .)
    RBRACE          reduce using rule 22 (texp -> gexp .)
    RBRACKET        reduce using rule 22 (texp -> gexp .)
    COMMA           reduce using rule 22 (texp -> gexp .)
    AND             shift and go to state 24


state 13

    (24) gexp -> mexp .
    (25) gexp -> mexp . gexpp mexp
    (26) gexpp -> . LT
    (27) gexpp -> . GT
    (28) gexpp -> . IFEQUAL
    (29) gexpp -> . DIFF

    AND             reduce using rule 24 (gexp -> mexp .)
    OR              reduce using rule 24 (gexp -> mexp .)
    RPAREN          reduce using rule 24 (gexp -> mexp .)
    SEMICOLON       reduce using rule 24 (gexp -> mexp .)
    FUNCTION        reduce using rule 24 (gexp -> mexp .)
    ID              reduce using rule 24 (gexp -> mexp .)
    READ            reduce using rule 24 (gexp -> mexp .)
    PRINT           reduce using rule 24 (gexp -> mexp .)
    IF              reduce using rule 24 (gexp -> mexp .)
    WHILE           reduce using rule 24 (gexp -> mexp .)
    FOR             reduce using rule 24 (gexp -> mexp .)
    MEAN            reduce using rule 24 (gexp -> mexp .)
    ELSE            reduce using rule 24 (gexp -> mexp .)
    VAR             reduce using rule 24 (gexp -> mexp .)
    RBRACE          reduce using rule 24 (gexp -> mexp .)
    RBRACKET        reduce using rule 24 (gexp -> mexp .)
    COMMA           reduce using rule 24 (gexp -> mexp .)
    LT              shift and go to state 26
    GT              shift and go to state 27
    IFEQUAL         shift and go to state 28
    DIFF            shift and go to state 29

    gexpp                          shift and go to state 25

state 14

    (30) mexp -> t .
    (31) mexp -> t . PLUS mexp
    (32) mexp -> t . MINUS mexp

    LT              reduce using rule 30 (mexp -> t .)
    GT              reduce using rule 30 (mexp -> t .)
    IFEQUAL         reduce using rule 30 (mexp -> t .)
    DIFF            reduce using rule 30 (mexp -> t .)
    AND             reduce using rule 30 (mexp -> t .)
    OR              reduce using rule 30 (mexp -> t .)
    RPAREN          reduce using rule 30 (mexp -> t .)
    SEMICOLON       reduce using rule 30 (mexp -> t .)
    FUNCTION        reduce using rule 30 (mexp -> t .)
    ID              reduce using rule 30 (mexp -> t .)
    READ            reduce using rule 30 (mexp -> t .)
    PRINT           reduce using rule 30 (mexp -> t .)
    IF              reduce using rule 30 (mexp -> t .)
    WHILE           reduce using rule 30 (mexp -> t .)
    FOR             reduce using rule 30 (mexp -> t .)
    MEAN            reduce using rule 30 (mexp -> t .)
    ELSE            reduce using rule 30 (mexp -> t .)
    VAR             reduce using rule 30 (mexp -> t .)
    RBRACE          reduce using rule 30 (mexp -> t .)
    RBRACKET        reduce using rule 30 (mexp -> t .)
    COMMA           reduce using rule 30 (mexp -> t .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31


state 15

    (33) t -> f .
    (34) t -> f . MULT t
    (35) t -> f . DIV t

    PLUS            reduce using rule 33 (t -> f .)
    MINUS           reduce using rule 33 (t -> f .)
    LT              reduce using rule 33 (t -> f .)
    GT              reduce using rule 33 (t -> f .)
    IFEQUAL         reduce using rule 33 (t -> f .)
    DIFF            reduce using rule 33 (t -> f .)
    AND             reduce using rule 33 (t -> f .)
    OR              reduce using rule 33 (t -> f .)
    RPAREN          reduce using rule 33 (t -> f .)
    SEMICOLON       reduce using rule 33 (t -> f .)
    FUNCTION        reduce using rule 33 (t -> f .)
    ID              reduce using rule 33 (t -> f .)
    READ            reduce using rule 33 (t -> f .)
    PRINT           reduce using rule 33 (t -> f .)
    IF              reduce using rule 33 (t -> f .)
    WHILE           reduce using rule 33 (t -> f .)
    FOR             reduce using rule 33 (t -> f .)
    MEAN            reduce using rule 33 (t -> f .)
    ELSE            reduce using rule 33 (t -> f .)
    VAR             reduce using rule 33 (t -> f .)
    RBRACE          reduce using rule 33 (t -> f .)
    RBRACKET        reduce using rule 33 (t -> f .)
    COMMA           reduce using rule 33 (t -> f .)
    MULT            shift and go to state 32
    DIV             shift and go to state 33


state 16

    (37) f -> CTI .

    MULT            reduce using rule 37 (f -> CTI .)
    DIV             reduce using rule 37 (f -> CTI .)
    PLUS            reduce using rule 37 (f -> CTI .)
    MINUS           reduce using rule 37 (f -> CTI .)
    LT              reduce using rule 37 (f -> CTI .)
    GT              reduce using rule 37 (f -> CTI .)
    IFEQUAL         reduce using rule 37 (f -> CTI .)
    DIFF            reduce using rule 37 (f -> CTI .)
    AND             reduce using rule 37 (f -> CTI .)
    OR              reduce using rule 37 (f -> CTI .)
    RPAREN          reduce using rule 37 (f -> CTI .)
    SEMICOLON       reduce using rule 37 (f -> CTI .)
    FUNCTION        reduce using rule 37 (f -> CTI .)
    ID              reduce using rule 37 (f -> CTI .)
    READ            reduce using rule 37 (f -> CTI .)
    PRINT           reduce using rule 37 (f -> CTI .)
    IF              reduce using rule 37 (f -> CTI .)
    WHILE           reduce using rule 37 (f -> CTI .)
    FOR             reduce using rule 37 (f -> CTI .)
    MEAN            reduce using rule 37 (f -> CTI .)
    ELSE            reduce using rule 37 (f -> CTI .)
    VAR             reduce using rule 37 (f -> CTI .)
    RBRACE          reduce using rule 37 (f -> CTI .)
    RBRACKET        reduce using rule 37 (f -> CTI .)
    COMMA           reduce using rule 37 (f -> CTI .)


state 17

    (38) f -> CTF .

    MULT            reduce using rule 38 (f -> CTF .)
    DIV             reduce using rule 38 (f -> CTF .)
    PLUS            reduce using rule 38 (f -> CTF .)
    MINUS           reduce using rule 38 (f -> CTF .)
    LT              reduce using rule 38 (f -> CTF .)
    GT              reduce using rule 38 (f -> CTF .)
    IFEQUAL         reduce using rule 38 (f -> CTF .)
    DIFF            reduce using rule 38 (f -> CTF .)
    AND             reduce using rule 38 (f -> CTF .)
    OR              reduce using rule 38 (f -> CTF .)
    RPAREN          reduce using rule 38 (f -> CTF .)
    SEMICOLON       reduce using rule 38 (f -> CTF .)
    FUNCTION        reduce using rule 38 (f -> CTF .)
    ID              reduce using rule 38 (f -> CTF .)
    READ            reduce using rule 38 (f -> CTF .)
    PRINT           reduce using rule 38 (f -> CTF .)
    IF              reduce using rule 38 (f -> CTF .)
    WHILE           reduce using rule 38 (f -> CTF .)
    FOR             reduce using rule 38 (f -> CTF .)
    MEAN            reduce using rule 38 (f -> CTF .)
    ELSE            reduce using rule 38 (f -> CTF .)
    VAR             reduce using rule 38 (f -> CTF .)
    RBRACE          reduce using rule 38 (f -> CTF .)
    RBRACKET        reduce using rule 38 (f -> CTF .)
    COMMA           reduce using rule 38 (f -> CTF .)


state 18

    (39) f -> var .

    MULT            reduce using rule 39 (f -> var .)
    DIV             reduce using rule 39 (f -> var .)
    PLUS            reduce using rule 39 (f -> var .)
    MINUS           reduce using rule 39 (f -> var .)
    LT              reduce using rule 39 (f -> var .)
    GT              reduce using rule 39 (f -> var .)
    IFEQUAL         reduce using rule 39 (f -> var .)
    DIFF            reduce using rule 39 (f -> var .)
    AND             reduce using rule 39 (f -> var .)
    OR              reduce using rule 39 (f -> var .)
    RPAREN          reduce using rule 39 (f -> var .)
    SEMICOLON       reduce using rule 39 (f -> var .)
    FUNCTION        reduce using rule 39 (f -> var .)
    ID              reduce using rule 39 (f -> var .)
    READ            reduce using rule 39 (f -> var .)
    PRINT           reduce using rule 39 (f -> var .)
    IF              reduce using rule 39 (f -> var .)
    WHILE           reduce using rule 39 (f -> var .)
    FOR             reduce using rule 39 (f -> var .)
    MEAN            reduce using rule 39 (f -> var .)
    ELSE            reduce using rule 39 (f -> var .)
    VAR             reduce using rule 39 (f -> var .)
    RBRACE          reduce using rule 39 (f -> var .)
    RBRACKET        reduce using rule 39 (f -> var .)
    COMMA           reduce using rule 39 (f -> var .)


state 19

    (40) f -> call .

    MULT            reduce using rule 40 (f -> call .)
    DIV             reduce using rule 40 (f -> call .)
    PLUS            reduce using rule 40 (f -> call .)
    MINUS           reduce using rule 40 (f -> call .)
    LT              reduce using rule 40 (f -> call .)
    GT              reduce using rule 40 (f -> call .)
    IFEQUAL         reduce using rule 40 (f -> call .)
    DIFF            reduce using rule 40 (f -> call .)
    AND             reduce using rule 40 (f -> call .)
    OR              reduce using rule 40 (f -> call .)
    RPAREN          reduce using rule 40 (f -> call .)
    SEMICOLON       reduce using rule 40 (f -> call .)
    FUNCTION        reduce using rule 40 (f -> call .)
    ID              reduce using rule 40 (f -> call .)
    READ            reduce using rule 40 (f -> call .)
    PRINT           reduce using rule 40 (f -> call .)
    IF              reduce using rule 40 (f -> call .)
    WHILE           reduce using rule 40 (f -> call .)
    FOR             reduce using rule 40 (f -> call .)
    MEAN            reduce using rule 40 (f -> call .)
    ELSE            reduce using rule 40 (f -> call .)
    VAR             reduce using rule 40 (f -> call .)
    RBRACE          reduce using rule 40 (f -> call .)
    RBRACKET        reduce using rule 40 (f -> call .)
    COMMA           reduce using rule 40 (f -> call .)


state 20

    (56) var -> ID .
    (57) call -> ID . LPAREN callp RPAREN

    MULT            reduce using rule 56 (var -> ID .)
    DIV             reduce using rule 56 (var -> ID .)
    PLUS            reduce using rule 56 (var -> ID .)
    MINUS           reduce using rule 56 (var -> ID .)
    LT              reduce using rule 56 (var -> ID .)
    GT              reduce using rule 56 (var -> ID .)
    IFEQUAL         reduce using rule 56 (var -> ID .)
    DIFF            reduce using rule 56 (var -> ID .)
    AND             reduce using rule 56 (var -> ID .)
    OR              reduce using rule 56 (var -> ID .)
    RPAREN          reduce using rule 56 (var -> ID .)
    SEMICOLON       reduce using rule 56 (var -> ID .)
    FUNCTION        reduce using rule 56 (var -> ID .)
    ID              reduce using rule 56 (var -> ID .)
    READ            reduce using rule 56 (var -> ID .)
    PRINT           reduce using rule 56 (var -> ID .)
    IF              reduce using rule 56 (var -> ID .)
    WHILE           reduce using rule 56 (var -> ID .)
    FOR             reduce using rule 56 (var -> ID .)
    MEAN            reduce using rule 56 (var -> ID .)
    ELSE            reduce using rule 56 (var -> ID .)
    VAR             reduce using rule 56 (var -> ID .)
    RBRACE          reduce using rule 56 (var -> ID .)
    RBRACKET        reduce using rule 56 (var -> ID .)
    COMMA           reduce using rule 56 (var -> ID .)
    LPAREN          shift and go to state 34


state 21

    (36) f -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 35


state 22

    (66) while -> WHILE LPAREN saveJumps exp RPAREN . quadsWhile statements jumpsWhile whilep
    (70) quadsWhile -> .

    FUNCTION        reduce using rule 70 (quadsWhile -> .)
    ID              reduce using rule 70 (quadsWhile -> .)
    READ            reduce using rule 70 (quadsWhile -> .)
    PRINT           reduce using rule 70 (quadsWhile -> .)
    IF              reduce using rule 70 (quadsWhile -> .)
    WHILE           reduce using rule 70 (quadsWhile -> .)
    FOR             reduce using rule 70 (quadsWhile -> .)
    MEAN            reduce using rule 70 (quadsWhile -> .)

    quadsWhile                     shift and go to state 36

state 23

    (21) exp -> texp OR . exp
    (20) exp -> . texp
    (21) exp -> . texp OR exp
    (22) texp -> . gexp
    (23) texp -> . gexp AND texp
    (24) gexp -> . mexp
    (25) gexp -> . mexp gexpp mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    texp                           shift and go to state 11
    exp                            shift and go to state 37
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 24

    (23) texp -> gexp AND . texp
    (22) texp -> . gexp
    (23) texp -> . gexp AND texp
    (24) gexp -> . mexp
    (25) gexp -> . mexp gexpp mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    gexp                           shift and go to state 12
    texp                           shift and go to state 38
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 25

    (25) gexp -> mexp gexpp . mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    mexp                           shift and go to state 39
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 26

    (26) gexpp -> LT .

    LPAREN          reduce using rule 26 (gexpp -> LT .)
    CTI             reduce using rule 26 (gexpp -> LT .)
    CTF             reduce using rule 26 (gexpp -> LT .)
    ID              reduce using rule 26 (gexpp -> LT .)


state 27

    (27) gexpp -> GT .

    LPAREN          reduce using rule 27 (gexpp -> GT .)
    CTI             reduce using rule 27 (gexpp -> GT .)
    CTF             reduce using rule 27 (gexpp -> GT .)
    ID              reduce using rule 27 (gexpp -> GT .)


state 28

    (28) gexpp -> IFEQUAL .

    LPAREN          reduce using rule 28 (gexpp -> IFEQUAL .)
    CTI             reduce using rule 28 (gexpp -> IFEQUAL .)
    CTF             reduce using rule 28 (gexpp -> IFEQUAL .)
    ID              reduce using rule 28 (gexpp -> IFEQUAL .)


state 29

    (29) gexpp -> DIFF .

    LPAREN          reduce using rule 29 (gexpp -> DIFF .)
    CTI             reduce using rule 29 (gexpp -> DIFF .)
    CTF             reduce using rule 29 (gexpp -> DIFF .)
    ID              reduce using rule 29 (gexpp -> DIFF .)


state 30

    (31) mexp -> t PLUS . mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    t                              shift and go to state 14
    mexp                           shift and go to state 40
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 31

    (32) mexp -> t MINUS . mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    t                              shift and go to state 14
    mexp                           shift and go to state 41
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 32

    (34) t -> f MULT . t
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    f                              shift and go to state 15
    t                              shift and go to state 42
    var                            shift and go to state 18
    call                           shift and go to state 19

state 33

    (35) t -> f DIV . t
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    f                              shift and go to state 15
    t                              shift and go to state 43
    var                            shift and go to state 18
    call                           shift and go to state 19

state 34

    (57) call -> ID LPAREN . callp RPAREN
    (58) callp -> . exp SEMICOLON callp
    (59) callp -> . exp
    (20) exp -> . texp
    (21) exp -> . texp OR exp
    (22) texp -> . gexp
    (23) texp -> . gexp AND texp
    (24) gexp -> . mexp
    (25) gexp -> . mexp gexpp mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    callp                          shift and go to state 44
    exp                            shift and go to state 45
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 35

    (36) f -> LPAREN exp RPAREN .

    MULT            reduce using rule 36 (f -> LPAREN exp RPAREN .)
    DIV             reduce using rule 36 (f -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 36 (f -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 36 (f -> LPAREN exp RPAREN .)
    LT              reduce using rule 36 (f -> LPAREN exp RPAREN .)
    GT              reduce using rule 36 (f -> LPAREN exp RPAREN .)
    IFEQUAL         reduce using rule 36 (f -> LPAREN exp RPAREN .)
    DIFF            reduce using rule 36 (f -> LPAREN exp RPAREN .)
    AND             reduce using rule 36 (f -> LPAREN exp RPAREN .)
    OR              reduce using rule 36 (f -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 36 (f -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 36 (f -> LPAREN exp RPAREN .)
    FUNCTION        reduce using rule 36 (f -> LPAREN exp RPAREN .)
    ID              reduce using rule 36 (f -> LPAREN exp RPAREN .)
    READ            reduce using rule 36 (f -> LPAREN exp RPAREN .)
    PRINT           reduce using rule 36 (f -> LPAREN exp RPAREN .)
    IF              reduce using rule 36 (f -> LPAREN exp RPAREN .)
    WHILE           reduce using rule 36 (f -> LPAREN exp RPAREN .)
    FOR             reduce using rule 36 (f -> LPAREN exp RPAREN .)
    MEAN            reduce using rule 36 (f -> LPAREN exp RPAREN .)
    ELSE            reduce using rule 36 (f -> LPAREN exp RPAREN .)
    VAR             reduce using rule 36 (f -> LPAREN exp RPAREN .)
    RBRACE          reduce using rule 36 (f -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 36 (f -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 36 (f -> LPAREN exp RPAREN .)


state 36

    (66) while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile . statements jumpsWhile whilep
    (41) statements -> . assign
    (42) statements -> . function
    (43) statements -> . voidfunction
    (44) statements -> . call
    (45) statements -> . read
    (46) statements -> . print
    (47) statements -> . if
    (48) statements -> . while
    (49) statements -> . for
    (50) statements -> . funcesp
    (51) assign -> . var EQUAL exp
    (9) function -> . FUNCTION type ID LPAREN param RPAREN body
    (10) voidfunction -> . FUNCTION VOID ID LPAREN param RPAREN body
    (57) call -> . ID LPAREN callp RPAREN
    (52) read -> . READ var
    (53) print -> . PRINT LPAREN printp
    (60) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (66) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (56) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 46
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 37

    (21) exp -> texp OR exp .

    RPAREN          reduce using rule 21 (exp -> texp OR exp .)
    SEMICOLON       reduce using rule 21 (exp -> texp OR exp .)
    FUNCTION        reduce using rule 21 (exp -> texp OR exp .)
    ID              reduce using rule 21 (exp -> texp OR exp .)
    READ            reduce using rule 21 (exp -> texp OR exp .)
    PRINT           reduce using rule 21 (exp -> texp OR exp .)
    IF              reduce using rule 21 (exp -> texp OR exp .)
    WHILE           reduce using rule 21 (exp -> texp OR exp .)
    FOR             reduce using rule 21 (exp -> texp OR exp .)
    MEAN            reduce using rule 21 (exp -> texp OR exp .)
    ELSE            reduce using rule 21 (exp -> texp OR exp .)
    VAR             reduce using rule 21 (exp -> texp OR exp .)
    RBRACE          reduce using rule 21 (exp -> texp OR exp .)
    RBRACKET        reduce using rule 21 (exp -> texp OR exp .)
    COMMA           reduce using rule 21 (exp -> texp OR exp .)


state 38

    (23) texp -> gexp AND texp .

    OR              reduce using rule 23 (texp -> gexp AND texp .)
    RPAREN          reduce using rule 23 (texp -> gexp AND texp .)
    SEMICOLON       reduce using rule 23 (texp -> gexp AND texp .)
    FUNCTION        reduce using rule 23 (texp -> gexp AND texp .)
    ID              reduce using rule 23 (texp -> gexp AND texp .)
    READ            reduce using rule 23 (texp -> gexp AND texp .)
    PRINT           reduce using rule 23 (texp -> gexp AND texp .)
    IF              reduce using rule 23 (texp -> gexp AND texp .)
    WHILE           reduce using rule 23 (texp -> gexp AND texp .)
    FOR             reduce using rule 23 (texp -> gexp AND texp .)
    MEAN            reduce using rule 23 (texp -> gexp AND texp .)
    ELSE            reduce using rule 23 (texp -> gexp AND texp .)
    VAR             reduce using rule 23 (texp -> gexp AND texp .)
    RBRACE          reduce using rule 23 (texp -> gexp AND texp .)
    RBRACKET        reduce using rule 23 (texp -> gexp AND texp .)
    COMMA           reduce using rule 23 (texp -> gexp AND texp .)


state 39

    (25) gexp -> mexp gexpp mexp .

    AND             reduce using rule 25 (gexp -> mexp gexpp mexp .)
    OR              reduce using rule 25 (gexp -> mexp gexpp mexp .)
    RPAREN          reduce using rule 25 (gexp -> mexp gexpp mexp .)
    SEMICOLON       reduce using rule 25 (gexp -> mexp gexpp mexp .)
    FUNCTION        reduce using rule 25 (gexp -> mexp gexpp mexp .)
    ID              reduce using rule 25 (gexp -> mexp gexpp mexp .)
    READ            reduce using rule 25 (gexp -> mexp gexpp mexp .)
    PRINT           reduce using rule 25 (gexp -> mexp gexpp mexp .)
    IF              reduce using rule 25 (gexp -> mexp gexpp mexp .)
    WHILE           reduce using rule 25 (gexp -> mexp gexpp mexp .)
    FOR             reduce using rule 25 (gexp -> mexp gexpp mexp .)
    MEAN            reduce using rule 25 (gexp -> mexp gexpp mexp .)
    ELSE            reduce using rule 25 (gexp -> mexp gexpp mexp .)
    VAR             reduce using rule 25 (gexp -> mexp gexpp mexp .)
    RBRACE          reduce using rule 25 (gexp -> mexp gexpp mexp .)
    RBRACKET        reduce using rule 25 (gexp -> mexp gexpp mexp .)
    COMMA           reduce using rule 25 (gexp -> mexp gexpp mexp .)


state 40

    (31) mexp -> t PLUS mexp .

    LT              reduce using rule 31 (mexp -> t PLUS mexp .)
    GT              reduce using rule 31 (mexp -> t PLUS mexp .)
    IFEQUAL         reduce using rule 31 (mexp -> t PLUS mexp .)
    DIFF            reduce using rule 31 (mexp -> t PLUS mexp .)
    AND             reduce using rule 31 (mexp -> t PLUS mexp .)
    OR              reduce using rule 31 (mexp -> t PLUS mexp .)
    RPAREN          reduce using rule 31 (mexp -> t PLUS mexp .)
    SEMICOLON       reduce using rule 31 (mexp -> t PLUS mexp .)
    FUNCTION        reduce using rule 31 (mexp -> t PLUS mexp .)
    ID              reduce using rule 31 (mexp -> t PLUS mexp .)
    READ            reduce using rule 31 (mexp -> t PLUS mexp .)
    PRINT           reduce using rule 31 (mexp -> t PLUS mexp .)
    IF              reduce using rule 31 (mexp -> t PLUS mexp .)
    WHILE           reduce using rule 31 (mexp -> t PLUS mexp .)
    FOR             reduce using rule 31 (mexp -> t PLUS mexp .)
    MEAN            reduce using rule 31 (mexp -> t PLUS mexp .)
    ELSE            reduce using rule 31 (mexp -> t PLUS mexp .)
    VAR             reduce using rule 31 (mexp -> t PLUS mexp .)
    RBRACE          reduce using rule 31 (mexp -> t PLUS mexp .)
    RBRACKET        reduce using rule 31 (mexp -> t PLUS mexp .)
    COMMA           reduce using rule 31 (mexp -> t PLUS mexp .)


state 41

    (32) mexp -> t MINUS mexp .

    LT              reduce using rule 32 (mexp -> t MINUS mexp .)
    GT              reduce using rule 32 (mexp -> t MINUS mexp .)
    IFEQUAL         reduce using rule 32 (mexp -> t MINUS mexp .)
    DIFF            reduce using rule 32 (mexp -> t MINUS mexp .)
    AND             reduce using rule 32 (mexp -> t MINUS mexp .)
    OR              reduce using rule 32 (mexp -> t MINUS mexp .)
    RPAREN          reduce using rule 32 (mexp -> t MINUS mexp .)
    SEMICOLON       reduce using rule 32 (mexp -> t MINUS mexp .)
    FUNCTION        reduce using rule 32 (mexp -> t MINUS mexp .)
    ID              reduce using rule 32 (mexp -> t MINUS mexp .)
    READ            reduce using rule 32 (mexp -> t MINUS mexp .)
    PRINT           reduce using rule 32 (mexp -> t MINUS mexp .)
    IF              reduce using rule 32 (mexp -> t MINUS mexp .)
    WHILE           reduce using rule 32 (mexp -> t MINUS mexp .)
    FOR             reduce using rule 32 (mexp -> t MINUS mexp .)
    MEAN            reduce using rule 32 (mexp -> t MINUS mexp .)
    ELSE            reduce using rule 32 (mexp -> t MINUS mexp .)
    VAR             reduce using rule 32 (mexp -> t MINUS mexp .)
    RBRACE          reduce using rule 32 (mexp -> t MINUS mexp .)
    RBRACKET        reduce using rule 32 (mexp -> t MINUS mexp .)
    COMMA           reduce using rule 32 (mexp -> t MINUS mexp .)


state 42

    (34) t -> f MULT t .

    PLUS            reduce using rule 34 (t -> f MULT t .)
    MINUS           reduce using rule 34 (t -> f MULT t .)
    LT              reduce using rule 34 (t -> f MULT t .)
    GT              reduce using rule 34 (t -> f MULT t .)
    IFEQUAL         reduce using rule 34 (t -> f MULT t .)
    DIFF            reduce using rule 34 (t -> f MULT t .)
    AND             reduce using rule 34 (t -> f MULT t .)
    OR              reduce using rule 34 (t -> f MULT t .)
    RPAREN          reduce using rule 34 (t -> f MULT t .)
    SEMICOLON       reduce using rule 34 (t -> f MULT t .)
    FUNCTION        reduce using rule 34 (t -> f MULT t .)
    ID              reduce using rule 34 (t -> f MULT t .)
    READ            reduce using rule 34 (t -> f MULT t .)
    PRINT           reduce using rule 34 (t -> f MULT t .)
    IF              reduce using rule 34 (t -> f MULT t .)
    WHILE           reduce using rule 34 (t -> f MULT t .)
    FOR             reduce using rule 34 (t -> f MULT t .)
    MEAN            reduce using rule 34 (t -> f MULT t .)
    ELSE            reduce using rule 34 (t -> f MULT t .)
    VAR             reduce using rule 34 (t -> f MULT t .)
    RBRACE          reduce using rule 34 (t -> f MULT t .)
    RBRACKET        reduce using rule 34 (t -> f MULT t .)
    COMMA           reduce using rule 34 (t -> f MULT t .)


state 43

    (35) t -> f DIV t .

    PLUS            reduce using rule 35 (t -> f DIV t .)
    MINUS           reduce using rule 35 (t -> f DIV t .)
    LT              reduce using rule 35 (t -> f DIV t .)
    GT              reduce using rule 35 (t -> f DIV t .)
    IFEQUAL         reduce using rule 35 (t -> f DIV t .)
    DIFF            reduce using rule 35 (t -> f DIV t .)
    AND             reduce using rule 35 (t -> f DIV t .)
    OR              reduce using rule 35 (t -> f DIV t .)
    RPAREN          reduce using rule 35 (t -> f DIV t .)
    SEMICOLON       reduce using rule 35 (t -> f DIV t .)
    FUNCTION        reduce using rule 35 (t -> f DIV t .)
    ID              reduce using rule 35 (t -> f DIV t .)
    READ            reduce using rule 35 (t -> f DIV t .)
    PRINT           reduce using rule 35 (t -> f DIV t .)
    IF              reduce using rule 35 (t -> f DIV t .)
    WHILE           reduce using rule 35 (t -> f DIV t .)
    FOR             reduce using rule 35 (t -> f DIV t .)
    MEAN            reduce using rule 35 (t -> f DIV t .)
    ELSE            reduce using rule 35 (t -> f DIV t .)
    VAR             reduce using rule 35 (t -> f DIV t .)
    RBRACE          reduce using rule 35 (t -> f DIV t .)
    RBRACKET        reduce using rule 35 (t -> f DIV t .)
    COMMA           reduce using rule 35 (t -> f DIV t .)


state 44

    (57) call -> ID LPAREN callp . RPAREN

    RPAREN          shift and go to state 74


state 45

    (58) callp -> exp . SEMICOLON callp
    (59) callp -> exp .

    SEMICOLON       shift and go to state 75
    RPAREN          reduce using rule 59 (callp -> exp .)


state 46

    (66) while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements . jumpsWhile whilep
    (71) jumpsWhile -> .

    SEMICOLON       reduce using rule 71 (jumpsWhile -> .)
    FUNCTION        reduce using rule 71 (jumpsWhile -> .)
    ID              reduce using rule 71 (jumpsWhile -> .)
    READ            reduce using rule 71 (jumpsWhile -> .)
    PRINT           reduce using rule 71 (jumpsWhile -> .)
    IF              reduce using rule 71 (jumpsWhile -> .)
    WHILE           reduce using rule 71 (jumpsWhile -> .)
    FOR             reduce using rule 71 (jumpsWhile -> .)
    MEAN            reduce using rule 71 (jumpsWhile -> .)

    jumpsWhile                     shift and go to state 76

state 47

    (41) statements -> assign .

    SEMICOLON       reduce using rule 41 (statements -> assign .)
    FUNCTION        reduce using rule 41 (statements -> assign .)
    ID              reduce using rule 41 (statements -> assign .)
    READ            reduce using rule 41 (statements -> assign .)
    PRINT           reduce using rule 41 (statements -> assign .)
    IF              reduce using rule 41 (statements -> assign .)
    WHILE           reduce using rule 41 (statements -> assign .)
    FOR             reduce using rule 41 (statements -> assign .)
    MEAN            reduce using rule 41 (statements -> assign .)
    ELSE            reduce using rule 41 (statements -> assign .)
    VAR             reduce using rule 41 (statements -> assign .)
    RBRACE          reduce using rule 41 (statements -> assign .)
    RBRACKET        reduce using rule 41 (statements -> assign .)


state 48

    (42) statements -> function .

    SEMICOLON       reduce using rule 42 (statements -> function .)
    FUNCTION        reduce using rule 42 (statements -> function .)
    ID              reduce using rule 42 (statements -> function .)
    READ            reduce using rule 42 (statements -> function .)
    PRINT           reduce using rule 42 (statements -> function .)
    IF              reduce using rule 42 (statements -> function .)
    WHILE           reduce using rule 42 (statements -> function .)
    FOR             reduce using rule 42 (statements -> function .)
    MEAN            reduce using rule 42 (statements -> function .)
    ELSE            reduce using rule 42 (statements -> function .)
    VAR             reduce using rule 42 (statements -> function .)
    RBRACE          reduce using rule 42 (statements -> function .)
    RBRACKET        reduce using rule 42 (statements -> function .)


state 49

    (43) statements -> voidfunction .

    SEMICOLON       reduce using rule 43 (statements -> voidfunction .)
    FUNCTION        reduce using rule 43 (statements -> voidfunction .)
    ID              reduce using rule 43 (statements -> voidfunction .)
    READ            reduce using rule 43 (statements -> voidfunction .)
    PRINT           reduce using rule 43 (statements -> voidfunction .)
    IF              reduce using rule 43 (statements -> voidfunction .)
    WHILE           reduce using rule 43 (statements -> voidfunction .)
    FOR             reduce using rule 43 (statements -> voidfunction .)
    MEAN            reduce using rule 43 (statements -> voidfunction .)
    ELSE            reduce using rule 43 (statements -> voidfunction .)
    VAR             reduce using rule 43 (statements -> voidfunction .)
    RBRACE          reduce using rule 43 (statements -> voidfunction .)
    RBRACKET        reduce using rule 43 (statements -> voidfunction .)


state 50

    (44) statements -> call .

    SEMICOLON       reduce using rule 44 (statements -> call .)
    FUNCTION        reduce using rule 44 (statements -> call .)
    ID              reduce using rule 44 (statements -> call .)
    READ            reduce using rule 44 (statements -> call .)
    PRINT           reduce using rule 44 (statements -> call .)
    IF              reduce using rule 44 (statements -> call .)
    WHILE           reduce using rule 44 (statements -> call .)
    FOR             reduce using rule 44 (statements -> call .)
    MEAN            reduce using rule 44 (statements -> call .)
    ELSE            reduce using rule 44 (statements -> call .)
    VAR             reduce using rule 44 (statements -> call .)
    RBRACE          reduce using rule 44 (statements -> call .)
    RBRACKET        reduce using rule 44 (statements -> call .)


state 51

    (45) statements -> read .

    SEMICOLON       reduce using rule 45 (statements -> read .)
    FUNCTION        reduce using rule 45 (statements -> read .)
    ID              reduce using rule 45 (statements -> read .)
    READ            reduce using rule 45 (statements -> read .)
    PRINT           reduce using rule 45 (statements -> read .)
    IF              reduce using rule 45 (statements -> read .)
    WHILE           reduce using rule 45 (statements -> read .)
    FOR             reduce using rule 45 (statements -> read .)
    MEAN            reduce using rule 45 (statements -> read .)
    ELSE            reduce using rule 45 (statements -> read .)
    VAR             reduce using rule 45 (statements -> read .)
    RBRACE          reduce using rule 45 (statements -> read .)
    RBRACKET        reduce using rule 45 (statements -> read .)


state 52

    (46) statements -> print .

    SEMICOLON       reduce using rule 46 (statements -> print .)
    FUNCTION        reduce using rule 46 (statements -> print .)
    ID              reduce using rule 46 (statements -> print .)
    READ            reduce using rule 46 (statements -> print .)
    PRINT           reduce using rule 46 (statements -> print .)
    IF              reduce using rule 46 (statements -> print .)
    WHILE           reduce using rule 46 (statements -> print .)
    FOR             reduce using rule 46 (statements -> print .)
    MEAN            reduce using rule 46 (statements -> print .)
    ELSE            reduce using rule 46 (statements -> print .)
    VAR             reduce using rule 46 (statements -> print .)
    RBRACE          reduce using rule 46 (statements -> print .)
    RBRACKET        reduce using rule 46 (statements -> print .)


state 53

    (47) statements -> if .

    SEMICOLON       reduce using rule 47 (statements -> if .)
    FUNCTION        reduce using rule 47 (statements -> if .)
    ID              reduce using rule 47 (statements -> if .)
    READ            reduce using rule 47 (statements -> if .)
    PRINT           reduce using rule 47 (statements -> if .)
    IF              reduce using rule 47 (statements -> if .)
    WHILE           reduce using rule 47 (statements -> if .)
    FOR             reduce using rule 47 (statements -> if .)
    MEAN            reduce using rule 47 (statements -> if .)
    ELSE            reduce using rule 47 (statements -> if .)
    VAR             reduce using rule 47 (statements -> if .)
    RBRACE          reduce using rule 47 (statements -> if .)
    RBRACKET        reduce using rule 47 (statements -> if .)


state 54

    (48) statements -> while .

    SEMICOLON       reduce using rule 48 (statements -> while .)
    FUNCTION        reduce using rule 48 (statements -> while .)
    ID              reduce using rule 48 (statements -> while .)
    READ            reduce using rule 48 (statements -> while .)
    PRINT           reduce using rule 48 (statements -> while .)
    IF              reduce using rule 48 (statements -> while .)
    WHILE           reduce using rule 48 (statements -> while .)
    FOR             reduce using rule 48 (statements -> while .)
    MEAN            reduce using rule 48 (statements -> while .)
    ELSE            reduce using rule 48 (statements -> while .)
    VAR             reduce using rule 48 (statements -> while .)
    RBRACE          reduce using rule 48 (statements -> while .)
    RBRACKET        reduce using rule 48 (statements -> while .)


state 55

    (49) statements -> for .

    SEMICOLON       reduce using rule 49 (statements -> for .)
    FUNCTION        reduce using rule 49 (statements -> for .)
    ID              reduce using rule 49 (statements -> for .)
    READ            reduce using rule 49 (statements -> for .)
    PRINT           reduce using rule 49 (statements -> for .)
    IF              reduce using rule 49 (statements -> for .)
    WHILE           reduce using rule 49 (statements -> for .)
    FOR             reduce using rule 49 (statements -> for .)
    MEAN            reduce using rule 49 (statements -> for .)
    ELSE            reduce using rule 49 (statements -> for .)
    VAR             reduce using rule 49 (statements -> for .)
    RBRACE          reduce using rule 49 (statements -> for .)
    RBRACKET        reduce using rule 49 (statements -> for .)


state 56

    (50) statements -> funcesp .

    SEMICOLON       reduce using rule 50 (statements -> funcesp .)
    FUNCTION        reduce using rule 50 (statements -> funcesp .)
    ID              reduce using rule 50 (statements -> funcesp .)
    READ            reduce using rule 50 (statements -> funcesp .)
    PRINT           reduce using rule 50 (statements -> funcesp .)
    IF              reduce using rule 50 (statements -> funcesp .)
    WHILE           reduce using rule 50 (statements -> funcesp .)
    FOR             reduce using rule 50 (statements -> funcesp .)
    MEAN            reduce using rule 50 (statements -> funcesp .)
    ELSE            reduce using rule 50 (statements -> funcesp .)
    VAR             reduce using rule 50 (statements -> funcesp .)
    RBRACE          reduce using rule 50 (statements -> funcesp .)
    RBRACKET        reduce using rule 50 (statements -> funcesp .)


state 57

    (51) assign -> var . EQUAL exp

    EQUAL           shift and go to state 77


state 58

    (9) function -> FUNCTION . type ID LPAREN param RPAREN body
    (10) voidfunction -> FUNCTION . VOID ID LPAREN param RPAREN body
    (7) type -> . INT
    (8) type -> . FLOAT

    VOID            shift and go to state 79
    INT             shift and go to state 80
    FLOAT           shift and go to state 81

    type                           shift and go to state 78

state 59

    (57) call -> ID . LPAREN callp RPAREN
    (56) var -> ID .
    (84) array -> ID . EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> ID . EQUAL MATRIX LPAREN array matrixp
    (91) layers -> ID . EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> ID . EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (96) fit -> ID . EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> ID . EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp

  ! shift/reduce conflict for EQUAL resolved as shift
    LPAREN          shift and go to state 34
    EQUAL           shift and go to state 82

  ! EQUAL           [ reduce using rule 56 (var -> ID .) ]


state 60

    (52) read -> READ . var
    (56) var -> . ID

    ID              shift and go to state 84

    var                            shift and go to state 83

state 61

    (53) print -> PRINT . LPAREN printp

    LPAREN          shift and go to state 85


state 62

    (60) if -> IF . LPAREN exp RPAREN quadsIf statements ifelse jumpsIf

    LPAREN          shift and go to state 86


state 63

    (72) for -> FOR . LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp

    LPAREN          shift and go to state 87


state 64

    (75) funcesp -> array .

    SEMICOLON       reduce using rule 75 (funcesp -> array .)
    FUNCTION        reduce using rule 75 (funcesp -> array .)
    ID              reduce using rule 75 (funcesp -> array .)
    READ            reduce using rule 75 (funcesp -> array .)
    PRINT           reduce using rule 75 (funcesp -> array .)
    IF              reduce using rule 75 (funcesp -> array .)
    WHILE           reduce using rule 75 (funcesp -> array .)
    FOR             reduce using rule 75 (funcesp -> array .)
    MEAN            reduce using rule 75 (funcesp -> array .)
    ELSE            reduce using rule 75 (funcesp -> array .)
    VAR             reduce using rule 75 (funcesp -> array .)
    RBRACE          reduce using rule 75 (funcesp -> array .)
    RBRACKET        reduce using rule 75 (funcesp -> array .)


state 65

    (76) funcesp -> matrix .

    SEMICOLON       reduce using rule 76 (funcesp -> matrix .)
    FUNCTION        reduce using rule 76 (funcesp -> matrix .)
    ID              reduce using rule 76 (funcesp -> matrix .)
    READ            reduce using rule 76 (funcesp -> matrix .)
    PRINT           reduce using rule 76 (funcesp -> matrix .)
    IF              reduce using rule 76 (funcesp -> matrix .)
    WHILE           reduce using rule 76 (funcesp -> matrix .)
    FOR             reduce using rule 76 (funcesp -> matrix .)
    MEAN            reduce using rule 76 (funcesp -> matrix .)
    ELSE            reduce using rule 76 (funcesp -> matrix .)
    VAR             reduce using rule 76 (funcesp -> matrix .)
    RBRACE          reduce using rule 76 (funcesp -> matrix .)
    RBRACKET        reduce using rule 76 (funcesp -> matrix .)


state 66

    (77) funcesp -> mean .

    SEMICOLON       reduce using rule 77 (funcesp -> mean .)
    FUNCTION        reduce using rule 77 (funcesp -> mean .)
    ID              reduce using rule 77 (funcesp -> mean .)
    READ            reduce using rule 77 (funcesp -> mean .)
    PRINT           reduce using rule 77 (funcesp -> mean .)
    IF              reduce using rule 77 (funcesp -> mean .)
    WHILE           reduce using rule 77 (funcesp -> mean .)
    FOR             reduce using rule 77 (funcesp -> mean .)
    MEAN            reduce using rule 77 (funcesp -> mean .)
    ELSE            reduce using rule 77 (funcesp -> mean .)
    VAR             reduce using rule 77 (funcesp -> mean .)
    RBRACE          reduce using rule 77 (funcesp -> mean .)
    RBRACKET        reduce using rule 77 (funcesp -> mean .)


state 67

    (78) funcesp -> layers .
    (102) getweights -> layers . DOT GETWEIGHTS LPAREN RPAREN

    SEMICOLON       reduce using rule 78 (funcesp -> layers .)
    FUNCTION        reduce using rule 78 (funcesp -> layers .)
    ID              reduce using rule 78 (funcesp -> layers .)
    READ            reduce using rule 78 (funcesp -> layers .)
    PRINT           reduce using rule 78 (funcesp -> layers .)
    IF              reduce using rule 78 (funcesp -> layers .)
    WHILE           reduce using rule 78 (funcesp -> layers .)
    FOR             reduce using rule 78 (funcesp -> layers .)
    MEAN            reduce using rule 78 (funcesp -> layers .)
    ELSE            reduce using rule 78 (funcesp -> layers .)
    VAR             reduce using rule 78 (funcesp -> layers .)
    RBRACE          reduce using rule 78 (funcesp -> layers .)
    RBRACKET        reduce using rule 78 (funcesp -> layers .)
    DOT             shift and go to state 88


state 68

    (79) funcesp -> sequential .
    (95) compile -> sequential . DOT COMPILE LPAREN RPAREN

    SEMICOLON       reduce using rule 79 (funcesp -> sequential .)
    FUNCTION        reduce using rule 79 (funcesp -> sequential .)
    ID              reduce using rule 79 (funcesp -> sequential .)
    READ            reduce using rule 79 (funcesp -> sequential .)
    PRINT           reduce using rule 79 (funcesp -> sequential .)
    IF              reduce using rule 79 (funcesp -> sequential .)
    WHILE           reduce using rule 79 (funcesp -> sequential .)
    FOR             reduce using rule 79 (funcesp -> sequential .)
    MEAN            reduce using rule 79 (funcesp -> sequential .)
    ELSE            reduce using rule 79 (funcesp -> sequential .)
    VAR             reduce using rule 79 (funcesp -> sequential .)
    RBRACE          reduce using rule 79 (funcesp -> sequential .)
    RBRACKET        reduce using rule 79 (funcesp -> sequential .)
    DOT             shift and go to state 89


state 69

    (80) funcesp -> compile .

    SEMICOLON       reduce using rule 80 (funcesp -> compile .)
    FUNCTION        reduce using rule 80 (funcesp -> compile .)
    ID              reduce using rule 80 (funcesp -> compile .)
    READ            reduce using rule 80 (funcesp -> compile .)
    PRINT           reduce using rule 80 (funcesp -> compile .)
    IF              reduce using rule 80 (funcesp -> compile .)
    WHILE           reduce using rule 80 (funcesp -> compile .)
    FOR             reduce using rule 80 (funcesp -> compile .)
    MEAN            reduce using rule 80 (funcesp -> compile .)
    ELSE            reduce using rule 80 (funcesp -> compile .)
    VAR             reduce using rule 80 (funcesp -> compile .)
    RBRACE          reduce using rule 80 (funcesp -> compile .)
    RBRACKET        reduce using rule 80 (funcesp -> compile .)


state 70

    (81) funcesp -> fit .

    SEMICOLON       reduce using rule 81 (funcesp -> fit .)
    FUNCTION        reduce using rule 81 (funcesp -> fit .)
    ID              reduce using rule 81 (funcesp -> fit .)
    READ            reduce using rule 81 (funcesp -> fit .)
    PRINT           reduce using rule 81 (funcesp -> fit .)
    IF              reduce using rule 81 (funcesp -> fit .)
    WHILE           reduce using rule 81 (funcesp -> fit .)
    FOR             reduce using rule 81 (funcesp -> fit .)
    MEAN            reduce using rule 81 (funcesp -> fit .)
    ELSE            reduce using rule 81 (funcesp -> fit .)
    VAR             reduce using rule 81 (funcesp -> fit .)
    RBRACE          reduce using rule 81 (funcesp -> fit .)
    RBRACKET        reduce using rule 81 (funcesp -> fit .)


state 71

    (82) funcesp -> predict .

    SEMICOLON       reduce using rule 82 (funcesp -> predict .)
    FUNCTION        reduce using rule 82 (funcesp -> predict .)
    ID              reduce using rule 82 (funcesp -> predict .)
    READ            reduce using rule 82 (funcesp -> predict .)
    PRINT           reduce using rule 82 (funcesp -> predict .)
    IF              reduce using rule 82 (funcesp -> predict .)
    WHILE           reduce using rule 82 (funcesp -> predict .)
    FOR             reduce using rule 82 (funcesp -> predict .)
    MEAN            reduce using rule 82 (funcesp -> predict .)
    ELSE            reduce using rule 82 (funcesp -> predict .)
    VAR             reduce using rule 82 (funcesp -> predict .)
    RBRACE          reduce using rule 82 (funcesp -> predict .)
    RBRACKET        reduce using rule 82 (funcesp -> predict .)


state 72

    (83) funcesp -> getweights .

    SEMICOLON       reduce using rule 83 (funcesp -> getweights .)
    FUNCTION        reduce using rule 83 (funcesp -> getweights .)
    ID              reduce using rule 83 (funcesp -> getweights .)
    READ            reduce using rule 83 (funcesp -> getweights .)
    PRINT           reduce using rule 83 (funcesp -> getweights .)
    IF              reduce using rule 83 (funcesp -> getweights .)
    WHILE           reduce using rule 83 (funcesp -> getweights .)
    FOR             reduce using rule 83 (funcesp -> getweights .)
    MEAN            reduce using rule 83 (funcesp -> getweights .)
    ELSE            reduce using rule 83 (funcesp -> getweights .)
    VAR             reduce using rule 83 (funcesp -> getweights .)
    RBRACE          reduce using rule 83 (funcesp -> getweights .)
    RBRACKET        reduce using rule 83 (funcesp -> getweights .)


state 73

    (90) mean -> MEAN . LPAREN array RPAREN

    LPAREN          shift and go to state 90


state 74

    (57) call -> ID LPAREN callp RPAREN .

    MULT            reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    DIV             reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    PLUS            reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    MINUS           reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    LT              reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    GT              reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    IFEQUAL         reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    DIFF            reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    AND             reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    OR              reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    RPAREN          reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    SEMICOLON       reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    FUNCTION        reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    ID              reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    READ            reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    PRINT           reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    IF              reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    WHILE           reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    FOR             reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    MEAN            reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    ELSE            reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    VAR             reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    RBRACE          reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    RBRACKET        reduce using rule 57 (call -> ID LPAREN callp RPAREN .)
    COMMA           reduce using rule 57 (call -> ID LPAREN callp RPAREN .)


state 75

    (58) callp -> exp SEMICOLON . callp
    (58) callp -> . exp SEMICOLON callp
    (59) callp -> . exp
    (20) exp -> . texp
    (21) exp -> . texp OR exp
    (22) texp -> . gexp
    (23) texp -> . gexp AND texp
    (24) gexp -> . mexp
    (25) gexp -> . mexp gexpp mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 45
    callp                          shift and go to state 91
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 76

    (66) while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile . whilep
    (67) whilep -> . SEMICOLON
    (68) whilep -> . statements whilep
    (41) statements -> . assign
    (42) statements -> . function
    (43) statements -> . voidfunction
    (44) statements -> . call
    (45) statements -> . read
    (46) statements -> . print
    (47) statements -> . if
    (48) statements -> . while
    (49) statements -> . for
    (50) statements -> . funcesp
    (51) assign -> . var EQUAL exp
    (9) function -> . FUNCTION type ID LPAREN param RPAREN body
    (10) voidfunction -> . FUNCTION VOID ID LPAREN param RPAREN body
    (57) call -> . ID LPAREN callp RPAREN
    (52) read -> . READ var
    (53) print -> . PRINT LPAREN printp
    (60) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (66) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (56) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    SEMICOLON       shift and go to state 94
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 92
    whilep                         shift and go to state 93
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 77

    (51) assign -> var EQUAL . exp
    (20) exp -> . texp
    (21) exp -> . texp OR exp
    (22) texp -> . gexp
    (23) texp -> . gexp AND texp
    (24) gexp -> . mexp
    (25) gexp -> . mexp gexpp mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    var                            shift and go to state 18
    exp                            shift and go to state 95
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    call                           shift and go to state 19

state 78

    (9) function -> FUNCTION type . ID LPAREN param RPAREN body

    ID              shift and go to state 96


state 79

    (10) voidfunction -> FUNCTION VOID . ID LPAREN param RPAREN body

    ID              shift and go to state 97


state 80

    (7) type -> INT .

    ID              reduce using rule 7 (type -> INT .)


state 81

    (8) type -> FLOAT .

    ID              reduce using rule 8 (type -> FLOAT .)


state 82

    (84) array -> ID EQUAL . ARRAY LPAREN var arrayp
    (87) matrix -> ID EQUAL . MATRIX LPAREN array matrixp
    (91) layers -> ID EQUAL . LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> ID EQUAL . SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (96) fit -> ID EQUAL . sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> ID EQUAL . sequential DOT PREDICT LPAREN LBRACKET predictp
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp

    ARRAY           shift and go to state 99
    MATRIX          shift and go to state 100
    LAYERS          shift and go to state 101
    SEQUENTIAL      shift and go to state 102
    ID              shift and go to state 98

    sequential                     shift and go to state 103

state 83

    (52) read -> READ var .

    SEMICOLON       reduce using rule 52 (read -> READ var .)
    FUNCTION        reduce using rule 52 (read -> READ var .)
    ID              reduce using rule 52 (read -> READ var .)
    READ            reduce using rule 52 (read -> READ var .)
    PRINT           reduce using rule 52 (read -> READ var .)
    IF              reduce using rule 52 (read -> READ var .)
    WHILE           reduce using rule 52 (read -> READ var .)
    FOR             reduce using rule 52 (read -> READ var .)
    MEAN            reduce using rule 52 (read -> READ var .)
    ELSE            reduce using rule 52 (read -> READ var .)
    VAR             reduce using rule 52 (read -> READ var .)
    RBRACE          reduce using rule 52 (read -> READ var .)
    RBRACKET        reduce using rule 52 (read -> READ var .)


state 84

    (56) var -> ID .

    SEMICOLON       reduce using rule 56 (var -> ID .)
    FUNCTION        reduce using rule 56 (var -> ID .)
    ID              reduce using rule 56 (var -> ID .)
    READ            reduce using rule 56 (var -> ID .)
    PRINT           reduce using rule 56 (var -> ID .)
    IF              reduce using rule 56 (var -> ID .)
    WHILE           reduce using rule 56 (var -> ID .)
    FOR             reduce using rule 56 (var -> ID .)
    MEAN            reduce using rule 56 (var -> ID .)
    ELSE            reduce using rule 56 (var -> ID .)
    VAR             reduce using rule 56 (var -> ID .)
    RBRACE          reduce using rule 56 (var -> ID .)
    RBRACKET        reduce using rule 56 (var -> ID .)
    RPAREN          reduce using rule 56 (var -> ID .)
    COMMA           reduce using rule 56 (var -> ID .)


state 85

    (53) print -> PRINT LPAREN . printp
    (54) printp -> . exp RPAREN
    (55) printp -> . exp COMMA printp
    (20) exp -> . texp
    (21) exp -> . texp OR exp
    (22) texp -> . gexp
    (23) texp -> . gexp AND texp
    (24) gexp -> . mexp
    (25) gexp -> . mexp gexpp mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    printp                         shift and go to state 104
    exp                            shift and go to state 105
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 86

    (60) if -> IF LPAREN . exp RPAREN quadsIf statements ifelse jumpsIf
    (20) exp -> . texp
    (21) exp -> . texp OR exp
    (22) texp -> . gexp
    (23) texp -> . gexp AND texp
    (24) gexp -> . mexp
    (25) gexp -> . mexp gexpp mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 106
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 87

    (72) for -> FOR LPAREN . var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (56) var -> . ID

    ID              shift and go to state 84

    var                            shift and go to state 107

state 88

    (102) getweights -> layers DOT . GETWEIGHTS LPAREN RPAREN

    GETWEIGHTS      shift and go to state 108


state 89

    (95) compile -> sequential DOT . COMPILE LPAREN RPAREN

    COMPILE         shift and go to state 109


state 90

    (90) mean -> MEAN LPAREN . array RPAREN
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 111

    array                          shift and go to state 110

state 91

    (58) callp -> exp SEMICOLON callp .

    RPAREN          reduce using rule 58 (callp -> exp SEMICOLON callp .)


state 92

    (68) whilep -> statements . whilep
    (67) whilep -> . SEMICOLON
    (68) whilep -> . statements whilep
    (41) statements -> . assign
    (42) statements -> . function
    (43) statements -> . voidfunction
    (44) statements -> . call
    (45) statements -> . read
    (46) statements -> . print
    (47) statements -> . if
    (48) statements -> . while
    (49) statements -> . for
    (50) statements -> . funcesp
    (51) assign -> . var EQUAL exp
    (9) function -> . FUNCTION type ID LPAREN param RPAREN body
    (10) voidfunction -> . FUNCTION VOID ID LPAREN param RPAREN body
    (57) call -> . ID LPAREN callp RPAREN
    (52) read -> . READ var
    (53) print -> . PRINT LPAREN printp
    (60) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (66) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (56) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    SEMICOLON       shift and go to state 94
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 92
    whilep                         shift and go to state 112
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 93

    (66) while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .

    $end            reduce using rule 66 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    SEMICOLON       reduce using rule 66 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    FUNCTION        reduce using rule 66 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    ID              reduce using rule 66 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    READ            reduce using rule 66 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    PRINT           reduce using rule 66 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    IF              reduce using rule 66 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    WHILE           reduce using rule 66 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    FOR             reduce using rule 66 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    MEAN            reduce using rule 66 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    ELSE            reduce using rule 66 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    VAR             reduce using rule 66 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    RBRACE          reduce using rule 66 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    RBRACKET        reduce using rule 66 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)


state 94

    (67) whilep -> SEMICOLON .

    $end            reduce using rule 67 (whilep -> SEMICOLON .)
    SEMICOLON       reduce using rule 67 (whilep -> SEMICOLON .)
    FUNCTION        reduce using rule 67 (whilep -> SEMICOLON .)
    ID              reduce using rule 67 (whilep -> SEMICOLON .)
    READ            reduce using rule 67 (whilep -> SEMICOLON .)
    PRINT           reduce using rule 67 (whilep -> SEMICOLON .)
    IF              reduce using rule 67 (whilep -> SEMICOLON .)
    WHILE           reduce using rule 67 (whilep -> SEMICOLON .)
    FOR             reduce using rule 67 (whilep -> SEMICOLON .)
    MEAN            reduce using rule 67 (whilep -> SEMICOLON .)
    ELSE            reduce using rule 67 (whilep -> SEMICOLON .)
    VAR             reduce using rule 67 (whilep -> SEMICOLON .)
    RBRACE          reduce using rule 67 (whilep -> SEMICOLON .)
    RBRACKET        reduce using rule 67 (whilep -> SEMICOLON .)


state 95

    (51) assign -> var EQUAL exp .

    SEMICOLON       reduce using rule 51 (assign -> var EQUAL exp .)
    FUNCTION        reduce using rule 51 (assign -> var EQUAL exp .)
    ID              reduce using rule 51 (assign -> var EQUAL exp .)
    READ            reduce using rule 51 (assign -> var EQUAL exp .)
    PRINT           reduce using rule 51 (assign -> var EQUAL exp .)
    IF              reduce using rule 51 (assign -> var EQUAL exp .)
    WHILE           reduce using rule 51 (assign -> var EQUAL exp .)
    FOR             reduce using rule 51 (assign -> var EQUAL exp .)
    MEAN            reduce using rule 51 (assign -> var EQUAL exp .)
    ELSE            reduce using rule 51 (assign -> var EQUAL exp .)
    VAR             reduce using rule 51 (assign -> var EQUAL exp .)
    RBRACE          reduce using rule 51 (assign -> var EQUAL exp .)
    RBRACKET        reduce using rule 51 (assign -> var EQUAL exp .)


state 96

    (9) function -> FUNCTION type ID . LPAREN param RPAREN body

    LPAREN          shift and go to state 113


state 97

    (10) voidfunction -> FUNCTION VOID ID . LPAREN param RPAREN body

    LPAREN          shift and go to state 114


state 98

    (92) sequential -> ID . EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp

    EQUAL           shift and go to state 115


state 99

    (84) array -> ID EQUAL ARRAY . LPAREN var arrayp

    LPAREN          shift and go to state 116


state 100

    (87) matrix -> ID EQUAL MATRIX . LPAREN array matrixp

    LPAREN          shift and go to state 117


state 101

    (91) layers -> ID EQUAL LAYERS . LPAREN UNITS EQUAL INT RPAREN

    LPAREN          shift and go to state 118


state 102

    (92) sequential -> ID EQUAL SEQUENTIAL . LPAREN LBRACKET layers sequentialp

    LPAREN          shift and go to state 119


state 103

    (96) fit -> ID EQUAL sequential . DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> ID EQUAL sequential . DOT PREDICT LPAREN LBRACKET predictp

    DOT             shift and go to state 120


state 104

    (53) print -> PRINT LPAREN printp .

    SEMICOLON       reduce using rule 53 (print -> PRINT LPAREN printp .)
    FUNCTION        reduce using rule 53 (print -> PRINT LPAREN printp .)
    ID              reduce using rule 53 (print -> PRINT LPAREN printp .)
    READ            reduce using rule 53 (print -> PRINT LPAREN printp .)
    PRINT           reduce using rule 53 (print -> PRINT LPAREN printp .)
    IF              reduce using rule 53 (print -> PRINT LPAREN printp .)
    WHILE           reduce using rule 53 (print -> PRINT LPAREN printp .)
    FOR             reduce using rule 53 (print -> PRINT LPAREN printp .)
    MEAN            reduce using rule 53 (print -> PRINT LPAREN printp .)
    ELSE            reduce using rule 53 (print -> PRINT LPAREN printp .)
    VAR             reduce using rule 53 (print -> PRINT LPAREN printp .)
    RBRACE          reduce using rule 53 (print -> PRINT LPAREN printp .)
    RBRACKET        reduce using rule 53 (print -> PRINT LPAREN printp .)


state 105

    (54) printp -> exp . RPAREN
    (55) printp -> exp . COMMA printp

    RPAREN          shift and go to state 121
    COMMA           shift and go to state 122


state 106

    (60) if -> IF LPAREN exp . RPAREN quadsIf statements ifelse jumpsIf

    RPAREN          shift and go to state 123


state 107

    (72) for -> FOR LPAREN var . SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp

    SEMICOLON       shift and go to state 124


state 108

    (102) getweights -> layers DOT GETWEIGHTS . LPAREN RPAREN

    LPAREN          shift and go to state 125


state 109

    (95) compile -> sequential DOT COMPILE . LPAREN RPAREN

    LPAREN          shift and go to state 126


state 110

    (90) mean -> MEAN LPAREN array . RPAREN

    RPAREN          shift and go to state 127


state 111

    (84) array -> ID . EQUAL ARRAY LPAREN var arrayp

    EQUAL           shift and go to state 128


state 112

    (68) whilep -> statements whilep .

    $end            reduce using rule 68 (whilep -> statements whilep .)
    SEMICOLON       reduce using rule 68 (whilep -> statements whilep .)
    FUNCTION        reduce using rule 68 (whilep -> statements whilep .)
    ID              reduce using rule 68 (whilep -> statements whilep .)
    READ            reduce using rule 68 (whilep -> statements whilep .)
    PRINT           reduce using rule 68 (whilep -> statements whilep .)
    IF              reduce using rule 68 (whilep -> statements whilep .)
    WHILE           reduce using rule 68 (whilep -> statements whilep .)
    FOR             reduce using rule 68 (whilep -> statements whilep .)
    MEAN            reduce using rule 68 (whilep -> statements whilep .)
    ELSE            reduce using rule 68 (whilep -> statements whilep .)
    VAR             reduce using rule 68 (whilep -> statements whilep .)
    RBRACE          reduce using rule 68 (whilep -> statements whilep .)
    RBRACKET        reduce using rule 68 (whilep -> statements whilep .)


state 113

    (9) function -> FUNCTION type ID LPAREN . param RPAREN body
    (16) param -> .
    (17) param -> . type paramp
    (7) type -> . INT
    (8) type -> . FLOAT

    RPAREN          reduce using rule 16 (param -> .)
    INT             shift and go to state 80
    FLOAT           shift and go to state 81

    type                           shift and go to state 129
    param                          shift and go to state 130

state 114

    (10) voidfunction -> FUNCTION VOID ID LPAREN . param RPAREN body
    (16) param -> .
    (17) param -> . type paramp
    (7) type -> . INT
    (8) type -> . FLOAT

    RPAREN          reduce using rule 16 (param -> .)
    INT             shift and go to state 80
    FLOAT           shift and go to state 81

    param                          shift and go to state 131
    type                           shift and go to state 129

state 115

    (92) sequential -> ID EQUAL . SEQUENTIAL LPAREN LBRACKET layers sequentialp

    SEQUENTIAL      shift and go to state 102


state 116

    (84) array -> ID EQUAL ARRAY LPAREN . var arrayp
    (56) var -> . ID

    ID              shift and go to state 84

    var                            shift and go to state 132

state 117

    (87) matrix -> ID EQUAL MATRIX LPAREN . array matrixp
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 111

    array                          shift and go to state 133

state 118

    (91) layers -> ID EQUAL LAYERS LPAREN . UNITS EQUAL INT RPAREN

    UNITS           shift and go to state 134


state 119

    (92) sequential -> ID EQUAL SEQUENTIAL LPAREN . LBRACKET layers sequentialp

    LBRACKET        shift and go to state 135


state 120

    (96) fit -> ID EQUAL sequential DOT . FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> ID EQUAL sequential DOT . PREDICT LPAREN LBRACKET predictp

    FIT             shift and go to state 136
    PREDICT         shift and go to state 137


state 121

    (54) printp -> exp RPAREN .

    SEMICOLON       reduce using rule 54 (printp -> exp RPAREN .)
    FUNCTION        reduce using rule 54 (printp -> exp RPAREN .)
    ID              reduce using rule 54 (printp -> exp RPAREN .)
    READ            reduce using rule 54 (printp -> exp RPAREN .)
    PRINT           reduce using rule 54 (printp -> exp RPAREN .)
    IF              reduce using rule 54 (printp -> exp RPAREN .)
    WHILE           reduce using rule 54 (printp -> exp RPAREN .)
    FOR             reduce using rule 54 (printp -> exp RPAREN .)
    MEAN            reduce using rule 54 (printp -> exp RPAREN .)
    ELSE            reduce using rule 54 (printp -> exp RPAREN .)
    VAR             reduce using rule 54 (printp -> exp RPAREN .)
    RBRACE          reduce using rule 54 (printp -> exp RPAREN .)
    RBRACKET        reduce using rule 54 (printp -> exp RPAREN .)


state 122

    (55) printp -> exp COMMA . printp
    (54) printp -> . exp RPAREN
    (55) printp -> . exp COMMA printp
    (20) exp -> . texp
    (21) exp -> . texp OR exp
    (22) texp -> . gexp
    (23) texp -> . gexp AND texp
    (24) gexp -> . mexp
    (25) gexp -> . mexp gexpp mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 105
    printp                         shift and go to state 138
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    var                            shift and go to state 18
    call                           shift and go to state 19

state 123

    (60) if -> IF LPAREN exp RPAREN . quadsIf statements ifelse jumpsIf
    (63) quadsIf -> .

    FUNCTION        reduce using rule 63 (quadsIf -> .)
    ID              reduce using rule 63 (quadsIf -> .)
    READ            reduce using rule 63 (quadsIf -> .)
    PRINT           reduce using rule 63 (quadsIf -> .)
    IF              reduce using rule 63 (quadsIf -> .)
    WHILE           reduce using rule 63 (quadsIf -> .)
    FOR             reduce using rule 63 (quadsIf -> .)
    MEAN            reduce using rule 63 (quadsIf -> .)

    quadsIf                        shift and go to state 139

state 124

    (72) for -> FOR LPAREN var SEMICOLON . exp SEMICOLON exp RPAREN LBRACKET statements forp
    (20) exp -> . texp
    (21) exp -> . texp OR exp
    (22) texp -> . gexp
    (23) texp -> . gexp AND texp
    (24) gexp -> . mexp
    (25) gexp -> . mexp gexpp mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    var                            shift and go to state 18
    exp                            shift and go to state 140
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    call                           shift and go to state 19

state 125

    (102) getweights -> layers DOT GETWEIGHTS LPAREN . RPAREN

    RPAREN          shift and go to state 141


state 126

    (95) compile -> sequential DOT COMPILE LPAREN . RPAREN

    RPAREN          shift and go to state 142


state 127

    (90) mean -> MEAN LPAREN array RPAREN .

    SEMICOLON       reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    FUNCTION        reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    ID              reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    READ            reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    PRINT           reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    IF              reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    WHILE           reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    FOR             reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    MEAN            reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    ELSE            reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    VAR             reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    RBRACE          reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    RBRACKET        reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)


state 128

    (84) array -> ID EQUAL . ARRAY LPAREN var arrayp

    ARRAY           shift and go to state 99


state 129

    (17) param -> type . paramp
    (18) paramp -> . ID
    (19) paramp -> . ID COMMA param

    ID              shift and go to state 144

    paramp                         shift and go to state 143

state 130

    (9) function -> FUNCTION type ID LPAREN param . RPAREN body

    RPAREN          shift and go to state 145


state 131

    (10) voidfunction -> FUNCTION VOID ID LPAREN param . RPAREN body

    RPAREN          shift and go to state 146


state 132

    (84) array -> ID EQUAL ARRAY LPAREN var . arrayp
    (85) arrayp -> . RPAREN
    (86) arrayp -> . COMMA var RPAREN

    RPAREN          shift and go to state 148
    COMMA           shift and go to state 149

    arrayp                         shift and go to state 147

state 133

    (87) matrix -> ID EQUAL MATRIX LPAREN array . matrixp
    (88) matrixp -> . RPAREN
    (89) matrixp -> . COMMA array RPAREN

    RPAREN          shift and go to state 151
    COMMA           shift and go to state 152

    matrixp                        shift and go to state 150

state 134

    (91) layers -> ID EQUAL LAYERS LPAREN UNITS . EQUAL INT RPAREN

    EQUAL           shift and go to state 153


state 135

    (92) sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET . layers sequentialp
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN

    ID              shift and go to state 154

    layers                         shift and go to state 155

state 136

    (96) fit -> ID EQUAL sequential DOT FIT . LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp

    LPAREN          shift and go to state 156


state 137

    (99) predict -> ID EQUAL sequential DOT PREDICT . LPAREN LBRACKET predictp

    LPAREN          shift and go to state 157


state 138

    (55) printp -> exp COMMA printp .

    SEMICOLON       reduce using rule 55 (printp -> exp COMMA printp .)
    FUNCTION        reduce using rule 55 (printp -> exp COMMA printp .)
    ID              reduce using rule 55 (printp -> exp COMMA printp .)
    READ            reduce using rule 55 (printp -> exp COMMA printp .)
    PRINT           reduce using rule 55 (printp -> exp COMMA printp .)
    IF              reduce using rule 55 (printp -> exp COMMA printp .)
    WHILE           reduce using rule 55 (printp -> exp COMMA printp .)
    FOR             reduce using rule 55 (printp -> exp COMMA printp .)
    MEAN            reduce using rule 55 (printp -> exp COMMA printp .)
    ELSE            reduce using rule 55 (printp -> exp COMMA printp .)
    VAR             reduce using rule 55 (printp -> exp COMMA printp .)
    RBRACE          reduce using rule 55 (printp -> exp COMMA printp .)
    RBRACKET        reduce using rule 55 (printp -> exp COMMA printp .)


state 139

    (60) if -> IF LPAREN exp RPAREN quadsIf . statements ifelse jumpsIf
    (41) statements -> . assign
    (42) statements -> . function
    (43) statements -> . voidfunction
    (44) statements -> . call
    (45) statements -> . read
    (46) statements -> . print
    (47) statements -> . if
    (48) statements -> . while
    (49) statements -> . for
    (50) statements -> . funcesp
    (51) assign -> . var EQUAL exp
    (9) function -> . FUNCTION type ID LPAREN param RPAREN body
    (10) voidfunction -> . FUNCTION VOID ID LPAREN param RPAREN body
    (57) call -> . ID LPAREN callp RPAREN
    (52) read -> . READ var
    (53) print -> . PRINT LPAREN printp
    (60) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (66) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (56) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 158
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 140

    (72) for -> FOR LPAREN var SEMICOLON exp . SEMICOLON exp RPAREN LBRACKET statements forp

    SEMICOLON       shift and go to state 159


state 141

    (102) getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .

    SEMICOLON       reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    FUNCTION        reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    ID              reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    READ            reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    PRINT           reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    IF              reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    WHILE           reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    FOR             reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    MEAN            reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    ELSE            reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    VAR             reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    RBRACE          reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    RBRACKET        reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)


state 142

    (95) compile -> sequential DOT COMPILE LPAREN RPAREN .

    SEMICOLON       reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    FUNCTION        reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    ID              reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    READ            reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    PRINT           reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    IF              reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    WHILE           reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    FOR             reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    MEAN            reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    ELSE            reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    VAR             reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    RBRACE          reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    RBRACKET        reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)


state 143

    (17) param -> type paramp .

    RPAREN          reduce using rule 17 (param -> type paramp .)


state 144

    (18) paramp -> ID .
    (19) paramp -> ID . COMMA param

    RPAREN          reduce using rule 18 (paramp -> ID .)
    COMMA           shift and go to state 160


state 145

    (9) function -> FUNCTION type ID LPAREN param RPAREN . body
    (11) body -> . LBRACE bodyp RBRACE

    LBRACE          shift and go to state 162

    body                           shift and go to state 161

state 146

    (10) voidfunction -> FUNCTION VOID ID LPAREN param RPAREN . body
    (11) body -> . LBRACE bodyp RBRACE

    LBRACE          shift and go to state 162

    body                           shift and go to state 163

state 147

    (84) array -> ID EQUAL ARRAY LPAREN var arrayp .

    SEMICOLON       reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    FUNCTION        reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    ID              reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    READ            reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    PRINT           reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    IF              reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    WHILE           reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    FOR             reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    MEAN            reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    RPAREN          reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    COMMA           reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    ELSE            reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    VAR             reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    RBRACE          reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    RBRACKET        reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)


state 148

    (85) arrayp -> RPAREN .

    SEMICOLON       reduce using rule 85 (arrayp -> RPAREN .)
    FUNCTION        reduce using rule 85 (arrayp -> RPAREN .)
    ID              reduce using rule 85 (arrayp -> RPAREN .)
    READ            reduce using rule 85 (arrayp -> RPAREN .)
    PRINT           reduce using rule 85 (arrayp -> RPAREN .)
    IF              reduce using rule 85 (arrayp -> RPAREN .)
    WHILE           reduce using rule 85 (arrayp -> RPAREN .)
    FOR             reduce using rule 85 (arrayp -> RPAREN .)
    MEAN            reduce using rule 85 (arrayp -> RPAREN .)
    RPAREN          reduce using rule 85 (arrayp -> RPAREN .)
    COMMA           reduce using rule 85 (arrayp -> RPAREN .)
    ELSE            reduce using rule 85 (arrayp -> RPAREN .)
    VAR             reduce using rule 85 (arrayp -> RPAREN .)
    RBRACE          reduce using rule 85 (arrayp -> RPAREN .)
    RBRACKET        reduce using rule 85 (arrayp -> RPAREN .)


state 149

    (86) arrayp -> COMMA . var RPAREN
    (56) var -> . ID

    ID              shift and go to state 84

    var                            shift and go to state 164

state 150

    (87) matrix -> ID EQUAL MATRIX LPAREN array matrixp .

    SEMICOLON       reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    FUNCTION        reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    ID              reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    READ            reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    PRINT           reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    IF              reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    WHILE           reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    FOR             reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    MEAN            reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    ELSE            reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    VAR             reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    RBRACE          reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    RBRACKET        reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)


state 151

    (88) matrixp -> RPAREN .

    SEMICOLON       reduce using rule 88 (matrixp -> RPAREN .)
    FUNCTION        reduce using rule 88 (matrixp -> RPAREN .)
    ID              reduce using rule 88 (matrixp -> RPAREN .)
    READ            reduce using rule 88 (matrixp -> RPAREN .)
    PRINT           reduce using rule 88 (matrixp -> RPAREN .)
    IF              reduce using rule 88 (matrixp -> RPAREN .)
    WHILE           reduce using rule 88 (matrixp -> RPAREN .)
    FOR             reduce using rule 88 (matrixp -> RPAREN .)
    MEAN            reduce using rule 88 (matrixp -> RPAREN .)
    ELSE            reduce using rule 88 (matrixp -> RPAREN .)
    VAR             reduce using rule 88 (matrixp -> RPAREN .)
    RBRACE          reduce using rule 88 (matrixp -> RPAREN .)
    RBRACKET        reduce using rule 88 (matrixp -> RPAREN .)


state 152

    (89) matrixp -> COMMA . array RPAREN
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 111

    array                          shift and go to state 165

state 153

    (91) layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL . INT RPAREN

    INT             shift and go to state 166


state 154

    (91) layers -> ID . EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN

    EQUAL           shift and go to state 167


state 155

    (92) sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers . sequentialp
    (93) sequentialp -> . RBRACKET RPAREN
    (94) sequentialp -> . COMMA layers sequentialp

    RBRACKET        shift and go to state 169
    COMMA           shift and go to state 170

    sequentialp                    shift and go to state 168

state 156

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN . array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 111

    array                          shift and go to state 171

state 157

    (99) predict -> ID EQUAL sequential DOT PREDICT LPAREN . LBRACKET predictp

    LBRACKET        shift and go to state 172


state 158

    (60) if -> IF LPAREN exp RPAREN quadsIf statements . ifelse jumpsIf
    (61) ifelse -> .
    (62) ifelse -> . ELSE quadsElse statements

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 61 (ifelse -> .)
    FUNCTION        reduce using rule 61 (ifelse -> .)
    ID              reduce using rule 61 (ifelse -> .)
    READ            reduce using rule 61 (ifelse -> .)
    PRINT           reduce using rule 61 (ifelse -> .)
    IF              reduce using rule 61 (ifelse -> .)
    WHILE           reduce using rule 61 (ifelse -> .)
    FOR             reduce using rule 61 (ifelse -> .)
    MEAN            reduce using rule 61 (ifelse -> .)
    VAR             reduce using rule 61 (ifelse -> .)
    RBRACE          reduce using rule 61 (ifelse -> .)
    RBRACKET        reduce using rule 61 (ifelse -> .)
    ELSE            shift and go to state 174

  ! ELSE            [ reduce using rule 61 (ifelse -> .) ]

    ifelse                         shift and go to state 173

state 159

    (72) for -> FOR LPAREN var SEMICOLON exp SEMICOLON . exp RPAREN LBRACKET statements forp
    (20) exp -> . texp
    (21) exp -> . texp OR exp
    (22) texp -> . gexp
    (23) texp -> . gexp AND texp
    (24) gexp -> . mexp
    (25) gexp -> . mexp gexpp mexp
    (30) mexp -> . t
    (31) mexp -> . t PLUS mexp
    (32) mexp -> . t MINUS mexp
    (33) t -> . f
    (34) t -> . f MULT t
    (35) t -> . f DIV t
    (36) f -> . LPAREN exp RPAREN
    (37) f -> . CTI
    (38) f -> . CTF
    (39) f -> . var
    (40) f -> . call
    (56) var -> . ID
    (57) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 9
    CTI             shift and go to state 16
    CTF             shift and go to state 17
    ID              shift and go to state 20

    var                            shift and go to state 18
    exp                            shift and go to state 175
    texp                           shift and go to state 11
    gexp                           shift and go to state 12
    mexp                           shift and go to state 13
    t                              shift and go to state 14
    f                              shift and go to state 15
    call                           shift and go to state 19

state 160

    (19) paramp -> ID COMMA . param
    (16) param -> .
    (17) param -> . type paramp
    (7) type -> . INT
    (8) type -> . FLOAT

    RPAREN          reduce using rule 16 (param -> .)
    INT             shift and go to state 80
    FLOAT           shift and go to state 81

    param                          shift and go to state 176
    type                           shift and go to state 129

state 161

    (9) function -> FUNCTION type ID LPAREN param RPAREN body .

    SEMICOLON       reduce using rule 9 (function -> FUNCTION type ID LPAREN param RPAREN body .)
    FUNCTION        reduce using rule 9 (function -> FUNCTION type ID LPAREN param RPAREN body .)
    ID              reduce using rule 9 (function -> FUNCTION type ID LPAREN param RPAREN body .)
    READ            reduce using rule 9 (function -> FUNCTION type ID LPAREN param RPAREN body .)
    PRINT           reduce using rule 9 (function -> FUNCTION type ID LPAREN param RPAREN body .)
    IF              reduce using rule 9 (function -> FUNCTION type ID LPAREN param RPAREN body .)
    WHILE           reduce using rule 9 (function -> FUNCTION type ID LPAREN param RPAREN body .)
    FOR             reduce using rule 9 (function -> FUNCTION type ID LPAREN param RPAREN body .)
    MEAN            reduce using rule 9 (function -> FUNCTION type ID LPAREN param RPAREN body .)
    ELSE            reduce using rule 9 (function -> FUNCTION type ID LPAREN param RPAREN body .)
    VAR             reduce using rule 9 (function -> FUNCTION type ID LPAREN param RPAREN body .)
    RBRACE          reduce using rule 9 (function -> FUNCTION type ID LPAREN param RPAREN body .)
    RBRACKET        reduce using rule 9 (function -> FUNCTION type ID LPAREN param RPAREN body .)


state 162

    (11) body -> LBRACE . bodyp RBRACE
    (12) bodyp -> . decvar statements bodyp
    (13) bodyp -> . statements bodyp
    (14) bodyp -> . decvar
    (15) bodyp -> .
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar
    (41) statements -> . assign
    (42) statements -> . function
    (43) statements -> . voidfunction
    (44) statements -> . call
    (45) statements -> . read
    (46) statements -> . print
    (47) statements -> . if
    (48) statements -> . while
    (49) statements -> . for
    (50) statements -> . funcesp
    (51) assign -> . var EQUAL exp
    (9) function -> . FUNCTION type ID LPAREN param RPAREN body
    (10) voidfunction -> . FUNCTION VOID ID LPAREN param RPAREN body
    (57) call -> . ID LPAREN callp RPAREN
    (52) read -> . READ var
    (53) print -> . PRINT LPAREN printp
    (60) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (66) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (56) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACE          reduce using rule 15 (bodyp -> .)
    VAR             shift and go to state 180
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    bodyp                          shift and go to state 177
    decvar                         shift and go to state 178
    statements                     shift and go to state 179
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 163

    (10) voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body .

    SEMICOLON       reduce using rule 10 (voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body .)
    FUNCTION        reduce using rule 10 (voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body .)
    ID              reduce using rule 10 (voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body .)
    READ            reduce using rule 10 (voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body .)
    PRINT           reduce using rule 10 (voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body .)
    IF              reduce using rule 10 (voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body .)
    WHILE           reduce using rule 10 (voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body .)
    FOR             reduce using rule 10 (voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body .)
    MEAN            reduce using rule 10 (voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body .)
    ELSE            reduce using rule 10 (voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body .)
    VAR             reduce using rule 10 (voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body .)
    RBRACE          reduce using rule 10 (voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body .)
    RBRACKET        reduce using rule 10 (voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body .)


state 164

    (86) arrayp -> COMMA var . RPAREN

    RPAREN          shift and go to state 181


state 165

    (89) matrixp -> COMMA array . RPAREN

    RPAREN          shift and go to state 182


state 166

    (91) layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT . RPAREN

    RPAREN          shift and go to state 183


state 167

    (91) layers -> ID EQUAL . LAYERS LPAREN UNITS EQUAL INT RPAREN

    LAYERS          shift and go to state 101


state 168

    (92) sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .

    DOT             reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    SEMICOLON       reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    FUNCTION        reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    ID              reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    READ            reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    PRINT           reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    IF              reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    WHILE           reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    FOR             reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    MEAN            reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    ELSE            reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    VAR             reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    RBRACE          reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    RBRACKET        reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)


state 169

    (93) sequentialp -> RBRACKET . RPAREN

    RPAREN          shift and go to state 184


state 170

    (94) sequentialp -> COMMA . layers sequentialp
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN

    ID              shift and go to state 154

    layers                         shift and go to state 185

state 171

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array . COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp

    COMMA           shift and go to state 186


state 172

    (99) predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET . predictp
    (100) predictp -> . INT RBRACKET RPAREN
    (101) predictp -> . FLOAT RBRACKET RPAREN

    INT             shift and go to state 188
    FLOAT           shift and go to state 189

    predictp                       shift and go to state 187

state 173

    (60) if -> IF LPAREN exp RPAREN quadsIf statements ifelse . jumpsIf
    (64) jumpsIf -> .

    SEMICOLON       reduce using rule 64 (jumpsIf -> .)
    FUNCTION        reduce using rule 64 (jumpsIf -> .)
    ID              reduce using rule 64 (jumpsIf -> .)
    READ            reduce using rule 64 (jumpsIf -> .)
    PRINT           reduce using rule 64 (jumpsIf -> .)
    IF              reduce using rule 64 (jumpsIf -> .)
    WHILE           reduce using rule 64 (jumpsIf -> .)
    FOR             reduce using rule 64 (jumpsIf -> .)
    MEAN            reduce using rule 64 (jumpsIf -> .)
    ELSE            reduce using rule 64 (jumpsIf -> .)
    VAR             reduce using rule 64 (jumpsIf -> .)
    RBRACE          reduce using rule 64 (jumpsIf -> .)
    RBRACKET        reduce using rule 64 (jumpsIf -> .)

    jumpsIf                        shift and go to state 190

state 174

    (62) ifelse -> ELSE . quadsElse statements
    (65) quadsElse -> .

    FUNCTION        reduce using rule 65 (quadsElse -> .)
    ID              reduce using rule 65 (quadsElse -> .)
    READ            reduce using rule 65 (quadsElse -> .)
    PRINT           reduce using rule 65 (quadsElse -> .)
    IF              reduce using rule 65 (quadsElse -> .)
    WHILE           reduce using rule 65 (quadsElse -> .)
    FOR             reduce using rule 65 (quadsElse -> .)
    MEAN            reduce using rule 65 (quadsElse -> .)

    quadsElse                      shift and go to state 191

state 175

    (72) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp . RPAREN LBRACKET statements forp

    RPAREN          shift and go to state 192


state 176

    (19) paramp -> ID COMMA param .

    RPAREN          reduce using rule 19 (paramp -> ID COMMA param .)


state 177

    (11) body -> LBRACE bodyp . RBRACE

    RBRACE          shift and go to state 193


state 178

    (12) bodyp -> decvar . statements bodyp
    (14) bodyp -> decvar .
    (41) statements -> . assign
    (42) statements -> . function
    (43) statements -> . voidfunction
    (44) statements -> . call
    (45) statements -> . read
    (46) statements -> . print
    (47) statements -> . if
    (48) statements -> . while
    (49) statements -> . for
    (50) statements -> . funcesp
    (51) assign -> . var EQUAL exp
    (9) function -> . FUNCTION type ID LPAREN param RPAREN body
    (10) voidfunction -> . FUNCTION VOID ID LPAREN param RPAREN body
    (57) call -> . ID LPAREN callp RPAREN
    (52) read -> . READ var
    (53) print -> . PRINT LPAREN printp
    (60) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (66) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (56) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACE          reduce using rule 14 (bodyp -> decvar .)
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 194
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 179

    (13) bodyp -> statements . bodyp
    (12) bodyp -> . decvar statements bodyp
    (13) bodyp -> . statements bodyp
    (14) bodyp -> . decvar
    (15) bodyp -> .
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar
    (41) statements -> . assign
    (42) statements -> . function
    (43) statements -> . voidfunction
    (44) statements -> . call
    (45) statements -> . read
    (46) statements -> . print
    (47) statements -> . if
    (48) statements -> . while
    (49) statements -> . for
    (50) statements -> . funcesp
    (51) assign -> . var EQUAL exp
    (9) function -> . FUNCTION type ID LPAREN param RPAREN body
    (10) voidfunction -> . FUNCTION VOID ID LPAREN param RPAREN body
    (57) call -> . ID LPAREN callp RPAREN
    (52) read -> . READ var
    (53) print -> . PRINT LPAREN printp
    (60) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (66) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (56) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACE          reduce using rule 15 (bodyp -> .)
    VAR             shift and go to state 180
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 179
    bodyp                          shift and go to state 195
    decvar                         shift and go to state 178
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 180

    (2) decvar -> VAR . decvarp
    (3) decvar -> VAR . decvarp decvar
    (4) decvarp -> . type decvarpp SEMICOLON
    (7) type -> . INT
    (8) type -> . FLOAT

    INT             shift and go to state 80
    FLOAT           shift and go to state 81

    decvarp                        shift and go to state 196
    type                           shift and go to state 197

state 181

    (86) arrayp -> COMMA var RPAREN .

    SEMICOLON       reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    FUNCTION        reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    ID              reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    READ            reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    PRINT           reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    IF              reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    WHILE           reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    FOR             reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    MEAN            reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    RPAREN          reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    COMMA           reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    ELSE            reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    VAR             reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    RBRACE          reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    RBRACKET        reduce using rule 86 (arrayp -> COMMA var RPAREN .)


state 182

    (89) matrixp -> COMMA array RPAREN .

    SEMICOLON       reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    FUNCTION        reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    ID              reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    READ            reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    PRINT           reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    IF              reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    WHILE           reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    FOR             reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    MEAN            reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    ELSE            reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    VAR             reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    RBRACE          reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    RBRACKET        reduce using rule 89 (matrixp -> COMMA array RPAREN .)


state 183

    (91) layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .

    DOT             reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    SEMICOLON       reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    FUNCTION        reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    ID              reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    READ            reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    PRINT           reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    IF              reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    WHILE           reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    FOR             reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    MEAN            reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    RBRACKET        reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    COMMA           reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    ELSE            reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    VAR             reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    RBRACE          reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)


state 184

    (93) sequentialp -> RBRACKET RPAREN .

    DOT             reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    SEMICOLON       reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    FUNCTION        reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    ID              reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    READ            reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    PRINT           reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    IF              reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    WHILE           reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    FOR             reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    MEAN            reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    ELSE            reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    VAR             reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    RBRACE          reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    RBRACKET        reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)


state 185

    (94) sequentialp -> COMMA layers . sequentialp
    (93) sequentialp -> . RBRACKET RPAREN
    (94) sequentialp -> . COMMA layers sequentialp

    RBRACKET        shift and go to state 169
    COMMA           shift and go to state 170

    sequentialp                    shift and go to state 198

state 186

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA . array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 111

    array                          shift and go to state 199

state 187

    (99) predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .

    SEMICOLON       reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    FUNCTION        reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    ID              reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    READ            reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    PRINT           reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    IF              reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    WHILE           reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    FOR             reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    MEAN            reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    ELSE            reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    VAR             reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    RBRACE          reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    RBRACKET        reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)


state 188

    (100) predictp -> INT . RBRACKET RPAREN

    RBRACKET        shift and go to state 200


state 189

    (101) predictp -> FLOAT . RBRACKET RPAREN

    RBRACKET        shift and go to state 201


state 190

    (60) if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .

    SEMICOLON       reduce using rule 60 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    FUNCTION        reduce using rule 60 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    ID              reduce using rule 60 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    READ            reduce using rule 60 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    PRINT           reduce using rule 60 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    IF              reduce using rule 60 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    WHILE           reduce using rule 60 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    FOR             reduce using rule 60 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    MEAN            reduce using rule 60 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    ELSE            reduce using rule 60 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    VAR             reduce using rule 60 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    RBRACE          reduce using rule 60 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    RBRACKET        reduce using rule 60 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)


state 191

    (62) ifelse -> ELSE quadsElse . statements
    (41) statements -> . assign
    (42) statements -> . function
    (43) statements -> . voidfunction
    (44) statements -> . call
    (45) statements -> . read
    (46) statements -> . print
    (47) statements -> . if
    (48) statements -> . while
    (49) statements -> . for
    (50) statements -> . funcesp
    (51) assign -> . var EQUAL exp
    (9) function -> . FUNCTION type ID LPAREN param RPAREN body
    (10) voidfunction -> . FUNCTION VOID ID LPAREN param RPAREN body
    (57) call -> . ID LPAREN callp RPAREN
    (52) read -> . READ var
    (53) print -> . PRINT LPAREN printp
    (60) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (66) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (56) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 202
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 192

    (72) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN . LBRACKET statements forp

    LBRACKET        shift and go to state 203


state 193

    (11) body -> LBRACE bodyp RBRACE .

    SEMICOLON       reduce using rule 11 (body -> LBRACE bodyp RBRACE .)
    FUNCTION        reduce using rule 11 (body -> LBRACE bodyp RBRACE .)
    ID              reduce using rule 11 (body -> LBRACE bodyp RBRACE .)
    READ            reduce using rule 11 (body -> LBRACE bodyp RBRACE .)
    PRINT           reduce using rule 11 (body -> LBRACE bodyp RBRACE .)
    IF              reduce using rule 11 (body -> LBRACE bodyp RBRACE .)
    WHILE           reduce using rule 11 (body -> LBRACE bodyp RBRACE .)
    FOR             reduce using rule 11 (body -> LBRACE bodyp RBRACE .)
    MEAN            reduce using rule 11 (body -> LBRACE bodyp RBRACE .)
    ELSE            reduce using rule 11 (body -> LBRACE bodyp RBRACE .)
    VAR             reduce using rule 11 (body -> LBRACE bodyp RBRACE .)
    RBRACE          reduce using rule 11 (body -> LBRACE bodyp RBRACE .)
    RBRACKET        reduce using rule 11 (body -> LBRACE bodyp RBRACE .)


state 194

    (12) bodyp -> decvar statements . bodyp
    (12) bodyp -> . decvar statements bodyp
    (13) bodyp -> . statements bodyp
    (14) bodyp -> . decvar
    (15) bodyp -> .
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar
    (41) statements -> . assign
    (42) statements -> . function
    (43) statements -> . voidfunction
    (44) statements -> . call
    (45) statements -> . read
    (46) statements -> . print
    (47) statements -> . if
    (48) statements -> . while
    (49) statements -> . for
    (50) statements -> . funcesp
    (51) assign -> . var EQUAL exp
    (9) function -> . FUNCTION type ID LPAREN param RPAREN body
    (10) voidfunction -> . FUNCTION VOID ID LPAREN param RPAREN body
    (57) call -> . ID LPAREN callp RPAREN
    (52) read -> . READ var
    (53) print -> . PRINT LPAREN printp
    (60) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (66) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (56) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACE          reduce using rule 15 (bodyp -> .)
    VAR             shift and go to state 180
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    decvar                         shift and go to state 178
    statements                     shift and go to state 179
    bodyp                          shift and go to state 204
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 195

    (13) bodyp -> statements bodyp .

    RBRACE          reduce using rule 13 (bodyp -> statements bodyp .)


state 196

    (2) decvar -> VAR decvarp .
    (3) decvar -> VAR decvarp . decvar
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar

    FUNCTION        reduce using rule 2 (decvar -> VAR decvarp .)
    ID              reduce using rule 2 (decvar -> VAR decvarp .)
    READ            reduce using rule 2 (decvar -> VAR decvarp .)
    PRINT           reduce using rule 2 (decvar -> VAR decvarp .)
    IF              reduce using rule 2 (decvar -> VAR decvarp .)
    WHILE           reduce using rule 2 (decvar -> VAR decvarp .)
    FOR             reduce using rule 2 (decvar -> VAR decvarp .)
    MEAN            reduce using rule 2 (decvar -> VAR decvarp .)
    RBRACE          reduce using rule 2 (decvar -> VAR decvarp .)
    VAR             shift and go to state 180

    decvar                         shift and go to state 205

state 197

    (4) decvarp -> type . decvarpp SEMICOLON
    (5) decvarpp -> . ID COMMA decvarpp
    (6) decvarpp -> . ID

    ID              shift and go to state 207

    decvarpp                       shift and go to state 206

state 198

    (94) sequentialp -> COMMA layers sequentialp .

    DOT             reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    SEMICOLON       reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    FUNCTION        reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    ID              reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    READ            reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    PRINT           reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    IF              reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    WHILE           reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    FOR             reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    MEAN            reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    ELSE            reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    VAR             reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    RBRACE          reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    RBRACKET        reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)


state 199

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array . COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp

    COMMA           shift and go to state 208


state 200

    (100) predictp -> INT RBRACKET . RPAREN

    RPAREN          shift and go to state 209


state 201

    (101) predictp -> FLOAT RBRACKET . RPAREN

    RPAREN          shift and go to state 210


state 202

    (62) ifelse -> ELSE quadsElse statements .

    ELSE            reduce using rule 62 (ifelse -> ELSE quadsElse statements .)
    SEMICOLON       reduce using rule 62 (ifelse -> ELSE quadsElse statements .)
    FUNCTION        reduce using rule 62 (ifelse -> ELSE quadsElse statements .)
    ID              reduce using rule 62 (ifelse -> ELSE quadsElse statements .)
    READ            reduce using rule 62 (ifelse -> ELSE quadsElse statements .)
    PRINT           reduce using rule 62 (ifelse -> ELSE quadsElse statements .)
    IF              reduce using rule 62 (ifelse -> ELSE quadsElse statements .)
    WHILE           reduce using rule 62 (ifelse -> ELSE quadsElse statements .)
    FOR             reduce using rule 62 (ifelse -> ELSE quadsElse statements .)
    MEAN            reduce using rule 62 (ifelse -> ELSE quadsElse statements .)
    VAR             reduce using rule 62 (ifelse -> ELSE quadsElse statements .)
    RBRACE          reduce using rule 62 (ifelse -> ELSE quadsElse statements .)
    RBRACKET        reduce using rule 62 (ifelse -> ELSE quadsElse statements .)


state 203

    (72) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET . statements forp
    (41) statements -> . assign
    (42) statements -> . function
    (43) statements -> . voidfunction
    (44) statements -> . call
    (45) statements -> . read
    (46) statements -> . print
    (47) statements -> . if
    (48) statements -> . while
    (49) statements -> . for
    (50) statements -> . funcesp
    (51) assign -> . var EQUAL exp
    (9) function -> . FUNCTION type ID LPAREN param RPAREN body
    (10) voidfunction -> . FUNCTION VOID ID LPAREN param RPAREN body
    (57) call -> . ID LPAREN callp RPAREN
    (52) read -> . READ var
    (53) print -> . PRINT LPAREN printp
    (60) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (66) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (56) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    var                            shift and go to state 57
    statements                     shift and go to state 211
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 204

    (12) bodyp -> decvar statements bodyp .

    RBRACE          reduce using rule 12 (bodyp -> decvar statements bodyp .)


state 205

    (3) decvar -> VAR decvarp decvar .

    FUNCTION        reduce using rule 3 (decvar -> VAR decvarp decvar .)
    ID              reduce using rule 3 (decvar -> VAR decvarp decvar .)
    READ            reduce using rule 3 (decvar -> VAR decvarp decvar .)
    PRINT           reduce using rule 3 (decvar -> VAR decvarp decvar .)
    IF              reduce using rule 3 (decvar -> VAR decvarp decvar .)
    WHILE           reduce using rule 3 (decvar -> VAR decvarp decvar .)
    FOR             reduce using rule 3 (decvar -> VAR decvarp decvar .)
    MEAN            reduce using rule 3 (decvar -> VAR decvarp decvar .)
    RBRACE          reduce using rule 3 (decvar -> VAR decvarp decvar .)


state 206

    (4) decvarp -> type decvarpp . SEMICOLON

    SEMICOLON       shift and go to state 212


state 207

    (5) decvarpp -> ID . COMMA decvarpp
    (6) decvarpp -> ID .

    COMMA           shift and go to state 213
    SEMICOLON       reduce using rule 6 (decvarpp -> ID .)


state 208

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA . EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp

    EPOCHS          shift and go to state 214


state 209

    (100) predictp -> INT RBRACKET RPAREN .

    SEMICOLON       reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    FUNCTION        reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    ID              reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    READ            reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    PRINT           reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    IF              reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    WHILE           reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    FOR             reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    MEAN            reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    ELSE            reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    VAR             reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    RBRACE          reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    RBRACKET        reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)


state 210

    (101) predictp -> FLOAT RBRACKET RPAREN .

    SEMICOLON       reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    FUNCTION        reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    ID              reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    READ            reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    PRINT           reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    IF              reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    WHILE           reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    FOR             reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    MEAN            reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    ELSE            reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    VAR             reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    RBRACE          reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    RBRACKET        reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)


state 211

    (72) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements . forp
    (73) forp -> . RBRACKET
    (74) forp -> . statements forp
    (41) statements -> . assign
    (42) statements -> . function
    (43) statements -> . voidfunction
    (44) statements -> . call
    (45) statements -> . read
    (46) statements -> . print
    (47) statements -> . if
    (48) statements -> . while
    (49) statements -> . for
    (50) statements -> . funcesp
    (51) assign -> . var EQUAL exp
    (9) function -> . FUNCTION type ID LPAREN param RPAREN body
    (10) voidfunction -> . FUNCTION VOID ID LPAREN param RPAREN body
    (57) call -> . ID LPAREN callp RPAREN
    (52) read -> . READ var
    (53) print -> . PRINT LPAREN printp
    (60) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (66) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (56) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACKET        shift and go to state 217
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    var                            shift and go to state 57
    statements                     shift and go to state 215
    forp                           shift and go to state 216
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 212

    (4) decvarp -> type decvarpp SEMICOLON .

    VAR             reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    FUNCTION        reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    ID              reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    READ            reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    PRINT           reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    IF              reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    WHILE           reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    FOR             reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    MEAN            reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    RBRACE          reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)


state 213

    (5) decvarpp -> ID COMMA . decvarpp
    (5) decvarpp -> . ID COMMA decvarpp
    (6) decvarpp -> . ID

    ID              shift and go to state 207

    decvarpp                       shift and go to state 218

state 214

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS . EQUAL INT COMMA VERBOSE EQUAL fitp

    EQUAL           shift and go to state 219


state 215

    (74) forp -> statements . forp
    (73) forp -> . RBRACKET
    (74) forp -> . statements forp
    (41) statements -> . assign
    (42) statements -> . function
    (43) statements -> . voidfunction
    (44) statements -> . call
    (45) statements -> . read
    (46) statements -> . print
    (47) statements -> . if
    (48) statements -> . while
    (49) statements -> . for
    (50) statements -> . funcesp
    (51) assign -> . var EQUAL exp
    (9) function -> . FUNCTION type ID LPAREN param RPAREN body
    (10) voidfunction -> . FUNCTION VOID ID LPAREN param RPAREN body
    (57) call -> . ID LPAREN callp RPAREN
    (52) read -> . READ var
    (53) print -> . PRINT LPAREN printp
    (60) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (66) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (56) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACKET        shift and go to state 217
    FUNCTION        shift and go to state 58
    ID              shift and go to state 59
    READ            shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 6
    FOR             shift and go to state 63
    MEAN            shift and go to state 73

    statements                     shift and go to state 215
    forp                           shift and go to state 220
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    funcesp                        shift and go to state 56
    var                            shift and go to state 57
    array                          shift and go to state 64
    matrix                         shift and go to state 65
    mean                           shift and go to state 66
    layers                         shift and go to state 67
    sequential                     shift and go to state 68
    compile                        shift and go to state 69
    fit                            shift and go to state 70
    predict                        shift and go to state 71
    getweights                     shift and go to state 72

state 216

    (72) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .

    SEMICOLON       reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    FUNCTION        reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    ID              reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    READ            reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    PRINT           reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    IF              reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    WHILE           reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    FOR             reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    MEAN            reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    ELSE            reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    VAR             reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    RBRACE          reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    RBRACKET        reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)


state 217

    (73) forp -> RBRACKET .

    SEMICOLON       reduce using rule 73 (forp -> RBRACKET .)
    FUNCTION        reduce using rule 73 (forp -> RBRACKET .)
    ID              reduce using rule 73 (forp -> RBRACKET .)
    READ            reduce using rule 73 (forp -> RBRACKET .)
    PRINT           reduce using rule 73 (forp -> RBRACKET .)
    IF              reduce using rule 73 (forp -> RBRACKET .)
    WHILE           reduce using rule 73 (forp -> RBRACKET .)
    FOR             reduce using rule 73 (forp -> RBRACKET .)
    MEAN            reduce using rule 73 (forp -> RBRACKET .)
    ELSE            reduce using rule 73 (forp -> RBRACKET .)
    VAR             reduce using rule 73 (forp -> RBRACKET .)
    RBRACE          reduce using rule 73 (forp -> RBRACKET .)
    RBRACKET        reduce using rule 73 (forp -> RBRACKET .)


state 218

    (5) decvarpp -> ID COMMA decvarpp .

    SEMICOLON       reduce using rule 5 (decvarpp -> ID COMMA decvarpp .)


state 219

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL . INT COMMA VERBOSE EQUAL fitp

    INT             shift and go to state 221


state 220

    (74) forp -> statements forp .

    SEMICOLON       reduce using rule 74 (forp -> statements forp .)
    FUNCTION        reduce using rule 74 (forp -> statements forp .)
    ID              reduce using rule 74 (forp -> statements forp .)
    READ            reduce using rule 74 (forp -> statements forp .)
    PRINT           reduce using rule 74 (forp -> statements forp .)
    IF              reduce using rule 74 (forp -> statements forp .)
    WHILE           reduce using rule 74 (forp -> statements forp .)
    FOR             reduce using rule 74 (forp -> statements forp .)
    MEAN            reduce using rule 74 (forp -> statements forp .)
    ELSE            reduce using rule 74 (forp -> statements forp .)
    VAR             reduce using rule 74 (forp -> statements forp .)
    RBRACE          reduce using rule 74 (forp -> statements forp .)
    RBRACKET        reduce using rule 74 (forp -> statements forp .)


state 221

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT . COMMA VERBOSE EQUAL fitp

    COMMA           shift and go to state 222


state 222

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA . VERBOSE EQUAL fitp

    VERBOSE         shift and go to state 223


state 223

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE . EQUAL fitp

    EQUAL           shift and go to state 224


state 224

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL . fitp
    (97) fitp -> . TRUE RPAREN
    (98) fitp -> . FALSE RPAREN

    TRUE            shift and go to state 226
    FALSE           shift and go to state 227

    fitp                           shift and go to state 225

state 225

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .

    SEMICOLON       reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    FUNCTION        reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    ID              reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    READ            reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    PRINT           reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    IF              reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    WHILE           reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    FOR             reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    MEAN            reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    ELSE            reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    VAR             reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    RBRACE          reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    RBRACKET        reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)


state 226

    (97) fitp -> TRUE . RPAREN

    RPAREN          shift and go to state 228


state 227

    (98) fitp -> FALSE . RPAREN

    RPAREN          shift and go to state 229


state 228

    (97) fitp -> TRUE RPAREN .

    SEMICOLON       reduce using rule 97 (fitp -> TRUE RPAREN .)
    FUNCTION        reduce using rule 97 (fitp -> TRUE RPAREN .)
    ID              reduce using rule 97 (fitp -> TRUE RPAREN .)
    READ            reduce using rule 97 (fitp -> TRUE RPAREN .)
    PRINT           reduce using rule 97 (fitp -> TRUE RPAREN .)
    IF              reduce using rule 97 (fitp -> TRUE RPAREN .)
    WHILE           reduce using rule 97 (fitp -> TRUE RPAREN .)
    FOR             reduce using rule 97 (fitp -> TRUE RPAREN .)
    MEAN            reduce using rule 97 (fitp -> TRUE RPAREN .)
    ELSE            reduce using rule 97 (fitp -> TRUE RPAREN .)
    VAR             reduce using rule 97 (fitp -> TRUE RPAREN .)
    RBRACE          reduce using rule 97 (fitp -> TRUE RPAREN .)
    RBRACKET        reduce using rule 97 (fitp -> TRUE RPAREN .)


state 229

    (98) fitp -> FALSE RPAREN .

    SEMICOLON       reduce using rule 98 (fitp -> FALSE RPAREN .)
    FUNCTION        reduce using rule 98 (fitp -> FALSE RPAREN .)
    ID              reduce using rule 98 (fitp -> FALSE RPAREN .)
    READ            reduce using rule 98 (fitp -> FALSE RPAREN .)
    PRINT           reduce using rule 98 (fitp -> FALSE RPAREN .)
    IF              reduce using rule 98 (fitp -> FALSE RPAREN .)
    WHILE           reduce using rule 98 (fitp -> FALSE RPAREN .)
    FOR             reduce using rule 98 (fitp -> FALSE RPAREN .)
    MEAN            reduce using rule 98 (fitp -> FALSE RPAREN .)
    ELSE            reduce using rule 98 (fitp -> FALSE RPAREN .)
    VAR             reduce using rule 98 (fitp -> FALSE RPAREN .)
    RBRACE          reduce using rule 98 (fitp -> FALSE RPAREN .)
    RBRACKET        reduce using rule 98 (fitp -> FALSE RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 158 resolved as shift
