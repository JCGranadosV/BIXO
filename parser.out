Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    CHAR
    COLON
    END
    FUNCESP
    GTE
    LTE
    NUMPY
    QUOTE
    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM gotomain ID SEMICOLON decvar modules mainfunction
Rule 2     gotomain -> <empty>
Rule 3     decvar -> VAR decvarp
Rule 4     decvar -> VAR decvarp decvar
Rule 5     decvar -> <empty>
Rule 6     decvarp -> type decvarpp SEMICOLON
Rule 7     decvarpp -> ID COMMA decvarpp
Rule 8     decvarpp -> ID
Rule 9     type -> INT
Rule 10    type -> FLOAT
Rule 11    function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
Rule 12    decfunctype -> type
Rule 13    decfunc -> ID
Rule 14    voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
Rule 15    decfuncmain -> <empty>
Rule 16    mainfunction -> MAIN decfuncmain LPAREN RPAREN LBRACE body RBRACE
Rule 17    modules -> function modules
Rule 18    modules -> voidfunction modules
Rule 19    modules -> function
Rule 20    modules -> voidfunction
Rule 21    body -> decvar statements body
Rule 22    body -> statements body
Rule 23    body -> decvar
Rule 24    body -> <empty>
Rule 25    param -> type ID
Rule 26    param -> type ID COMMA param
Rule 27    param -> <empty>
Rule 28    exp -> texp
Rule 29    exp -> texp OR exp
Rule 30    texp -> gexp
Rule 31    texp -> gexp AND texp
Rule 32    gexp -> mexp
Rule 33    gexp -> mexp gexpp mexp
Rule 34    gexpp -> LT
Rule 35    gexpp -> GT
Rule 36    gexpp -> IFEQUAL
Rule 37    gexpp -> DIFF
Rule 38    mexp -> t
Rule 39    mexp -> mexp PLUS t
Rule 40    mexp -> mexp MINUS t
Rule 41    t -> f
Rule 42    t -> t MULT f
Rule 43    t -> t DIV f
Rule 44    f -> LPAREN exp RPAREN
Rule 45    f -> CTI
Rule 46    f -> CTF
Rule 47    f -> var
Rule 48    f -> call
Rule 49    statements -> assign
Rule 50    statements -> function
Rule 51    statements -> voidfunction
Rule 52    statements -> call
Rule 53    statements -> read
Rule 54    statements -> print
Rule 55    statements -> if
Rule 56    statements -> while
Rule 57    statements -> for
Rule 58    statements -> array
Rule 59    statements -> matrix
Rule 60    statements -> mean
Rule 61    statements -> layers
Rule 62    assign -> var EQUAL exp SEMICOLON
Rule 63    read -> READ LPAREN var RPAREN SEMICOLON
Rule 64    print -> PRINT LPAREN printp SEMICOLON
Rule 65    printp -> exp RPAREN
Rule 66    printp -> exp COMMA printp
Rule 67    var -> ID
Rule 68    call -> ID LPAREN callp RPAREN
Rule 69    callp -> exp COMMA callp
Rule 70    callp -> exp
Rule 71    callp -> <empty>
Rule 72    if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
Rule 73    ifexp -> exp
Rule 74    ifelse -> <empty>
Rule 75    ifelse -> ELSE quadsElse LBRACE body RBRACE
Rule 76    quadsIf -> <empty>
Rule 77    jumpsIf -> <empty>
Rule 78    quadsElse -> <empty>
Rule 79    while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
Rule 80    whilexp -> exp
Rule 81    saveJumps -> <empty>
Rule 82    quadsWhile -> <empty>
Rule 83    jumpsWhile -> <empty>
Rule 84    for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
Rule 85    forp -> RBRACKET
Rule 86    forp -> statements forp
Rule 87    funcesp -> array
Rule 88    funcesp -> mean
Rule 89    funcesp -> layers
Rule 90    funcesp -> sequential
Rule 91    funcesp -> compile
Rule 92    funcesp -> fit
Rule 93    funcesp -> predict
Rule 94    funcesp -> getweights
Rule 95    array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON
Rule 96    arrvalues -> exp
Rule 97    arrvalues -> exp COMMA arrvalues
Rule 98    matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
Rule 99    matvalues -> exp
Rule 100   matvalues -> exp COMMA matvalues
Rule 101   mean -> MEAN LPAREN ID RPAREN SEMICOLON
Rule 102   layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON
Rule 103   sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
Rule 104   sequentialp -> RBRACKET RPAREN
Rule 105   sequentialp -> COMMA layers sequentialp
Rule 106   compile -> sequential DOT COMPILE LPAREN RPAREN
Rule 107   fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
Rule 108   fitp -> TRUE RPAREN
Rule 109   fitp -> FALSE RPAREN
Rule 110   predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
Rule 111   predictp -> INT RBRACKET RPAREN
Rule 112   predictp -> FLOAT RBRACKET RPAREN
Rule 113   getweights -> layers DOT GETWEIGHTS LPAREN RPAREN
Rule 114   empty -> <empty>

Terminals, with rules where they appear

AND                  : 31
ARRAY                : 95
ASSIGN               : 
CHAR                 : 
COLON                : 
COMMA                : 7 26 66 69 97 100 105 107 107 107
COMPILE              : 106
CTF                  : 46
CTI                  : 45 102
DIFF                 : 37
DIV                  : 43
DOT                  : 106 107 110 113
ELSE                 : 75
END                  : 
EPOCHS               : 107
EQUAL                : 62 95 98 102 103 107 107 107 110
FALSE                : 109
FIT                  : 107
FLOAT                : 10 112
FOR                  : 84
FUNCESP              : 
FUNCTION             : 11 14
GETWEIGHTS           : 113
GT                   : 35
GTE                  : 
ID                   : 1 7 8 13 25 26 67 68 95 98 101 103 107 110
IF                   : 72
IFEQUAL              : 36
INT                  : 9 107 111
LAYERS               : 102
LBRACE               : 11 14 16 72 75 79
LBRACKET             : 84 95 95 98 98 98 103 110
LPAREN               : 11 14 16 44 63 64 68 72 79 84 101 102 103 106 107 110 113
LT                   : 34
LTE                  : 
MAIN                 : 16
MATRIX               : 98
MEAN                 : 101
MINUS                : 40
MULT                 : 42
NUMPY                : 
OR                   : 29
PLUS                 : 39
PREDICT              : 110
PRINT                : 64
PROGRAM              : 1
QUOTE                : 
RBRACE               : 11 14 16 72 75 79
RBRACKET             : 85 95 95 98 98 98 104 111 112
READ                 : 63
RETURN               : 11
RPAREN               : 11 14 16 44 63 65 68 72 79 84 101 102 104 106 108 109 111 112 113
SEMICOLON            : 1 6 11 62 63 64 72 79 84 84 95 98 101 102
SEQUENTIAL           : 103
STRING               : 
TRUE                 : 108
UNITS                : 102
VAR                  : 3 4
VERBOSE              : 107
VOID                 : 14
WHILE                : 79
error                : 

Nonterminals, with rules where they appear

array                : 58 87 107 107
arrvalues            : 95 97
assign               : 49
body                 : 11 14 16 21 22 72 75 79
call                 : 48 52
callp                : 68 69
compile              : 91
decfunc              : 11 14
decfuncmain          : 16
decfunctype          : 11
decvar               : 1 4 21 23
decvarp              : 3 4
decvarpp             : 6 7
empty                : 
exp                  : 11 29 44 62 65 66 69 70 73 80 84 84 95 96 97 98 98 99 100
f                    : 41 42 43
fit                  : 92
fitp                 : 107
for                  : 57
forp                 : 84 86
funcesp              : 
function             : 17 19 50
getweights           : 94
gexp                 : 30 31
gexpp                : 33
gotomain             : 1
if                   : 55
ifelse               : 72
ifexp                : 72
jumpsIf              : 72
jumpsWhile           : 79
layers               : 61 89 103 105 113
mainfunction         : 1
matrix               : 59
matvalues            : 98 100
mean                 : 60 88
mexp                 : 32 33 33 39 40
modules              : 1 17 18
param                : 11 14 26
predict              : 93
predictp             : 110
print                : 54
printp               : 64 66
program              : 0
quadsElse            : 75
quadsIf              : 72
quadsWhile           : 79
read                 : 53
saveJumps            : 79
sequential           : 90 106 107 110
sequentialp          : 103 105
statements           : 21 22 84 86
t                    : 38 39 40 42 43
texp                 : 28 29 31
type                 : 6 12 25 26
var                  : 47 62 63 84
voidfunction         : 18 20 51
while                : 56
whilexp              : 79

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM gotomain ID SEMICOLON decvar modules mainfunction

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . gotomain ID SEMICOLON decvar modules mainfunction
    (2) gotomain -> .

    ID              reduce using rule 2 (gotomain -> .)

    gotomain                       shift and go to state 3

state 3

    (1) program -> PROGRAM gotomain . ID SEMICOLON decvar modules mainfunction

    ID              shift and go to state 4


state 4

    (1) program -> PROGRAM gotomain ID . SEMICOLON decvar modules mainfunction

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM gotomain ID SEMICOLON . decvar modules mainfunction
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .

    VAR             shift and go to state 7
    FUNCTION        reduce using rule 5 (decvar -> .)

    decvar                         shift and go to state 6

state 6

    (1) program -> PROGRAM gotomain ID SEMICOLON decvar . modules mainfunction
    (17) modules -> . function modules
    (18) modules -> . voidfunction modules
    (19) modules -> . function
    (20) modules -> . voidfunction
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE

    FUNCTION        shift and go to state 11

    modules                        shift and go to state 8
    function                       shift and go to state 9
    voidfunction                   shift and go to state 10

state 7

    (3) decvar -> VAR . decvarp
    (4) decvar -> VAR . decvarp decvar
    (6) decvarp -> . type decvarpp SEMICOLON
    (9) type -> . INT
    (10) type -> . FLOAT

    INT             shift and go to state 14
    FLOAT           shift and go to state 15

    decvarp                        shift and go to state 12
    type                           shift and go to state 13

state 8

    (1) program -> PROGRAM gotomain ID SEMICOLON decvar modules . mainfunction
    (16) mainfunction -> . MAIN decfuncmain LPAREN RPAREN LBRACE body RBRACE

    MAIN            shift and go to state 17

    mainfunction                   shift and go to state 16

state 9

    (17) modules -> function . modules
    (19) modules -> function .
    (17) modules -> . function modules
    (18) modules -> . voidfunction modules
    (19) modules -> . function
    (20) modules -> . voidfunction
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE

    MAIN            reduce using rule 19 (modules -> function .)
    FUNCTION        shift and go to state 11

    function                       shift and go to state 9
    modules                        shift and go to state 18
    voidfunction                   shift and go to state 10

state 10

    (18) modules -> voidfunction . modules
    (20) modules -> voidfunction .
    (17) modules -> . function modules
    (18) modules -> . voidfunction modules
    (19) modules -> . function
    (20) modules -> . voidfunction
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE

    MAIN            reduce using rule 20 (modules -> voidfunction .)
    FUNCTION        shift and go to state 11

    voidfunction                   shift and go to state 10
    modules                        shift and go to state 19
    function                       shift and go to state 9

state 11

    (11) function -> FUNCTION . decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> FUNCTION . VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (12) decfunctype -> . type
    (9) type -> . INT
    (10) type -> . FLOAT

    VOID            shift and go to state 21
    INT             shift and go to state 14
    FLOAT           shift and go to state 15

    decfunctype                    shift and go to state 20
    type                           shift and go to state 22

state 12

    (3) decvar -> VAR decvarp .
    (4) decvar -> VAR decvarp . decvar
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .

  ! reduce/reduce conflict for FUNCTION resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for ID resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for READ resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for PRINT resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for IF resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for WHILE resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for FOR resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for ARRAY resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for MATRIX resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for MEAN resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for LAYERS resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for RBRACE resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for RETURN resolved using rule 3 (decvar -> VAR decvarp .)
    FUNCTION        reduce using rule 3 (decvar -> VAR decvarp .)
    ID              reduce using rule 3 (decvar -> VAR decvarp .)
    READ            reduce using rule 3 (decvar -> VAR decvarp .)
    PRINT           reduce using rule 3 (decvar -> VAR decvarp .)
    IF              reduce using rule 3 (decvar -> VAR decvarp .)
    WHILE           reduce using rule 3 (decvar -> VAR decvarp .)
    FOR             reduce using rule 3 (decvar -> VAR decvarp .)
    ARRAY           reduce using rule 3 (decvar -> VAR decvarp .)
    MATRIX          reduce using rule 3 (decvar -> VAR decvarp .)
    MEAN            reduce using rule 3 (decvar -> VAR decvarp .)
    LAYERS          reduce using rule 3 (decvar -> VAR decvarp .)
    RBRACE          reduce using rule 3 (decvar -> VAR decvarp .)
    RETURN          reduce using rule 3 (decvar -> VAR decvarp .)
    VAR             shift and go to state 7

  ! FUNCTION        [ reduce using rule 5 (decvar -> .) ]
  ! ID              [ reduce using rule 5 (decvar -> .) ]
  ! READ            [ reduce using rule 5 (decvar -> .) ]
  ! PRINT           [ reduce using rule 5 (decvar -> .) ]
  ! IF              [ reduce using rule 5 (decvar -> .) ]
  ! WHILE           [ reduce using rule 5 (decvar -> .) ]
  ! FOR             [ reduce using rule 5 (decvar -> .) ]
  ! ARRAY           [ reduce using rule 5 (decvar -> .) ]
  ! MATRIX          [ reduce using rule 5 (decvar -> .) ]
  ! MEAN            [ reduce using rule 5 (decvar -> .) ]
  ! LAYERS          [ reduce using rule 5 (decvar -> .) ]
  ! RBRACE          [ reduce using rule 5 (decvar -> .) ]
  ! RETURN          [ reduce using rule 5 (decvar -> .) ]

    decvar                         shift and go to state 23

state 13

    (6) decvarp -> type . decvarpp SEMICOLON
    (7) decvarpp -> . ID COMMA decvarpp
    (8) decvarpp -> . ID

    ID              shift and go to state 25

    decvarpp                       shift and go to state 24

state 14

    (9) type -> INT .

    ID              reduce using rule 9 (type -> INT .)


state 15

    (10) type -> FLOAT .

    ID              reduce using rule 10 (type -> FLOAT .)


state 16

    (1) program -> PROGRAM gotomain ID SEMICOLON decvar modules mainfunction .

    $end            reduce using rule 1 (program -> PROGRAM gotomain ID SEMICOLON decvar modules mainfunction .)


state 17

    (16) mainfunction -> MAIN . decfuncmain LPAREN RPAREN LBRACE body RBRACE
    (15) decfuncmain -> .

    LPAREN          reduce using rule 15 (decfuncmain -> .)

    decfuncmain                    shift and go to state 26

state 18

    (17) modules -> function modules .

    MAIN            reduce using rule 17 (modules -> function modules .)


state 19

    (18) modules -> voidfunction modules .

    MAIN            reduce using rule 18 (modules -> voidfunction modules .)


state 20

    (11) function -> FUNCTION decfunctype . decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (13) decfunc -> . ID

    ID              shift and go to state 28

    decfunc                        shift and go to state 27

state 21

    (14) voidfunction -> FUNCTION VOID . decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) decfunc -> . ID

    ID              shift and go to state 28

    decfunc                        shift and go to state 29

state 22

    (12) decfunctype -> type .

    ID              reduce using rule 12 (decfunctype -> type .)


state 23

    (4) decvar -> VAR decvarp decvar .

    FUNCTION        reduce using rule 4 (decvar -> VAR decvarp decvar .)
    ID              reduce using rule 4 (decvar -> VAR decvarp decvar .)
    READ            reduce using rule 4 (decvar -> VAR decvarp decvar .)
    PRINT           reduce using rule 4 (decvar -> VAR decvarp decvar .)
    IF              reduce using rule 4 (decvar -> VAR decvarp decvar .)
    WHILE           reduce using rule 4 (decvar -> VAR decvarp decvar .)
    FOR             reduce using rule 4 (decvar -> VAR decvarp decvar .)
    ARRAY           reduce using rule 4 (decvar -> VAR decvarp decvar .)
    MATRIX          reduce using rule 4 (decvar -> VAR decvarp decvar .)
    MEAN            reduce using rule 4 (decvar -> VAR decvarp decvar .)
    LAYERS          reduce using rule 4 (decvar -> VAR decvarp decvar .)
    RBRACE          reduce using rule 4 (decvar -> VAR decvarp decvar .)
    RETURN          reduce using rule 4 (decvar -> VAR decvarp decvar .)


state 24

    (6) decvarp -> type decvarpp . SEMICOLON

    SEMICOLON       shift and go to state 30


state 25

    (7) decvarpp -> ID . COMMA decvarpp
    (8) decvarpp -> ID .

    COMMA           shift and go to state 31
    SEMICOLON       reduce using rule 8 (decvarpp -> ID .)


state 26

    (16) mainfunction -> MAIN decfuncmain . LPAREN RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 32


state 27

    (11) function -> FUNCTION decfunctype decfunc . LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE

    LPAREN          shift and go to state 33


state 28

    (13) decfunc -> ID .

    LPAREN          reduce using rule 13 (decfunc -> ID .)


state 29

    (14) voidfunction -> FUNCTION VOID decfunc . LPAREN param RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 34


state 30

    (6) decvarp -> type decvarpp SEMICOLON .

    VAR             reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    FUNCTION        reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    ID              reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    READ            reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    PRINT           reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    IF              reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    WHILE           reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    FOR             reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    ARRAY           reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    MATRIX          reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    MEAN            reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    LAYERS          reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    RBRACE          reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    RETURN          reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)


state 31

    (7) decvarpp -> ID COMMA . decvarpp
    (7) decvarpp -> . ID COMMA decvarpp
    (8) decvarpp -> . ID

    ID              shift and go to state 25

    decvarpp                       shift and go to state 35

state 32

    (16) mainfunction -> MAIN decfuncmain LPAREN . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 36


state 33

    (11) function -> FUNCTION decfunctype decfunc LPAREN . param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (25) param -> . type ID
    (26) param -> . type ID COMMA param
    (27) param -> .
    (9) type -> . INT
    (10) type -> . FLOAT

    RPAREN          reduce using rule 27 (param -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15

    param                          shift and go to state 37
    type                           shift and go to state 38

state 34

    (14) voidfunction -> FUNCTION VOID decfunc LPAREN . param RPAREN LBRACE body RBRACE
    (25) param -> . type ID
    (26) param -> . type ID COMMA param
    (27) param -> .
    (9) type -> . INT
    (10) type -> . FLOAT

    RPAREN          reduce using rule 27 (param -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15

    param                          shift and go to state 39
    type                           shift and go to state 38

state 35

    (7) decvarpp -> ID COMMA decvarpp .

    SEMICOLON       reduce using rule 7 (decvarpp -> ID COMMA decvarpp .)


state 36

    (16) mainfunction -> MAIN decfuncmain LPAREN RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 40


state 37

    (11) function -> FUNCTION decfunctype decfunc LPAREN param . RPAREN LBRACE body RETURN exp SEMICOLON RBRACE

    RPAREN          shift and go to state 41


state 38

    (25) param -> type . ID
    (26) param -> type . ID COMMA param

    ID              shift and go to state 42


state 39

    (14) voidfunction -> FUNCTION VOID decfunc LPAREN param . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 43


state 40

    (16) mainfunction -> MAIN decfuncmain LPAREN RPAREN LBRACE . body RBRACE
    (21) body -> . decvar statements body
    (22) body -> . statements body
    (23) body -> . decvar
    (24) body -> .
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .
    (49) statements -> . assign
    (50) statements -> . function
    (51) statements -> . voidfunction
    (52) statements -> . call
    (53) statements -> . read
    (54) statements -> . print
    (55) statements -> . if
    (56) statements -> . while
    (57) statements -> . for
    (58) statements -> . array
    (59) statements -> . matrix
    (60) statements -> . mean
    (61) statements -> . layers
    (62) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (68) call -> . ID LPAREN callp RPAREN
    (63) read -> . READ LPAREN var RPAREN SEMICOLON
    (64) print -> . PRINT LPAREN printp SEMICOLON
    (72) if -> . IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
    (79) while -> . WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (84) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (95) array -> . ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON
    (98) matrix -> . MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
    (101) mean -> . MEAN LPAREN ID RPAREN SEMICOLON
    (102) layers -> . LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON
    (67) var -> . ID

  ! reduce/reduce conflict for RBRACE resolved using rule 5 (decvar -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for MATRIX resolved as shift
  ! shift/reduce conflict for MEAN resolved as shift
  ! shift/reduce conflict for LAYERS resolved as shift
    VAR             shift and go to state 7
    RBRACE          reduce using rule 5 (decvar -> .)
    FUNCTION        shift and go to state 11
    ID              shift and go to state 61
    READ            shift and go to state 62
    PRINT           shift and go to state 63
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    ARRAY           shift and go to state 67
    MATRIX          shift and go to state 68
    MEAN            shift and go to state 69
    LAYERS          shift and go to state 70

  ! RBRACE          [ reduce using rule 24 (body -> .) ]
  ! FUNCTION        [ reduce using rule 5 (decvar -> .) ]
  ! ID              [ reduce using rule 5 (decvar -> .) ]
  ! READ            [ reduce using rule 5 (decvar -> .) ]
  ! PRINT           [ reduce using rule 5 (decvar -> .) ]
  ! IF              [ reduce using rule 5 (decvar -> .) ]
  ! WHILE           [ reduce using rule 5 (decvar -> .) ]
  ! FOR             [ reduce using rule 5 (decvar -> .) ]
  ! ARRAY           [ reduce using rule 5 (decvar -> .) ]
  ! MATRIX          [ reduce using rule 5 (decvar -> .) ]
  ! MEAN            [ reduce using rule 5 (decvar -> .) ]
  ! LAYERS          [ reduce using rule 5 (decvar -> .) ]

    body                           shift and go to state 44
    decvar                         shift and go to state 45
    statements                     shift and go to state 46
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    array                          shift and go to state 56
    matrix                         shift and go to state 57
    mean                           shift and go to state 58
    layers                         shift and go to state 59
    var                            shift and go to state 60

state 41

    (11) function -> FUNCTION decfunctype decfunc LPAREN param RPAREN . LBRACE body RETURN exp SEMICOLON RBRACE

    LBRACE          shift and go to state 71


state 42

    (25) param -> type ID .
    (26) param -> type ID . COMMA param

    RPAREN          reduce using rule 25 (param -> type ID .)
    COMMA           shift and go to state 72


state 43

    (14) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 73


state 44

    (16) mainfunction -> MAIN decfuncmain LPAREN RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 74


state 45

    (21) body -> decvar . statements body
    (23) body -> decvar .
    (49) statements -> . assign
    (50) statements -> . function
    (51) statements -> . voidfunction
    (52) statements -> . call
    (53) statements -> . read
    (54) statements -> . print
    (55) statements -> . if
    (56) statements -> . while
    (57) statements -> . for
    (58) statements -> . array
    (59) statements -> . matrix
    (60) statements -> . mean
    (61) statements -> . layers
    (62) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (68) call -> . ID LPAREN callp RPAREN
    (63) read -> . READ LPAREN var RPAREN SEMICOLON
    (64) print -> . PRINT LPAREN printp SEMICOLON
    (72) if -> . IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
    (79) while -> . WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (84) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (95) array -> . ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON
    (98) matrix -> . MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
    (101) mean -> . MEAN LPAREN ID RPAREN SEMICOLON
    (102) layers -> . LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON
    (67) var -> . ID

    RBRACE          reduce using rule 23 (body -> decvar .)
    RETURN          reduce using rule 23 (body -> decvar .)
    FUNCTION        shift and go to state 11
    ID              shift and go to state 61
    READ            shift and go to state 62
    PRINT           shift and go to state 63
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    ARRAY           shift and go to state 67
    MATRIX          shift and go to state 68
    MEAN            shift and go to state 69
    LAYERS          shift and go to state 70

    statements                     shift and go to state 75
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    array                          shift and go to state 56
    matrix                         shift and go to state 57
    mean                           shift and go to state 58
    layers                         shift and go to state 59
    var                            shift and go to state 60

state 46

    (22) body -> statements . body
    (21) body -> . decvar statements body
    (22) body -> . statements body
    (23) body -> . decvar
    (24) body -> .
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .
    (49) statements -> . assign
    (50) statements -> . function
    (51) statements -> . voidfunction
    (52) statements -> . call
    (53) statements -> . read
    (54) statements -> . print
    (55) statements -> . if
    (56) statements -> . while
    (57) statements -> . for
    (58) statements -> . array
    (59) statements -> . matrix
    (60) statements -> . mean
    (61) statements -> . layers
    (62) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (68) call -> . ID LPAREN callp RPAREN
    (63) read -> . READ LPAREN var RPAREN SEMICOLON
    (64) print -> . PRINT LPAREN printp SEMICOLON
    (72) if -> . IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
    (79) while -> . WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (84) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (95) array -> . ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON
    (98) matrix -> . MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
    (101) mean -> . MEAN LPAREN ID RPAREN SEMICOLON
    (102) layers -> . LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON
    (67) var -> . ID

  ! reduce/reduce conflict for RBRACE resolved using rule 5 (decvar -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 5 (decvar -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for MATRIX resolved as shift
  ! shift/reduce conflict for MEAN resolved as shift
  ! shift/reduce conflict for LAYERS resolved as shift
    VAR             shift and go to state 7
    RBRACE          reduce using rule 5 (decvar -> .)
    RETURN          reduce using rule 5 (decvar -> .)
    FUNCTION        shift and go to state 11
    ID              shift and go to state 61
    READ            shift and go to state 62
    PRINT           shift and go to state 63
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    ARRAY           shift and go to state 67
    MATRIX          shift and go to state 68
    MEAN            shift and go to state 69
    LAYERS          shift and go to state 70

  ! RBRACE          [ reduce using rule 24 (body -> .) ]
  ! RETURN          [ reduce using rule 24 (body -> .) ]
  ! FUNCTION        [ reduce using rule 5 (decvar -> .) ]
  ! ID              [ reduce using rule 5 (decvar -> .) ]
  ! READ            [ reduce using rule 5 (decvar -> .) ]
  ! PRINT           [ reduce using rule 5 (decvar -> .) ]
  ! IF              [ reduce using rule 5 (decvar -> .) ]
  ! WHILE           [ reduce using rule 5 (decvar -> .) ]
  ! FOR             [ reduce using rule 5 (decvar -> .) ]
  ! ARRAY           [ reduce using rule 5 (decvar -> .) ]
  ! MATRIX          [ reduce using rule 5 (decvar -> .) ]
  ! MEAN            [ reduce using rule 5 (decvar -> .) ]
  ! LAYERS          [ reduce using rule 5 (decvar -> .) ]

    statements                     shift and go to state 46
    body                           shift and go to state 76
    decvar                         shift and go to state 45
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    array                          shift and go to state 56
    matrix                         shift and go to state 57
    mean                           shift and go to state 58
    layers                         shift and go to state 59
    var                            shift and go to state 60

state 47

    (49) statements -> assign .

    VAR             reduce using rule 49 (statements -> assign .)
    FUNCTION        reduce using rule 49 (statements -> assign .)
    ID              reduce using rule 49 (statements -> assign .)
    READ            reduce using rule 49 (statements -> assign .)
    PRINT           reduce using rule 49 (statements -> assign .)
    IF              reduce using rule 49 (statements -> assign .)
    WHILE           reduce using rule 49 (statements -> assign .)
    FOR             reduce using rule 49 (statements -> assign .)
    ARRAY           reduce using rule 49 (statements -> assign .)
    MATRIX          reduce using rule 49 (statements -> assign .)
    MEAN            reduce using rule 49 (statements -> assign .)
    LAYERS          reduce using rule 49 (statements -> assign .)
    RBRACE          reduce using rule 49 (statements -> assign .)
    RETURN          reduce using rule 49 (statements -> assign .)
    RBRACKET        reduce using rule 49 (statements -> assign .)


state 48

    (50) statements -> function .

    VAR             reduce using rule 50 (statements -> function .)
    FUNCTION        reduce using rule 50 (statements -> function .)
    ID              reduce using rule 50 (statements -> function .)
    READ            reduce using rule 50 (statements -> function .)
    PRINT           reduce using rule 50 (statements -> function .)
    IF              reduce using rule 50 (statements -> function .)
    WHILE           reduce using rule 50 (statements -> function .)
    FOR             reduce using rule 50 (statements -> function .)
    ARRAY           reduce using rule 50 (statements -> function .)
    MATRIX          reduce using rule 50 (statements -> function .)
    MEAN            reduce using rule 50 (statements -> function .)
    LAYERS          reduce using rule 50 (statements -> function .)
    RBRACE          reduce using rule 50 (statements -> function .)
    RETURN          reduce using rule 50 (statements -> function .)
    RBRACKET        reduce using rule 50 (statements -> function .)


state 49

    (51) statements -> voidfunction .

    VAR             reduce using rule 51 (statements -> voidfunction .)
    FUNCTION        reduce using rule 51 (statements -> voidfunction .)
    ID              reduce using rule 51 (statements -> voidfunction .)
    READ            reduce using rule 51 (statements -> voidfunction .)
    PRINT           reduce using rule 51 (statements -> voidfunction .)
    IF              reduce using rule 51 (statements -> voidfunction .)
    WHILE           reduce using rule 51 (statements -> voidfunction .)
    FOR             reduce using rule 51 (statements -> voidfunction .)
    ARRAY           reduce using rule 51 (statements -> voidfunction .)
    MATRIX          reduce using rule 51 (statements -> voidfunction .)
    MEAN            reduce using rule 51 (statements -> voidfunction .)
    LAYERS          reduce using rule 51 (statements -> voidfunction .)
    RBRACE          reduce using rule 51 (statements -> voidfunction .)
    RETURN          reduce using rule 51 (statements -> voidfunction .)
    RBRACKET        reduce using rule 51 (statements -> voidfunction .)


state 50

    (52) statements -> call .

    VAR             reduce using rule 52 (statements -> call .)
    FUNCTION        reduce using rule 52 (statements -> call .)
    ID              reduce using rule 52 (statements -> call .)
    READ            reduce using rule 52 (statements -> call .)
    PRINT           reduce using rule 52 (statements -> call .)
    IF              reduce using rule 52 (statements -> call .)
    WHILE           reduce using rule 52 (statements -> call .)
    FOR             reduce using rule 52 (statements -> call .)
    ARRAY           reduce using rule 52 (statements -> call .)
    MATRIX          reduce using rule 52 (statements -> call .)
    MEAN            reduce using rule 52 (statements -> call .)
    LAYERS          reduce using rule 52 (statements -> call .)
    RBRACE          reduce using rule 52 (statements -> call .)
    RETURN          reduce using rule 52 (statements -> call .)
    RBRACKET        reduce using rule 52 (statements -> call .)


state 51

    (53) statements -> read .

    VAR             reduce using rule 53 (statements -> read .)
    FUNCTION        reduce using rule 53 (statements -> read .)
    ID              reduce using rule 53 (statements -> read .)
    READ            reduce using rule 53 (statements -> read .)
    PRINT           reduce using rule 53 (statements -> read .)
    IF              reduce using rule 53 (statements -> read .)
    WHILE           reduce using rule 53 (statements -> read .)
    FOR             reduce using rule 53 (statements -> read .)
    ARRAY           reduce using rule 53 (statements -> read .)
    MATRIX          reduce using rule 53 (statements -> read .)
    MEAN            reduce using rule 53 (statements -> read .)
    LAYERS          reduce using rule 53 (statements -> read .)
    RBRACE          reduce using rule 53 (statements -> read .)
    RETURN          reduce using rule 53 (statements -> read .)
    RBRACKET        reduce using rule 53 (statements -> read .)


state 52

    (54) statements -> print .

    VAR             reduce using rule 54 (statements -> print .)
    FUNCTION        reduce using rule 54 (statements -> print .)
    ID              reduce using rule 54 (statements -> print .)
    READ            reduce using rule 54 (statements -> print .)
    PRINT           reduce using rule 54 (statements -> print .)
    IF              reduce using rule 54 (statements -> print .)
    WHILE           reduce using rule 54 (statements -> print .)
    FOR             reduce using rule 54 (statements -> print .)
    ARRAY           reduce using rule 54 (statements -> print .)
    MATRIX          reduce using rule 54 (statements -> print .)
    MEAN            reduce using rule 54 (statements -> print .)
    LAYERS          reduce using rule 54 (statements -> print .)
    RBRACE          reduce using rule 54 (statements -> print .)
    RETURN          reduce using rule 54 (statements -> print .)
    RBRACKET        reduce using rule 54 (statements -> print .)


state 53

    (55) statements -> if .

    VAR             reduce using rule 55 (statements -> if .)
    FUNCTION        reduce using rule 55 (statements -> if .)
    ID              reduce using rule 55 (statements -> if .)
    READ            reduce using rule 55 (statements -> if .)
    PRINT           reduce using rule 55 (statements -> if .)
    IF              reduce using rule 55 (statements -> if .)
    WHILE           reduce using rule 55 (statements -> if .)
    FOR             reduce using rule 55 (statements -> if .)
    ARRAY           reduce using rule 55 (statements -> if .)
    MATRIX          reduce using rule 55 (statements -> if .)
    MEAN            reduce using rule 55 (statements -> if .)
    LAYERS          reduce using rule 55 (statements -> if .)
    RBRACE          reduce using rule 55 (statements -> if .)
    RETURN          reduce using rule 55 (statements -> if .)
    RBRACKET        reduce using rule 55 (statements -> if .)


state 54

    (56) statements -> while .

    VAR             reduce using rule 56 (statements -> while .)
    FUNCTION        reduce using rule 56 (statements -> while .)
    ID              reduce using rule 56 (statements -> while .)
    READ            reduce using rule 56 (statements -> while .)
    PRINT           reduce using rule 56 (statements -> while .)
    IF              reduce using rule 56 (statements -> while .)
    WHILE           reduce using rule 56 (statements -> while .)
    FOR             reduce using rule 56 (statements -> while .)
    ARRAY           reduce using rule 56 (statements -> while .)
    MATRIX          reduce using rule 56 (statements -> while .)
    MEAN            reduce using rule 56 (statements -> while .)
    LAYERS          reduce using rule 56 (statements -> while .)
    RBRACE          reduce using rule 56 (statements -> while .)
    RETURN          reduce using rule 56 (statements -> while .)
    RBRACKET        reduce using rule 56 (statements -> while .)


state 55

    (57) statements -> for .

    VAR             reduce using rule 57 (statements -> for .)
    FUNCTION        reduce using rule 57 (statements -> for .)
    ID              reduce using rule 57 (statements -> for .)
    READ            reduce using rule 57 (statements -> for .)
    PRINT           reduce using rule 57 (statements -> for .)
    IF              reduce using rule 57 (statements -> for .)
    WHILE           reduce using rule 57 (statements -> for .)
    FOR             reduce using rule 57 (statements -> for .)
    ARRAY           reduce using rule 57 (statements -> for .)
    MATRIX          reduce using rule 57 (statements -> for .)
    MEAN            reduce using rule 57 (statements -> for .)
    LAYERS          reduce using rule 57 (statements -> for .)
    RBRACE          reduce using rule 57 (statements -> for .)
    RETURN          reduce using rule 57 (statements -> for .)
    RBRACKET        reduce using rule 57 (statements -> for .)


state 56

    (58) statements -> array .

    VAR             reduce using rule 58 (statements -> array .)
    FUNCTION        reduce using rule 58 (statements -> array .)
    ID              reduce using rule 58 (statements -> array .)
    READ            reduce using rule 58 (statements -> array .)
    PRINT           reduce using rule 58 (statements -> array .)
    IF              reduce using rule 58 (statements -> array .)
    WHILE           reduce using rule 58 (statements -> array .)
    FOR             reduce using rule 58 (statements -> array .)
    ARRAY           reduce using rule 58 (statements -> array .)
    MATRIX          reduce using rule 58 (statements -> array .)
    MEAN            reduce using rule 58 (statements -> array .)
    LAYERS          reduce using rule 58 (statements -> array .)
    RBRACE          reduce using rule 58 (statements -> array .)
    RETURN          reduce using rule 58 (statements -> array .)
    RBRACKET        reduce using rule 58 (statements -> array .)


state 57

    (59) statements -> matrix .

    VAR             reduce using rule 59 (statements -> matrix .)
    FUNCTION        reduce using rule 59 (statements -> matrix .)
    ID              reduce using rule 59 (statements -> matrix .)
    READ            reduce using rule 59 (statements -> matrix .)
    PRINT           reduce using rule 59 (statements -> matrix .)
    IF              reduce using rule 59 (statements -> matrix .)
    WHILE           reduce using rule 59 (statements -> matrix .)
    FOR             reduce using rule 59 (statements -> matrix .)
    ARRAY           reduce using rule 59 (statements -> matrix .)
    MATRIX          reduce using rule 59 (statements -> matrix .)
    MEAN            reduce using rule 59 (statements -> matrix .)
    LAYERS          reduce using rule 59 (statements -> matrix .)
    RBRACE          reduce using rule 59 (statements -> matrix .)
    RETURN          reduce using rule 59 (statements -> matrix .)
    RBRACKET        reduce using rule 59 (statements -> matrix .)


state 58

    (60) statements -> mean .

    VAR             reduce using rule 60 (statements -> mean .)
    FUNCTION        reduce using rule 60 (statements -> mean .)
    ID              reduce using rule 60 (statements -> mean .)
    READ            reduce using rule 60 (statements -> mean .)
    PRINT           reduce using rule 60 (statements -> mean .)
    IF              reduce using rule 60 (statements -> mean .)
    WHILE           reduce using rule 60 (statements -> mean .)
    FOR             reduce using rule 60 (statements -> mean .)
    ARRAY           reduce using rule 60 (statements -> mean .)
    MATRIX          reduce using rule 60 (statements -> mean .)
    MEAN            reduce using rule 60 (statements -> mean .)
    LAYERS          reduce using rule 60 (statements -> mean .)
    RBRACE          reduce using rule 60 (statements -> mean .)
    RETURN          reduce using rule 60 (statements -> mean .)
    RBRACKET        reduce using rule 60 (statements -> mean .)


state 59

    (61) statements -> layers .

    VAR             reduce using rule 61 (statements -> layers .)
    FUNCTION        reduce using rule 61 (statements -> layers .)
    ID              reduce using rule 61 (statements -> layers .)
    READ            reduce using rule 61 (statements -> layers .)
    PRINT           reduce using rule 61 (statements -> layers .)
    IF              reduce using rule 61 (statements -> layers .)
    WHILE           reduce using rule 61 (statements -> layers .)
    FOR             reduce using rule 61 (statements -> layers .)
    ARRAY           reduce using rule 61 (statements -> layers .)
    MATRIX          reduce using rule 61 (statements -> layers .)
    MEAN            reduce using rule 61 (statements -> layers .)
    LAYERS          reduce using rule 61 (statements -> layers .)
    RBRACE          reduce using rule 61 (statements -> layers .)
    RETURN          reduce using rule 61 (statements -> layers .)
    RBRACKET        reduce using rule 61 (statements -> layers .)


state 60

    (62) assign -> var . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 77


state 61

    (68) call -> ID . LPAREN callp RPAREN
    (67) var -> ID .

    LPAREN          shift and go to state 78
    EQUAL           reduce using rule 67 (var -> ID .)


state 62

    (63) read -> READ . LPAREN var RPAREN SEMICOLON

    LPAREN          shift and go to state 79


state 63

    (64) print -> PRINT . LPAREN printp SEMICOLON

    LPAREN          shift and go to state 80


state 64

    (72) if -> IF . LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON

    LPAREN          shift and go to state 81


state 65

    (79) while -> WHILE . saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (81) saveJumps -> .

    LPAREN          reduce using rule 81 (saveJumps -> .)

    saveJumps                      shift and go to state 82

state 66

    (84) for -> FOR . LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp

    LPAREN          shift and go to state 83


state 67

    (95) array -> ARRAY . ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON

    ID              shift and go to state 84


state 68

    (98) matrix -> MATRIX . ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON

    ID              shift and go to state 85


state 69

    (101) mean -> MEAN . LPAREN ID RPAREN SEMICOLON

    LPAREN          shift and go to state 86


state 70

    (102) layers -> LAYERS . LPAREN UNITS EQUAL CTI RPAREN SEMICOLON

    LPAREN          shift and go to state 87


state 71

    (11) function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE . body RETURN exp SEMICOLON RBRACE
    (21) body -> . decvar statements body
    (22) body -> . statements body
    (23) body -> . decvar
    (24) body -> .
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .
    (49) statements -> . assign
    (50) statements -> . function
    (51) statements -> . voidfunction
    (52) statements -> . call
    (53) statements -> . read
    (54) statements -> . print
    (55) statements -> . if
    (56) statements -> . while
    (57) statements -> . for
    (58) statements -> . array
    (59) statements -> . matrix
    (60) statements -> . mean
    (61) statements -> . layers
    (62) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (68) call -> . ID LPAREN callp RPAREN
    (63) read -> . READ LPAREN var RPAREN SEMICOLON
    (64) print -> . PRINT LPAREN printp SEMICOLON
    (72) if -> . IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
    (79) while -> . WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (84) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (95) array -> . ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON
    (98) matrix -> . MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
    (101) mean -> . MEAN LPAREN ID RPAREN SEMICOLON
    (102) layers -> . LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON
    (67) var -> . ID

  ! reduce/reduce conflict for RETURN resolved using rule 5 (decvar -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for MATRIX resolved as shift
  ! shift/reduce conflict for MEAN resolved as shift
  ! shift/reduce conflict for LAYERS resolved as shift
    VAR             shift and go to state 7
    RETURN          reduce using rule 5 (decvar -> .)
    FUNCTION        shift and go to state 11
    ID              shift and go to state 61
    READ            shift and go to state 62
    PRINT           shift and go to state 63
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    ARRAY           shift and go to state 67
    MATRIX          shift and go to state 68
    MEAN            shift and go to state 69
    LAYERS          shift and go to state 70

  ! RETURN          [ reduce using rule 24 (body -> .) ]
  ! FUNCTION        [ reduce using rule 5 (decvar -> .) ]
  ! ID              [ reduce using rule 5 (decvar -> .) ]
  ! READ            [ reduce using rule 5 (decvar -> .) ]
  ! PRINT           [ reduce using rule 5 (decvar -> .) ]
  ! IF              [ reduce using rule 5 (decvar -> .) ]
  ! WHILE           [ reduce using rule 5 (decvar -> .) ]
  ! FOR             [ reduce using rule 5 (decvar -> .) ]
  ! ARRAY           [ reduce using rule 5 (decvar -> .) ]
  ! MATRIX          [ reduce using rule 5 (decvar -> .) ]
  ! MEAN            [ reduce using rule 5 (decvar -> .) ]
  ! LAYERS          [ reduce using rule 5 (decvar -> .) ]

    body                           shift and go to state 88
    decvar                         shift and go to state 45
    statements                     shift and go to state 46
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    array                          shift and go to state 56
    matrix                         shift and go to state 57
    mean                           shift and go to state 58
    layers                         shift and go to state 59
    var                            shift and go to state 60

state 72

    (26) param -> type ID COMMA . param
    (25) param -> . type ID
    (26) param -> . type ID COMMA param
    (27) param -> .
    (9) type -> . INT
    (10) type -> . FLOAT

    RPAREN          reduce using rule 27 (param -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15

    type                           shift and go to state 38
    param                          shift and go to state 89

state 73

    (14) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE . body RBRACE
    (21) body -> . decvar statements body
    (22) body -> . statements body
    (23) body -> . decvar
    (24) body -> .
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .
    (49) statements -> . assign
    (50) statements -> . function
    (51) statements -> . voidfunction
    (52) statements -> . call
    (53) statements -> . read
    (54) statements -> . print
    (55) statements -> . if
    (56) statements -> . while
    (57) statements -> . for
    (58) statements -> . array
    (59) statements -> . matrix
    (60) statements -> . mean
    (61) statements -> . layers
    (62) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (68) call -> . ID LPAREN callp RPAREN
    (63) read -> . READ LPAREN var RPAREN SEMICOLON
    (64) print -> . PRINT LPAREN printp SEMICOLON
    (72) if -> . IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
    (79) while -> . WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (84) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (95) array -> . ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON
    (98) matrix -> . MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
    (101) mean -> . MEAN LPAREN ID RPAREN SEMICOLON
    (102) layers -> . LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON
    (67) var -> . ID

  ! reduce/reduce conflict for RBRACE resolved using rule 5 (decvar -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for MATRIX resolved as shift
  ! shift/reduce conflict for MEAN resolved as shift
  ! shift/reduce conflict for LAYERS resolved as shift
    VAR             shift and go to state 7
    RBRACE          reduce using rule 5 (decvar -> .)
    FUNCTION        shift and go to state 11
    ID              shift and go to state 61
    READ            shift and go to state 62
    PRINT           shift and go to state 63
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    ARRAY           shift and go to state 67
    MATRIX          shift and go to state 68
    MEAN            shift and go to state 69
    LAYERS          shift and go to state 70

  ! RBRACE          [ reduce using rule 24 (body -> .) ]
  ! FUNCTION        [ reduce using rule 5 (decvar -> .) ]
  ! ID              [ reduce using rule 5 (decvar -> .) ]
  ! READ            [ reduce using rule 5 (decvar -> .) ]
  ! PRINT           [ reduce using rule 5 (decvar -> .) ]
  ! IF              [ reduce using rule 5 (decvar -> .) ]
  ! WHILE           [ reduce using rule 5 (decvar -> .) ]
  ! FOR             [ reduce using rule 5 (decvar -> .) ]
  ! ARRAY           [ reduce using rule 5 (decvar -> .) ]
  ! MATRIX          [ reduce using rule 5 (decvar -> .) ]
  ! MEAN            [ reduce using rule 5 (decvar -> .) ]
  ! LAYERS          [ reduce using rule 5 (decvar -> .) ]

    body                           shift and go to state 90
    decvar                         shift and go to state 45
    statements                     shift and go to state 46
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    array                          shift and go to state 56
    matrix                         shift and go to state 57
    mean                           shift and go to state 58
    layers                         shift and go to state 59
    var                            shift and go to state 60

state 74

    (16) mainfunction -> MAIN decfuncmain LPAREN RPAREN LBRACE body RBRACE .

    $end            reduce using rule 16 (mainfunction -> MAIN decfuncmain LPAREN RPAREN LBRACE body RBRACE .)


state 75

    (21) body -> decvar statements . body
    (21) body -> . decvar statements body
    (22) body -> . statements body
    (23) body -> . decvar
    (24) body -> .
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .
    (49) statements -> . assign
    (50) statements -> . function
    (51) statements -> . voidfunction
    (52) statements -> . call
    (53) statements -> . read
    (54) statements -> . print
    (55) statements -> . if
    (56) statements -> . while
    (57) statements -> . for
    (58) statements -> . array
    (59) statements -> . matrix
    (60) statements -> . mean
    (61) statements -> . layers
    (62) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (68) call -> . ID LPAREN callp RPAREN
    (63) read -> . READ LPAREN var RPAREN SEMICOLON
    (64) print -> . PRINT LPAREN printp SEMICOLON
    (72) if -> . IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
    (79) while -> . WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (84) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (95) array -> . ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON
    (98) matrix -> . MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
    (101) mean -> . MEAN LPAREN ID RPAREN SEMICOLON
    (102) layers -> . LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON
    (67) var -> . ID

  ! reduce/reduce conflict for RBRACE resolved using rule 5 (decvar -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 5 (decvar -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for MATRIX resolved as shift
  ! shift/reduce conflict for MEAN resolved as shift
  ! shift/reduce conflict for LAYERS resolved as shift
    VAR             shift and go to state 7
    RBRACE          reduce using rule 5 (decvar -> .)
    RETURN          reduce using rule 5 (decvar -> .)
    FUNCTION        shift and go to state 11
    ID              shift and go to state 61
    READ            shift and go to state 62
    PRINT           shift and go to state 63
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    ARRAY           shift and go to state 67
    MATRIX          shift and go to state 68
    MEAN            shift and go to state 69
    LAYERS          shift and go to state 70

  ! RBRACE          [ reduce using rule 24 (body -> .) ]
  ! RETURN          [ reduce using rule 24 (body -> .) ]
  ! FUNCTION        [ reduce using rule 5 (decvar -> .) ]
  ! ID              [ reduce using rule 5 (decvar -> .) ]
  ! READ            [ reduce using rule 5 (decvar -> .) ]
  ! PRINT           [ reduce using rule 5 (decvar -> .) ]
  ! IF              [ reduce using rule 5 (decvar -> .) ]
  ! WHILE           [ reduce using rule 5 (decvar -> .) ]
  ! FOR             [ reduce using rule 5 (decvar -> .) ]
  ! ARRAY           [ reduce using rule 5 (decvar -> .) ]
  ! MATRIX          [ reduce using rule 5 (decvar -> .) ]
  ! MEAN            [ reduce using rule 5 (decvar -> .) ]
  ! LAYERS          [ reduce using rule 5 (decvar -> .) ]

    decvar                         shift and go to state 45
    statements                     shift and go to state 46
    body                           shift and go to state 91
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    array                          shift and go to state 56
    matrix                         shift and go to state 57
    mean                           shift and go to state 58
    layers                         shift and go to state 59
    var                            shift and go to state 60

state 76

    (22) body -> statements body .

    RBRACE          reduce using rule 22 (body -> statements body .)
    RETURN          reduce using rule 22 (body -> statements body .)


state 77

    (62) assign -> var EQUAL . exp SEMICOLON
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    var                            shift and go to state 92
    exp                            shift and go to state 93
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    call                           shift and go to state 102

state 78

    (68) call -> ID LPAREN . callp RPAREN
    (69) callp -> . exp COMMA callp
    (70) callp -> . exp
    (71) callp -> .
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    RPAREN          reduce using rule 71 (callp -> .)
    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    callp                          shift and go to state 104
    exp                            shift and go to state 105
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 79

    (63) read -> READ LPAREN . var RPAREN SEMICOLON
    (67) var -> . ID

    ID              shift and go to state 107

    var                            shift and go to state 106

state 80

    (64) print -> PRINT LPAREN . printp SEMICOLON
    (65) printp -> . exp RPAREN
    (66) printp -> . exp COMMA printp
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    printp                         shift and go to state 108
    exp                            shift and go to state 109
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 81

    (72) if -> IF LPAREN . ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
    (73) ifexp -> . exp
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    ifexp                          shift and go to state 110
    exp                            shift and go to state 111
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 82

    (79) while -> WHILE saveJumps . LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON

    LPAREN          shift and go to state 112


state 83

    (84) for -> FOR LPAREN . var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (67) var -> . ID

    ID              shift and go to state 107

    var                            shift and go to state 113

state 84

    (95) array -> ARRAY ID . LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON

    LBRACKET        shift and go to state 114


state 85

    (98) matrix -> MATRIX ID . LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON

    LBRACKET        shift and go to state 115


state 86

    (101) mean -> MEAN LPAREN . ID RPAREN SEMICOLON

    ID              shift and go to state 116


state 87

    (102) layers -> LAYERS LPAREN . UNITS EQUAL CTI RPAREN SEMICOLON

    UNITS           shift and go to state 117


state 88

    (11) function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body . RETURN exp SEMICOLON RBRACE

    RETURN          shift and go to state 118


state 89

    (26) param -> type ID COMMA param .

    RPAREN          reduce using rule 26 (param -> type ID COMMA param .)


state 90

    (14) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 119


state 91

    (21) body -> decvar statements body .

    RBRACE          reduce using rule 21 (body -> decvar statements body .)
    RETURN          reduce using rule 21 (body -> decvar statements body .)


state 92

    (47) f -> var .

    MULT            reduce using rule 47 (f -> var .)
    DIV             reduce using rule 47 (f -> var .)
    PLUS            reduce using rule 47 (f -> var .)
    MINUS           reduce using rule 47 (f -> var .)
    LT              reduce using rule 47 (f -> var .)
    GT              reduce using rule 47 (f -> var .)
    IFEQUAL         reduce using rule 47 (f -> var .)
    DIFF            reduce using rule 47 (f -> var .)
    AND             reduce using rule 47 (f -> var .)
    OR              reduce using rule 47 (f -> var .)
    SEMICOLON       reduce using rule 47 (f -> var .)
    COMMA           reduce using rule 47 (f -> var .)
    RPAREN          reduce using rule 47 (f -> var .)
    RBRACKET        reduce using rule 47 (f -> var .)


state 93

    (62) assign -> var EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 120


state 94

    (28) exp -> texp .
    (29) exp -> texp . OR exp

    SEMICOLON       reduce using rule 28 (exp -> texp .)
    COMMA           reduce using rule 28 (exp -> texp .)
    RPAREN          reduce using rule 28 (exp -> texp .)
    RBRACKET        reduce using rule 28 (exp -> texp .)
    OR              shift and go to state 121


state 95

    (30) texp -> gexp .
    (31) texp -> gexp . AND texp

    OR              reduce using rule 30 (texp -> gexp .)
    SEMICOLON       reduce using rule 30 (texp -> gexp .)
    COMMA           reduce using rule 30 (texp -> gexp .)
    RPAREN          reduce using rule 30 (texp -> gexp .)
    RBRACKET        reduce using rule 30 (texp -> gexp .)
    AND             shift and go to state 122


state 96

    (32) gexp -> mexp .
    (33) gexp -> mexp . gexpp mexp
    (39) mexp -> mexp . PLUS t
    (40) mexp -> mexp . MINUS t
    (34) gexpp -> . LT
    (35) gexpp -> . GT
    (36) gexpp -> . IFEQUAL
    (37) gexpp -> . DIFF

    AND             reduce using rule 32 (gexp -> mexp .)
    OR              reduce using rule 32 (gexp -> mexp .)
    SEMICOLON       reduce using rule 32 (gexp -> mexp .)
    COMMA           reduce using rule 32 (gexp -> mexp .)
    RPAREN          reduce using rule 32 (gexp -> mexp .)
    RBRACKET        reduce using rule 32 (gexp -> mexp .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    IFEQUAL         shift and go to state 128
    DIFF            shift and go to state 129

    gexpp                          shift and go to state 123

state 97

    (38) mexp -> t .
    (42) t -> t . MULT f
    (43) t -> t . DIV f

    PLUS            reduce using rule 38 (mexp -> t .)
    MINUS           reduce using rule 38 (mexp -> t .)
    LT              reduce using rule 38 (mexp -> t .)
    GT              reduce using rule 38 (mexp -> t .)
    IFEQUAL         reduce using rule 38 (mexp -> t .)
    DIFF            reduce using rule 38 (mexp -> t .)
    AND             reduce using rule 38 (mexp -> t .)
    OR              reduce using rule 38 (mexp -> t .)
    SEMICOLON       reduce using rule 38 (mexp -> t .)
    COMMA           reduce using rule 38 (mexp -> t .)
    RPAREN          reduce using rule 38 (mexp -> t .)
    RBRACKET        reduce using rule 38 (mexp -> t .)
    MULT            shift and go to state 130
    DIV             shift and go to state 131


state 98

    (41) t -> f .

    MULT            reduce using rule 41 (t -> f .)
    DIV             reduce using rule 41 (t -> f .)
    PLUS            reduce using rule 41 (t -> f .)
    MINUS           reduce using rule 41 (t -> f .)
    LT              reduce using rule 41 (t -> f .)
    GT              reduce using rule 41 (t -> f .)
    IFEQUAL         reduce using rule 41 (t -> f .)
    DIFF            reduce using rule 41 (t -> f .)
    AND             reduce using rule 41 (t -> f .)
    OR              reduce using rule 41 (t -> f .)
    SEMICOLON       reduce using rule 41 (t -> f .)
    COMMA           reduce using rule 41 (t -> f .)
    RPAREN          reduce using rule 41 (t -> f .)
    RBRACKET        reduce using rule 41 (t -> f .)


state 99

    (44) f -> LPAREN . exp RPAREN
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    exp                            shift and go to state 132
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 100

    (45) f -> CTI .

    MULT            reduce using rule 45 (f -> CTI .)
    DIV             reduce using rule 45 (f -> CTI .)
    PLUS            reduce using rule 45 (f -> CTI .)
    MINUS           reduce using rule 45 (f -> CTI .)
    LT              reduce using rule 45 (f -> CTI .)
    GT              reduce using rule 45 (f -> CTI .)
    IFEQUAL         reduce using rule 45 (f -> CTI .)
    DIFF            reduce using rule 45 (f -> CTI .)
    AND             reduce using rule 45 (f -> CTI .)
    OR              reduce using rule 45 (f -> CTI .)
    SEMICOLON       reduce using rule 45 (f -> CTI .)
    COMMA           reduce using rule 45 (f -> CTI .)
    RPAREN          reduce using rule 45 (f -> CTI .)
    RBRACKET        reduce using rule 45 (f -> CTI .)


state 101

    (46) f -> CTF .

    MULT            reduce using rule 46 (f -> CTF .)
    DIV             reduce using rule 46 (f -> CTF .)
    PLUS            reduce using rule 46 (f -> CTF .)
    MINUS           reduce using rule 46 (f -> CTF .)
    LT              reduce using rule 46 (f -> CTF .)
    GT              reduce using rule 46 (f -> CTF .)
    IFEQUAL         reduce using rule 46 (f -> CTF .)
    DIFF            reduce using rule 46 (f -> CTF .)
    AND             reduce using rule 46 (f -> CTF .)
    OR              reduce using rule 46 (f -> CTF .)
    SEMICOLON       reduce using rule 46 (f -> CTF .)
    COMMA           reduce using rule 46 (f -> CTF .)
    RPAREN          reduce using rule 46 (f -> CTF .)
    RBRACKET        reduce using rule 46 (f -> CTF .)


state 102

    (48) f -> call .

    MULT            reduce using rule 48 (f -> call .)
    DIV             reduce using rule 48 (f -> call .)
    PLUS            reduce using rule 48 (f -> call .)
    MINUS           reduce using rule 48 (f -> call .)
    LT              reduce using rule 48 (f -> call .)
    GT              reduce using rule 48 (f -> call .)
    IFEQUAL         reduce using rule 48 (f -> call .)
    DIFF            reduce using rule 48 (f -> call .)
    AND             reduce using rule 48 (f -> call .)
    OR              reduce using rule 48 (f -> call .)
    SEMICOLON       reduce using rule 48 (f -> call .)
    COMMA           reduce using rule 48 (f -> call .)
    RPAREN          reduce using rule 48 (f -> call .)
    RBRACKET        reduce using rule 48 (f -> call .)


state 103

    (67) var -> ID .
    (68) call -> ID . LPAREN callp RPAREN

    MULT            reduce using rule 67 (var -> ID .)
    DIV             reduce using rule 67 (var -> ID .)
    PLUS            reduce using rule 67 (var -> ID .)
    MINUS           reduce using rule 67 (var -> ID .)
    LT              reduce using rule 67 (var -> ID .)
    GT              reduce using rule 67 (var -> ID .)
    IFEQUAL         reduce using rule 67 (var -> ID .)
    DIFF            reduce using rule 67 (var -> ID .)
    AND             reduce using rule 67 (var -> ID .)
    OR              reduce using rule 67 (var -> ID .)
    SEMICOLON       reduce using rule 67 (var -> ID .)
    COMMA           reduce using rule 67 (var -> ID .)
    RPAREN          reduce using rule 67 (var -> ID .)
    RBRACKET        reduce using rule 67 (var -> ID .)
    LPAREN          shift and go to state 78


state 104

    (68) call -> ID LPAREN callp . RPAREN

    RPAREN          shift and go to state 133


state 105

    (69) callp -> exp . COMMA callp
    (70) callp -> exp .

    COMMA           shift and go to state 134
    RPAREN          reduce using rule 70 (callp -> exp .)


state 106

    (63) read -> READ LPAREN var . RPAREN SEMICOLON

    RPAREN          shift and go to state 135


state 107

    (67) var -> ID .

    RPAREN          reduce using rule 67 (var -> ID .)
    SEMICOLON       reduce using rule 67 (var -> ID .)


state 108

    (64) print -> PRINT LPAREN printp . SEMICOLON

    SEMICOLON       shift and go to state 136


state 109

    (65) printp -> exp . RPAREN
    (66) printp -> exp . COMMA printp

    RPAREN          shift and go to state 137
    COMMA           shift and go to state 138


state 110

    (72) if -> IF LPAREN ifexp . RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON

    RPAREN          shift and go to state 139


state 111

    (73) ifexp -> exp .

    RPAREN          reduce using rule 73 (ifexp -> exp .)


state 112

    (79) while -> WHILE saveJumps LPAREN . whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (80) whilexp -> . exp
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    whilexp                        shift and go to state 140
    exp                            shift and go to state 141
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 113

    (84) for -> FOR LPAREN var . SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp

    SEMICOLON       shift and go to state 142


state 114

    (95) array -> ARRAY ID LBRACKET . exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    exp                            shift and go to state 143
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 115

    (98) matrix -> MATRIX ID LBRACKET . exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    exp                            shift and go to state 144
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 116

    (101) mean -> MEAN LPAREN ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 145


state 117

    (102) layers -> LAYERS LPAREN UNITS . EQUAL CTI RPAREN SEMICOLON

    EQUAL           shift and go to state 146


state 118

    (11) function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN . exp SEMICOLON RBRACE
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    exp                            shift and go to state 147
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 119

    (14) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .

    FUNCTION        reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    MAIN            reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    VAR             reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    READ            reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    MATRIX          reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    MEAN            reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    LAYERS          reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RBRACKET        reduce using rule 14 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)


state 120

    (62) assign -> var EQUAL exp SEMICOLON .

    VAR             reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)
    FUNCTION        reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)
    ID              reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)
    READ            reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)
    IF              reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)
    FOR             reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)
    ARRAY           reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)
    MATRIX          reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)
    MEAN            reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)
    LAYERS          reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)
    RBRACKET        reduce using rule 62 (assign -> var EQUAL exp SEMICOLON .)


state 121

    (29) exp -> texp OR . exp
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    texp                           shift and go to state 94
    exp                            shift and go to state 148
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 122

    (31) texp -> gexp AND . texp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    gexp                           shift and go to state 95
    texp                           shift and go to state 149
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 123

    (33) gexp -> mexp gexpp . mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    mexp                           shift and go to state 150
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 124

    (39) mexp -> mexp PLUS . t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    t                              shift and go to state 151
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 125

    (40) mexp -> mexp MINUS . t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    t                              shift and go to state 152
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 126

    (34) gexpp -> LT .

    LPAREN          reduce using rule 34 (gexpp -> LT .)
    CTI             reduce using rule 34 (gexpp -> LT .)
    CTF             reduce using rule 34 (gexpp -> LT .)
    ID              reduce using rule 34 (gexpp -> LT .)


state 127

    (35) gexpp -> GT .

    LPAREN          reduce using rule 35 (gexpp -> GT .)
    CTI             reduce using rule 35 (gexpp -> GT .)
    CTF             reduce using rule 35 (gexpp -> GT .)
    ID              reduce using rule 35 (gexpp -> GT .)


state 128

    (36) gexpp -> IFEQUAL .

    LPAREN          reduce using rule 36 (gexpp -> IFEQUAL .)
    CTI             reduce using rule 36 (gexpp -> IFEQUAL .)
    CTF             reduce using rule 36 (gexpp -> IFEQUAL .)
    ID              reduce using rule 36 (gexpp -> IFEQUAL .)


state 129

    (37) gexpp -> DIFF .

    LPAREN          reduce using rule 37 (gexpp -> DIFF .)
    CTI             reduce using rule 37 (gexpp -> DIFF .)
    CTF             reduce using rule 37 (gexpp -> DIFF .)
    ID              reduce using rule 37 (gexpp -> DIFF .)


state 130

    (42) t -> t MULT . f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    f                              shift and go to state 153
    var                            shift and go to state 92
    call                           shift and go to state 102

state 131

    (43) t -> t DIV . f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    f                              shift and go to state 154
    var                            shift and go to state 92
    call                           shift and go to state 102

state 132

    (44) f -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 155


state 133

    (68) call -> ID LPAREN callp RPAREN .

    VAR             reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    FUNCTION        reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    ID              reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    READ            reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    PRINT           reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    IF              reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    WHILE           reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    FOR             reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    ARRAY           reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    MATRIX          reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    MEAN            reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    LAYERS          reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    RBRACE          reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    RETURN          reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    MULT            reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    DIV             reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    PLUS            reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    MINUS           reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    LT              reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    GT              reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    IFEQUAL         reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    DIFF            reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    AND             reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    OR              reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    SEMICOLON       reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    COMMA           reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    RPAREN          reduce using rule 68 (call -> ID LPAREN callp RPAREN .)
    RBRACKET        reduce using rule 68 (call -> ID LPAREN callp RPAREN .)


state 134

    (69) callp -> exp COMMA . callp
    (69) callp -> . exp COMMA callp
    (70) callp -> . exp
    (71) callp -> .
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    RPAREN          reduce using rule 71 (callp -> .)
    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    exp                            shift and go to state 105
    callp                          shift and go to state 156
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 135

    (63) read -> READ LPAREN var RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 157


state 136

    (64) print -> PRINT LPAREN printp SEMICOLON .

    VAR             reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)
    FUNCTION        reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)
    ID              reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)
    READ            reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)
    PRINT           reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)
    IF              reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)
    WHILE           reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)
    FOR             reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)
    ARRAY           reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)
    MATRIX          reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)
    MEAN            reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)
    LAYERS          reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)
    RBRACE          reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)
    RETURN          reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)
    RBRACKET        reduce using rule 64 (print -> PRINT LPAREN printp SEMICOLON .)


state 137

    (65) printp -> exp RPAREN .

    SEMICOLON       reduce using rule 65 (printp -> exp RPAREN .)


state 138

    (66) printp -> exp COMMA . printp
    (65) printp -> . exp RPAREN
    (66) printp -> . exp COMMA printp
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    exp                            shift and go to state 109
    printp                         shift and go to state 158
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 139

    (72) if -> IF LPAREN ifexp RPAREN . quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
    (76) quadsIf -> .

    LBRACE          reduce using rule 76 (quadsIf -> .)

    quadsIf                        shift and go to state 159

state 140

    (79) while -> WHILE saveJumps LPAREN whilexp . RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON

    RPAREN          shift and go to state 160


state 141

    (80) whilexp -> exp .

    RPAREN          reduce using rule 80 (whilexp -> exp .)


state 142

    (84) for -> FOR LPAREN var SEMICOLON . exp SEMICOLON exp RPAREN LBRACKET statements forp
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    var                            shift and go to state 92
    exp                            shift and go to state 161
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    call                           shift and go to state 102

state 143

    (95) array -> ARRAY ID LBRACKET exp . RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON

    RBRACKET        shift and go to state 162


state 144

    (98) matrix -> MATRIX ID LBRACKET exp . RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON

    RBRACKET        shift and go to state 163


state 145

    (101) mean -> MEAN LPAREN ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 164


state 146

    (102) layers -> LAYERS LPAREN UNITS EQUAL . CTI RPAREN SEMICOLON

    CTI             shift and go to state 165


state 147

    (11) function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp . SEMICOLON RBRACE

    SEMICOLON       shift and go to state 166


state 148

    (29) exp -> texp OR exp .

    SEMICOLON       reduce using rule 29 (exp -> texp OR exp .)
    COMMA           reduce using rule 29 (exp -> texp OR exp .)
    RPAREN          reduce using rule 29 (exp -> texp OR exp .)
    RBRACKET        reduce using rule 29 (exp -> texp OR exp .)


state 149

    (31) texp -> gexp AND texp .

    OR              reduce using rule 31 (texp -> gexp AND texp .)
    SEMICOLON       reduce using rule 31 (texp -> gexp AND texp .)
    COMMA           reduce using rule 31 (texp -> gexp AND texp .)
    RPAREN          reduce using rule 31 (texp -> gexp AND texp .)
    RBRACKET        reduce using rule 31 (texp -> gexp AND texp .)


state 150

    (33) gexp -> mexp gexpp mexp .
    (39) mexp -> mexp . PLUS t
    (40) mexp -> mexp . MINUS t

    AND             reduce using rule 33 (gexp -> mexp gexpp mexp .)
    OR              reduce using rule 33 (gexp -> mexp gexpp mexp .)
    SEMICOLON       reduce using rule 33 (gexp -> mexp gexpp mexp .)
    COMMA           reduce using rule 33 (gexp -> mexp gexpp mexp .)
    RPAREN          reduce using rule 33 (gexp -> mexp gexpp mexp .)
    RBRACKET        reduce using rule 33 (gexp -> mexp gexpp mexp .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125


state 151

    (39) mexp -> mexp PLUS t .
    (42) t -> t . MULT f
    (43) t -> t . DIV f

    PLUS            reduce using rule 39 (mexp -> mexp PLUS t .)
    MINUS           reduce using rule 39 (mexp -> mexp PLUS t .)
    LT              reduce using rule 39 (mexp -> mexp PLUS t .)
    GT              reduce using rule 39 (mexp -> mexp PLUS t .)
    IFEQUAL         reduce using rule 39 (mexp -> mexp PLUS t .)
    DIFF            reduce using rule 39 (mexp -> mexp PLUS t .)
    AND             reduce using rule 39 (mexp -> mexp PLUS t .)
    OR              reduce using rule 39 (mexp -> mexp PLUS t .)
    SEMICOLON       reduce using rule 39 (mexp -> mexp PLUS t .)
    COMMA           reduce using rule 39 (mexp -> mexp PLUS t .)
    RPAREN          reduce using rule 39 (mexp -> mexp PLUS t .)
    RBRACKET        reduce using rule 39 (mexp -> mexp PLUS t .)
    MULT            shift and go to state 130
    DIV             shift and go to state 131


state 152

    (40) mexp -> mexp MINUS t .
    (42) t -> t . MULT f
    (43) t -> t . DIV f

    PLUS            reduce using rule 40 (mexp -> mexp MINUS t .)
    MINUS           reduce using rule 40 (mexp -> mexp MINUS t .)
    LT              reduce using rule 40 (mexp -> mexp MINUS t .)
    GT              reduce using rule 40 (mexp -> mexp MINUS t .)
    IFEQUAL         reduce using rule 40 (mexp -> mexp MINUS t .)
    DIFF            reduce using rule 40 (mexp -> mexp MINUS t .)
    AND             reduce using rule 40 (mexp -> mexp MINUS t .)
    OR              reduce using rule 40 (mexp -> mexp MINUS t .)
    SEMICOLON       reduce using rule 40 (mexp -> mexp MINUS t .)
    COMMA           reduce using rule 40 (mexp -> mexp MINUS t .)
    RPAREN          reduce using rule 40 (mexp -> mexp MINUS t .)
    RBRACKET        reduce using rule 40 (mexp -> mexp MINUS t .)
    MULT            shift and go to state 130
    DIV             shift and go to state 131


state 153

    (42) t -> t MULT f .

    MULT            reduce using rule 42 (t -> t MULT f .)
    DIV             reduce using rule 42 (t -> t MULT f .)
    PLUS            reduce using rule 42 (t -> t MULT f .)
    MINUS           reduce using rule 42 (t -> t MULT f .)
    LT              reduce using rule 42 (t -> t MULT f .)
    GT              reduce using rule 42 (t -> t MULT f .)
    IFEQUAL         reduce using rule 42 (t -> t MULT f .)
    DIFF            reduce using rule 42 (t -> t MULT f .)
    AND             reduce using rule 42 (t -> t MULT f .)
    OR              reduce using rule 42 (t -> t MULT f .)
    SEMICOLON       reduce using rule 42 (t -> t MULT f .)
    COMMA           reduce using rule 42 (t -> t MULT f .)
    RPAREN          reduce using rule 42 (t -> t MULT f .)
    RBRACKET        reduce using rule 42 (t -> t MULT f .)


state 154

    (43) t -> t DIV f .

    MULT            reduce using rule 43 (t -> t DIV f .)
    DIV             reduce using rule 43 (t -> t DIV f .)
    PLUS            reduce using rule 43 (t -> t DIV f .)
    MINUS           reduce using rule 43 (t -> t DIV f .)
    LT              reduce using rule 43 (t -> t DIV f .)
    GT              reduce using rule 43 (t -> t DIV f .)
    IFEQUAL         reduce using rule 43 (t -> t DIV f .)
    DIFF            reduce using rule 43 (t -> t DIV f .)
    AND             reduce using rule 43 (t -> t DIV f .)
    OR              reduce using rule 43 (t -> t DIV f .)
    SEMICOLON       reduce using rule 43 (t -> t DIV f .)
    COMMA           reduce using rule 43 (t -> t DIV f .)
    RPAREN          reduce using rule 43 (t -> t DIV f .)
    RBRACKET        reduce using rule 43 (t -> t DIV f .)


state 155

    (44) f -> LPAREN exp RPAREN .

    MULT            reduce using rule 44 (f -> LPAREN exp RPAREN .)
    DIV             reduce using rule 44 (f -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 44 (f -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 44 (f -> LPAREN exp RPAREN .)
    LT              reduce using rule 44 (f -> LPAREN exp RPAREN .)
    GT              reduce using rule 44 (f -> LPAREN exp RPAREN .)
    IFEQUAL         reduce using rule 44 (f -> LPAREN exp RPAREN .)
    DIFF            reduce using rule 44 (f -> LPAREN exp RPAREN .)
    AND             reduce using rule 44 (f -> LPAREN exp RPAREN .)
    OR              reduce using rule 44 (f -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 44 (f -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 44 (f -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 44 (f -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 44 (f -> LPAREN exp RPAREN .)


state 156

    (69) callp -> exp COMMA callp .

    RPAREN          reduce using rule 69 (callp -> exp COMMA callp .)


state 157

    (63) read -> READ LPAREN var RPAREN SEMICOLON .

    VAR             reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)
    ID              reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)
    READ            reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)
    PRINT           reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)
    IF              reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)
    WHILE           reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)
    FOR             reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)
    ARRAY           reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)
    MATRIX          reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)
    MEAN            reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)
    LAYERS          reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)
    RBRACE          reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)
    RETURN          reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 63 (read -> READ LPAREN var RPAREN SEMICOLON .)


state 158

    (66) printp -> exp COMMA printp .

    SEMICOLON       reduce using rule 66 (printp -> exp COMMA printp .)


state 159

    (72) if -> IF LPAREN ifexp RPAREN quadsIf . LBRACE body RBRACE ifelse jumpsIf SEMICOLON

    LBRACE          shift and go to state 167


state 160

    (79) while -> WHILE saveJumps LPAREN whilexp RPAREN . quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (82) quadsWhile -> .

    LBRACE          reduce using rule 82 (quadsWhile -> .)

    quadsWhile                     shift and go to state 168

state 161

    (84) for -> FOR LPAREN var SEMICOLON exp . SEMICOLON exp RPAREN LBRACKET statements forp

    SEMICOLON       shift and go to state 169


state 162

    (95) array -> ARRAY ID LBRACKET exp RBRACKET . EQUAL LBRACKET arrvalues RBRACKET SEMICOLON

    EQUAL           shift and go to state 170


state 163

    (98) matrix -> MATRIX ID LBRACKET exp RBRACKET . LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON

    LBRACKET        shift and go to state 171


state 164

    (101) mean -> MEAN LPAREN ID RPAREN SEMICOLON .

    VAR             reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)
    ID              reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)
    READ            reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)
    PRINT           reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)
    IF              reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)
    FOR             reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)
    ARRAY           reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)
    MATRIX          reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)
    MEAN            reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)
    LAYERS          reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)
    RBRACE          reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)
    RETURN          reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 101 (mean -> MEAN LPAREN ID RPAREN SEMICOLON .)


state 165

    (102) layers -> LAYERS LPAREN UNITS EQUAL CTI . RPAREN SEMICOLON

    RPAREN          shift and go to state 172


state 166

    (11) function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON . RBRACE

    RBRACE          shift and go to state 173


state 167

    (72) if -> IF LPAREN ifexp RPAREN quadsIf LBRACE . body RBRACE ifelse jumpsIf SEMICOLON
    (21) body -> . decvar statements body
    (22) body -> . statements body
    (23) body -> . decvar
    (24) body -> .
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .
    (49) statements -> . assign
    (50) statements -> . function
    (51) statements -> . voidfunction
    (52) statements -> . call
    (53) statements -> . read
    (54) statements -> . print
    (55) statements -> . if
    (56) statements -> . while
    (57) statements -> . for
    (58) statements -> . array
    (59) statements -> . matrix
    (60) statements -> . mean
    (61) statements -> . layers
    (62) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (68) call -> . ID LPAREN callp RPAREN
    (63) read -> . READ LPAREN var RPAREN SEMICOLON
    (64) print -> . PRINT LPAREN printp SEMICOLON
    (72) if -> . IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
    (79) while -> . WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (84) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (95) array -> . ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON
    (98) matrix -> . MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
    (101) mean -> . MEAN LPAREN ID RPAREN SEMICOLON
    (102) layers -> . LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON
    (67) var -> . ID

  ! reduce/reduce conflict for RBRACE resolved using rule 5 (decvar -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for MATRIX resolved as shift
  ! shift/reduce conflict for MEAN resolved as shift
  ! shift/reduce conflict for LAYERS resolved as shift
    VAR             shift and go to state 7
    RBRACE          reduce using rule 5 (decvar -> .)
    FUNCTION        shift and go to state 11
    ID              shift and go to state 61
    READ            shift and go to state 62
    PRINT           shift and go to state 63
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    ARRAY           shift and go to state 67
    MATRIX          shift and go to state 68
    MEAN            shift and go to state 69
    LAYERS          shift and go to state 70

  ! RBRACE          [ reduce using rule 24 (body -> .) ]
  ! FUNCTION        [ reduce using rule 5 (decvar -> .) ]
  ! ID              [ reduce using rule 5 (decvar -> .) ]
  ! READ            [ reduce using rule 5 (decvar -> .) ]
  ! PRINT           [ reduce using rule 5 (decvar -> .) ]
  ! IF              [ reduce using rule 5 (decvar -> .) ]
  ! WHILE           [ reduce using rule 5 (decvar -> .) ]
  ! FOR             [ reduce using rule 5 (decvar -> .) ]
  ! ARRAY           [ reduce using rule 5 (decvar -> .) ]
  ! MATRIX          [ reduce using rule 5 (decvar -> .) ]
  ! MEAN            [ reduce using rule 5 (decvar -> .) ]
  ! LAYERS          [ reduce using rule 5 (decvar -> .) ]

    body                           shift and go to state 174
    decvar                         shift and go to state 45
    statements                     shift and go to state 46
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    array                          shift and go to state 56
    matrix                         shift and go to state 57
    mean                           shift and go to state 58
    layers                         shift and go to state 59
    var                            shift and go to state 60

state 168

    (79) while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile . LBRACE body RBRACE jumpsWhile SEMICOLON

    LBRACE          shift and go to state 175


state 169

    (84) for -> FOR LPAREN var SEMICOLON exp SEMICOLON . exp RPAREN LBRACKET statements forp
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    var                            shift and go to state 92
    exp                            shift and go to state 176
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    call                           shift and go to state 102

state 170

    (95) array -> ARRAY ID LBRACKET exp RBRACKET EQUAL . LBRACKET arrvalues RBRACKET SEMICOLON

    LBRACKET        shift and go to state 177


state 171

    (98) matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET . exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    exp                            shift and go to state 178
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 172

    (102) layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 179


state 173

    (11) function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .

    FUNCTION        reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    MAIN            reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    VAR             reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    ID              reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    READ            reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    PRINT           reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    IF              reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    WHILE           reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    FOR             reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    ARRAY           reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    MATRIX          reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    MEAN            reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    LAYERS          reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    RBRACE          reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    RETURN          reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)
    RBRACKET        reduce using rule 11 (function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE .)


state 174

    (72) if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body . RBRACE ifelse jumpsIf SEMICOLON

    RBRACE          shift and go to state 180


state 175

    (79) while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE . body RBRACE jumpsWhile SEMICOLON
    (21) body -> . decvar statements body
    (22) body -> . statements body
    (23) body -> . decvar
    (24) body -> .
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .
    (49) statements -> . assign
    (50) statements -> . function
    (51) statements -> . voidfunction
    (52) statements -> . call
    (53) statements -> . read
    (54) statements -> . print
    (55) statements -> . if
    (56) statements -> . while
    (57) statements -> . for
    (58) statements -> . array
    (59) statements -> . matrix
    (60) statements -> . mean
    (61) statements -> . layers
    (62) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (68) call -> . ID LPAREN callp RPAREN
    (63) read -> . READ LPAREN var RPAREN SEMICOLON
    (64) print -> . PRINT LPAREN printp SEMICOLON
    (72) if -> . IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
    (79) while -> . WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (84) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (95) array -> . ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON
    (98) matrix -> . MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
    (101) mean -> . MEAN LPAREN ID RPAREN SEMICOLON
    (102) layers -> . LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON
    (67) var -> . ID

  ! reduce/reduce conflict for RBRACE resolved using rule 5 (decvar -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for MATRIX resolved as shift
  ! shift/reduce conflict for MEAN resolved as shift
  ! shift/reduce conflict for LAYERS resolved as shift
    VAR             shift and go to state 7
    RBRACE          reduce using rule 5 (decvar -> .)
    FUNCTION        shift and go to state 11
    ID              shift and go to state 61
    READ            shift and go to state 62
    PRINT           shift and go to state 63
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    ARRAY           shift and go to state 67
    MATRIX          shift and go to state 68
    MEAN            shift and go to state 69
    LAYERS          shift and go to state 70

  ! RBRACE          [ reduce using rule 24 (body -> .) ]
  ! FUNCTION        [ reduce using rule 5 (decvar -> .) ]
  ! ID              [ reduce using rule 5 (decvar -> .) ]
  ! READ            [ reduce using rule 5 (decvar -> .) ]
  ! PRINT           [ reduce using rule 5 (decvar -> .) ]
  ! IF              [ reduce using rule 5 (decvar -> .) ]
  ! WHILE           [ reduce using rule 5 (decvar -> .) ]
  ! FOR             [ reduce using rule 5 (decvar -> .) ]
  ! ARRAY           [ reduce using rule 5 (decvar -> .) ]
  ! MATRIX          [ reduce using rule 5 (decvar -> .) ]
  ! MEAN            [ reduce using rule 5 (decvar -> .) ]
  ! LAYERS          [ reduce using rule 5 (decvar -> .) ]

    body                           shift and go to state 181
    decvar                         shift and go to state 45
    statements                     shift and go to state 46
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    array                          shift and go to state 56
    matrix                         shift and go to state 57
    mean                           shift and go to state 58
    layers                         shift and go to state 59
    var                            shift and go to state 60

state 176

    (84) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp . RPAREN LBRACKET statements forp

    RPAREN          shift and go to state 182


state 177

    (95) array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET . arrvalues RBRACKET SEMICOLON
    (96) arrvalues -> . exp
    (97) arrvalues -> . exp COMMA arrvalues
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    exp                            shift and go to state 183
    arrvalues                      shift and go to state 184
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 178

    (98) matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp . RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON

    RBRACKET        shift and go to state 185


state 179

    (102) layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .

    VAR             reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)
    ID              reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)
    READ            reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)
    PRINT           reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)
    IF              reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)
    WHILE           reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)
    FOR             reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)
    ARRAY           reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)
    MATRIX          reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)
    MEAN            reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)
    LAYERS          reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)
    RBRACE          reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)
    RETURN          reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 102 (layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON .)


state 180

    (72) if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE . ifelse jumpsIf SEMICOLON
    (74) ifelse -> .
    (75) ifelse -> . ELSE quadsElse LBRACE body RBRACE

    SEMICOLON       reduce using rule 74 (ifelse -> .)
    ELSE            shift and go to state 187

    ifelse                         shift and go to state 186

state 181

    (79) while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body . RBRACE jumpsWhile SEMICOLON

    RBRACE          shift and go to state 188


state 182

    (84) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN . LBRACKET statements forp

    LBRACKET        shift and go to state 189


state 183

    (96) arrvalues -> exp .
    (97) arrvalues -> exp . COMMA arrvalues

    RBRACKET        reduce using rule 96 (arrvalues -> exp .)
    COMMA           shift and go to state 190


state 184

    (95) array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 191


state 185

    (98) matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET . EQUAL LBRACKET matvalues RBRACKET SEMICOLON

    EQUAL           shift and go to state 192


state 186

    (72) if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse . jumpsIf SEMICOLON
    (77) jumpsIf -> .

    SEMICOLON       reduce using rule 77 (jumpsIf -> .)

    jumpsIf                        shift and go to state 193

state 187

    (75) ifelse -> ELSE . quadsElse LBRACE body RBRACE
    (78) quadsElse -> .

    LBRACE          reduce using rule 78 (quadsElse -> .)

    quadsElse                      shift and go to state 194

state 188

    (79) while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE . jumpsWhile SEMICOLON
    (83) jumpsWhile -> .

    SEMICOLON       reduce using rule 83 (jumpsWhile -> .)

    jumpsWhile                     shift and go to state 195

state 189

    (84) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET . statements forp
    (49) statements -> . assign
    (50) statements -> . function
    (51) statements -> . voidfunction
    (52) statements -> . call
    (53) statements -> . read
    (54) statements -> . print
    (55) statements -> . if
    (56) statements -> . while
    (57) statements -> . for
    (58) statements -> . array
    (59) statements -> . matrix
    (60) statements -> . mean
    (61) statements -> . layers
    (62) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (68) call -> . ID LPAREN callp RPAREN
    (63) read -> . READ LPAREN var RPAREN SEMICOLON
    (64) print -> . PRINT LPAREN printp SEMICOLON
    (72) if -> . IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
    (79) while -> . WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (84) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (95) array -> . ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON
    (98) matrix -> . MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
    (101) mean -> . MEAN LPAREN ID RPAREN SEMICOLON
    (102) layers -> . LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON
    (67) var -> . ID

    FUNCTION        shift and go to state 11
    ID              shift and go to state 61
    READ            shift and go to state 62
    PRINT           shift and go to state 63
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    ARRAY           shift and go to state 67
    MATRIX          shift and go to state 68
    MEAN            shift and go to state 69
    LAYERS          shift and go to state 70

    var                            shift and go to state 60
    statements                     shift and go to state 196
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    array                          shift and go to state 56
    matrix                         shift and go to state 57
    mean                           shift and go to state 58
    layers                         shift and go to state 59

state 190

    (97) arrvalues -> exp COMMA . arrvalues
    (96) arrvalues -> . exp
    (97) arrvalues -> . exp COMMA arrvalues
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    exp                            shift and go to state 183
    arrvalues                      shift and go to state 197
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 191

    (95) array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 198


state 192

    (98) matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL . LBRACKET matvalues RBRACKET SEMICOLON

    LBRACKET        shift and go to state 199


state 193

    (72) if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf . SEMICOLON

    SEMICOLON       shift and go to state 200


state 194

    (75) ifelse -> ELSE quadsElse . LBRACE body RBRACE

    LBRACE          shift and go to state 201


state 195

    (79) while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile . SEMICOLON

    SEMICOLON       shift and go to state 202


state 196

    (84) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements . forp
    (85) forp -> . RBRACKET
    (86) forp -> . statements forp
    (49) statements -> . assign
    (50) statements -> . function
    (51) statements -> . voidfunction
    (52) statements -> . call
    (53) statements -> . read
    (54) statements -> . print
    (55) statements -> . if
    (56) statements -> . while
    (57) statements -> . for
    (58) statements -> . array
    (59) statements -> . matrix
    (60) statements -> . mean
    (61) statements -> . layers
    (62) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (68) call -> . ID LPAREN callp RPAREN
    (63) read -> . READ LPAREN var RPAREN SEMICOLON
    (64) print -> . PRINT LPAREN printp SEMICOLON
    (72) if -> . IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
    (79) while -> . WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (84) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (95) array -> . ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON
    (98) matrix -> . MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
    (101) mean -> . MEAN LPAREN ID RPAREN SEMICOLON
    (102) layers -> . LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON
    (67) var -> . ID

    RBRACKET        shift and go to state 205
    FUNCTION        shift and go to state 11
    ID              shift and go to state 61
    READ            shift and go to state 62
    PRINT           shift and go to state 63
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    ARRAY           shift and go to state 67
    MATRIX          shift and go to state 68
    MEAN            shift and go to state 69
    LAYERS          shift and go to state 70

    var                            shift and go to state 60
    statements                     shift and go to state 203
    forp                           shift and go to state 204
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    array                          shift and go to state 56
    matrix                         shift and go to state 57
    mean                           shift and go to state 58
    layers                         shift and go to state 59

state 197

    (97) arrvalues -> exp COMMA arrvalues .

    RBRACKET        reduce using rule 97 (arrvalues -> exp COMMA arrvalues .)


state 198

    (95) array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .

    VAR             reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)
    FUNCTION        reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)
    ID              reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)
    READ            reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)
    PRINT           reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)
    IF              reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)
    WHILE           reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)
    FOR             reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)
    MATRIX          reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)
    MEAN            reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)
    LAYERS          reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)
    RETURN          reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)
    RBRACKET        reduce using rule 95 (array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON .)


state 199

    (98) matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET . matvalues RBRACKET SEMICOLON
    (99) matvalues -> . exp
    (100) matvalues -> . exp COMMA matvalues
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    exp                            shift and go to state 206
    matvalues                      shift and go to state 207
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 200

    (72) if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .

    VAR             reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)
    FUNCTION        reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)
    ID              reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)
    READ            reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)
    PRINT           reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)
    IF              reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)
    WHILE           reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)
    FOR             reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)
    ARRAY           reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)
    MATRIX          reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)
    MEAN            reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)
    LAYERS          reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)
    RBRACE          reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)
    RETURN          reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)
    RBRACKET        reduce using rule 72 (if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON .)


state 201

    (75) ifelse -> ELSE quadsElse LBRACE . body RBRACE
    (21) body -> . decvar statements body
    (22) body -> . statements body
    (23) body -> . decvar
    (24) body -> .
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .
    (49) statements -> . assign
    (50) statements -> . function
    (51) statements -> . voidfunction
    (52) statements -> . call
    (53) statements -> . read
    (54) statements -> . print
    (55) statements -> . if
    (56) statements -> . while
    (57) statements -> . for
    (58) statements -> . array
    (59) statements -> . matrix
    (60) statements -> . mean
    (61) statements -> . layers
    (62) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (68) call -> . ID LPAREN callp RPAREN
    (63) read -> . READ LPAREN var RPAREN SEMICOLON
    (64) print -> . PRINT LPAREN printp SEMICOLON
    (72) if -> . IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
    (79) while -> . WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (84) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (95) array -> . ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON
    (98) matrix -> . MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
    (101) mean -> . MEAN LPAREN ID RPAREN SEMICOLON
    (102) layers -> . LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON
    (67) var -> . ID

  ! reduce/reduce conflict for RBRACE resolved using rule 5 (decvar -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for MATRIX resolved as shift
  ! shift/reduce conflict for MEAN resolved as shift
  ! shift/reduce conflict for LAYERS resolved as shift
    VAR             shift and go to state 7
    RBRACE          reduce using rule 5 (decvar -> .)
    FUNCTION        shift and go to state 11
    ID              shift and go to state 61
    READ            shift and go to state 62
    PRINT           shift and go to state 63
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    ARRAY           shift and go to state 67
    MATRIX          shift and go to state 68
    MEAN            shift and go to state 69
    LAYERS          shift and go to state 70

  ! RBRACE          [ reduce using rule 24 (body -> .) ]
  ! FUNCTION        [ reduce using rule 5 (decvar -> .) ]
  ! ID              [ reduce using rule 5 (decvar -> .) ]
  ! READ            [ reduce using rule 5 (decvar -> .) ]
  ! PRINT           [ reduce using rule 5 (decvar -> .) ]
  ! IF              [ reduce using rule 5 (decvar -> .) ]
  ! WHILE           [ reduce using rule 5 (decvar -> .) ]
  ! FOR             [ reduce using rule 5 (decvar -> .) ]
  ! ARRAY           [ reduce using rule 5 (decvar -> .) ]
  ! MATRIX          [ reduce using rule 5 (decvar -> .) ]
  ! MEAN            [ reduce using rule 5 (decvar -> .) ]
  ! LAYERS          [ reduce using rule 5 (decvar -> .) ]

    body                           shift and go to state 208
    decvar                         shift and go to state 45
    statements                     shift and go to state 46
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    array                          shift and go to state 56
    matrix                         shift and go to state 57
    mean                           shift and go to state 58
    layers                         shift and go to state 59
    var                            shift and go to state 60

state 202

    (79) while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .

    VAR             reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)
    FUNCTION        reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)
    ID              reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)
    READ            reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)
    PRINT           reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)
    IF              reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)
    WHILE           reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)
    FOR             reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)
    ARRAY           reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)
    MATRIX          reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)
    MEAN            reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)
    LAYERS          reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)
    RBRACE          reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)
    RETURN          reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)
    RBRACKET        reduce using rule 79 (while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON .)


state 203

    (86) forp -> statements . forp
    (85) forp -> . RBRACKET
    (86) forp -> . statements forp
    (49) statements -> . assign
    (50) statements -> . function
    (51) statements -> . voidfunction
    (52) statements -> . call
    (53) statements -> . read
    (54) statements -> . print
    (55) statements -> . if
    (56) statements -> . while
    (57) statements -> . for
    (58) statements -> . array
    (59) statements -> . matrix
    (60) statements -> . mean
    (61) statements -> . layers
    (62) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE
    (14) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (68) call -> . ID LPAREN callp RPAREN
    (63) read -> . READ LPAREN var RPAREN SEMICOLON
    (64) print -> . PRINT LPAREN printp SEMICOLON
    (72) if -> . IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON
    (79) while -> . WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON
    (84) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (95) array -> . ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON
    (98) matrix -> . MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON
    (101) mean -> . MEAN LPAREN ID RPAREN SEMICOLON
    (102) layers -> . LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON
    (67) var -> . ID

    RBRACKET        shift and go to state 205
    FUNCTION        shift and go to state 11
    ID              shift and go to state 61
    READ            shift and go to state 62
    PRINT           shift and go to state 63
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    ARRAY           shift and go to state 67
    MATRIX          shift and go to state 68
    MEAN            shift and go to state 69
    LAYERS          shift and go to state 70

    statements                     shift and go to state 203
    forp                           shift and go to state 209
    assign                         shift and go to state 47
    function                       shift and go to state 48
    voidfunction                   shift and go to state 49
    call                           shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    if                             shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    array                          shift and go to state 56
    matrix                         shift and go to state 57
    mean                           shift and go to state 58
    layers                         shift and go to state 59
    var                            shift and go to state 60

state 204

    (84) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .

    VAR             reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    FUNCTION        reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    ID              reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    READ            reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    PRINT           reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    IF              reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    WHILE           reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    FOR             reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    ARRAY           reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    MATRIX          reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    MEAN            reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    LAYERS          reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    RBRACE          reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    RETURN          reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    RBRACKET        reduce using rule 84 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)


state 205

    (85) forp -> RBRACKET .

    VAR             reduce using rule 85 (forp -> RBRACKET .)
    FUNCTION        reduce using rule 85 (forp -> RBRACKET .)
    ID              reduce using rule 85 (forp -> RBRACKET .)
    READ            reduce using rule 85 (forp -> RBRACKET .)
    PRINT           reduce using rule 85 (forp -> RBRACKET .)
    IF              reduce using rule 85 (forp -> RBRACKET .)
    WHILE           reduce using rule 85 (forp -> RBRACKET .)
    FOR             reduce using rule 85 (forp -> RBRACKET .)
    ARRAY           reduce using rule 85 (forp -> RBRACKET .)
    MATRIX          reduce using rule 85 (forp -> RBRACKET .)
    MEAN            reduce using rule 85 (forp -> RBRACKET .)
    LAYERS          reduce using rule 85 (forp -> RBRACKET .)
    RBRACE          reduce using rule 85 (forp -> RBRACKET .)
    RETURN          reduce using rule 85 (forp -> RBRACKET .)
    RBRACKET        reduce using rule 85 (forp -> RBRACKET .)


state 206

    (99) matvalues -> exp .
    (100) matvalues -> exp . COMMA matvalues

    RBRACKET        reduce using rule 99 (matvalues -> exp .)
    COMMA           shift and go to state 210


state 207

    (98) matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 211


state 208

    (75) ifelse -> ELSE quadsElse LBRACE body . RBRACE

    RBRACE          shift and go to state 212


state 209

    (86) forp -> statements forp .

    VAR             reduce using rule 86 (forp -> statements forp .)
    FUNCTION        reduce using rule 86 (forp -> statements forp .)
    ID              reduce using rule 86 (forp -> statements forp .)
    READ            reduce using rule 86 (forp -> statements forp .)
    PRINT           reduce using rule 86 (forp -> statements forp .)
    IF              reduce using rule 86 (forp -> statements forp .)
    WHILE           reduce using rule 86 (forp -> statements forp .)
    FOR             reduce using rule 86 (forp -> statements forp .)
    ARRAY           reduce using rule 86 (forp -> statements forp .)
    MATRIX          reduce using rule 86 (forp -> statements forp .)
    MEAN            reduce using rule 86 (forp -> statements forp .)
    LAYERS          reduce using rule 86 (forp -> statements forp .)
    RBRACE          reduce using rule 86 (forp -> statements forp .)
    RETURN          reduce using rule 86 (forp -> statements forp .)
    RBRACKET        reduce using rule 86 (forp -> statements forp .)


state 210

    (100) matvalues -> exp COMMA . matvalues
    (99) matvalues -> . exp
    (100) matvalues -> . exp COMMA matvalues
    (28) exp -> . texp
    (29) exp -> . texp OR exp
    (30) texp -> . gexp
    (31) texp -> . gexp AND texp
    (32) gexp -> . mexp
    (33) gexp -> . mexp gexpp mexp
    (38) mexp -> . t
    (39) mexp -> . mexp PLUS t
    (40) mexp -> . mexp MINUS t
    (41) t -> . f
    (42) t -> . t MULT f
    (43) t -> . t DIV f
    (44) f -> . LPAREN exp RPAREN
    (45) f -> . CTI
    (46) f -> . CTF
    (47) f -> . var
    (48) f -> . call
    (67) var -> . ID
    (68) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 99
    CTI             shift and go to state 100
    CTF             shift and go to state 101
    ID              shift and go to state 103

    exp                            shift and go to state 206
    matvalues                      shift and go to state 213
    texp                           shift and go to state 94
    gexp                           shift and go to state 95
    mexp                           shift and go to state 96
    t                              shift and go to state 97
    f                              shift and go to state 98
    var                            shift and go to state 92
    call                           shift and go to state 102

state 211

    (98) matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 214


state 212

    (75) ifelse -> ELSE quadsElse LBRACE body RBRACE .

    SEMICOLON       reduce using rule 75 (ifelse -> ELSE quadsElse LBRACE body RBRACE .)


state 213

    (100) matvalues -> exp COMMA matvalues .

    RBRACKET        reduce using rule 100 (matvalues -> exp COMMA matvalues .)


state 214

    (98) matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .

    VAR             reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)
    FUNCTION        reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)
    ID              reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)
    READ            reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)
    PRINT           reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)
    IF              reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)
    WHILE           reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)
    FOR             reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)
    MATRIX          reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)
    MEAN            reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)
    LAYERS          reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)
    RETURN          reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)
    RBRACKET        reduce using rule 98 (matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for READ in state 40 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 40 resolved as shift
WARNING: shift/reduce conflict for IF in state 40 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 40 resolved as shift
WARNING: shift/reduce conflict for FOR in state 40 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 40 resolved as shift
WARNING: shift/reduce conflict for MATRIX in state 40 resolved as shift
WARNING: shift/reduce conflict for MEAN in state 40 resolved as shift
WARNING: shift/reduce conflict for LAYERS in state 40 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 46 resolved as shift
WARNING: shift/reduce conflict for ID in state 46 resolved as shift
WARNING: shift/reduce conflict for READ in state 46 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 46 resolved as shift
WARNING: shift/reduce conflict for IF in state 46 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 46 resolved as shift
WARNING: shift/reduce conflict for FOR in state 46 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 46 resolved as shift
WARNING: shift/reduce conflict for MATRIX in state 46 resolved as shift
WARNING: shift/reduce conflict for MEAN in state 46 resolved as shift
WARNING: shift/reduce conflict for LAYERS in state 46 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 71 resolved as shift
WARNING: shift/reduce conflict for ID in state 71 resolved as shift
WARNING: shift/reduce conflict for READ in state 71 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 71 resolved as shift
WARNING: shift/reduce conflict for IF in state 71 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 71 resolved as shift
WARNING: shift/reduce conflict for FOR in state 71 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 71 resolved as shift
WARNING: shift/reduce conflict for MATRIX in state 71 resolved as shift
WARNING: shift/reduce conflict for MEAN in state 71 resolved as shift
WARNING: shift/reduce conflict for LAYERS in state 71 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 73 resolved as shift
WARNING: shift/reduce conflict for ID in state 73 resolved as shift
WARNING: shift/reduce conflict for READ in state 73 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 73 resolved as shift
WARNING: shift/reduce conflict for IF in state 73 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 73 resolved as shift
WARNING: shift/reduce conflict for FOR in state 73 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 73 resolved as shift
WARNING: shift/reduce conflict for MATRIX in state 73 resolved as shift
WARNING: shift/reduce conflict for MEAN in state 73 resolved as shift
WARNING: shift/reduce conflict for LAYERS in state 73 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 75 resolved as shift
WARNING: shift/reduce conflict for READ in state 75 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 75 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 75 resolved as shift
WARNING: shift/reduce conflict for FOR in state 75 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 75 resolved as shift
WARNING: shift/reduce conflict for MATRIX in state 75 resolved as shift
WARNING: shift/reduce conflict for MEAN in state 75 resolved as shift
WARNING: shift/reduce conflict for LAYERS in state 75 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 167 resolved as shift
WARNING: shift/reduce conflict for ID in state 167 resolved as shift
WARNING: shift/reduce conflict for READ in state 167 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 167 resolved as shift
WARNING: shift/reduce conflict for IF in state 167 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 167 resolved as shift
WARNING: shift/reduce conflict for FOR in state 167 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 167 resolved as shift
WARNING: shift/reduce conflict for MATRIX in state 167 resolved as shift
WARNING: shift/reduce conflict for MEAN in state 167 resolved as shift
WARNING: shift/reduce conflict for LAYERS in state 167 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 175 resolved as shift
WARNING: shift/reduce conflict for ID in state 175 resolved as shift
WARNING: shift/reduce conflict for READ in state 175 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 175 resolved as shift
WARNING: shift/reduce conflict for IF in state 175 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 175 resolved as shift
WARNING: shift/reduce conflict for FOR in state 175 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 175 resolved as shift
WARNING: shift/reduce conflict for MATRIX in state 175 resolved as shift
WARNING: shift/reduce conflict for MEAN in state 175 resolved as shift
WARNING: shift/reduce conflict for LAYERS in state 175 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 201 resolved as shift
WARNING: shift/reduce conflict for ID in state 201 resolved as shift
WARNING: shift/reduce conflict for READ in state 201 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 201 resolved as shift
WARNING: shift/reduce conflict for IF in state 201 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 201 resolved as shift
WARNING: shift/reduce conflict for FOR in state 201 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 201 resolved as shift
WARNING: shift/reduce conflict for MATRIX in state 201 resolved as shift
WARNING: shift/reduce conflict for MEAN in state 201 resolved as shift
WARNING: shift/reduce conflict for LAYERS in state 201 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (decvar -> VAR decvarp)
WARNING: rejected rule (decvar -> <empty>) in state 12
WARNING: reduce/reduce conflict in state 40 resolved using rule (decvar -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 46 resolved using rule (decvar -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 46
WARNING: reduce/reduce conflict in state 71 resolved using rule (decvar -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 71
WARNING: reduce/reduce conflict in state 73 resolved using rule (decvar -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 73
WARNING: reduce/reduce conflict in state 75 resolved using rule (decvar -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 75
WARNING: reduce/reduce conflict in state 167 resolved using rule (decvar -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 167
WARNING: reduce/reduce conflict in state 175 resolved using rule (decvar -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 175
WARNING: reduce/reduce conflict in state 201 resolved using rule (decvar -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 201
WARNING: Rule (body -> <empty>) is never reduced
