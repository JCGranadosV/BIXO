Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    CHAR
    COLON
    END
    FUNCESP
    GTE
    IFEQUAL
    LTE
    NUMPY
    QUOTE
    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM gotomain ID SEMICOLON decvar modules
Rule 2     gotomain -> <empty>
Rule 3     decvar -> VAR decvarp
Rule 4     decvar -> VAR decvarp decvar
Rule 5     decvar -> <empty>
Rule 6     decvarp -> type decvarpp SEMICOLON
Rule 7     decvarpp -> ID COMMA decvarpp
Rule 8     decvarpp -> ID
Rule 9     type -> INT
Rule 10    type -> FLOAT
Rule 11    function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
Rule 12    decfunc -> ID
Rule 13    voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
Rule 14    mainfunction -> MAIN LPAREN RPAREN LBRACE body RBRACE
Rule 15    modules -> function modules
Rule 16    modules -> voidfunction modules
Rule 17    modules -> function
Rule 18    modules -> voidfunction
Rule 19    body -> decvar statements body
Rule 20    body -> statements body
Rule 21    body -> decvar
Rule 22    body -> <empty>
Rule 23    param -> type ID
Rule 24    param -> type ID COMMA param
Rule 25    param -> <empty>
Rule 26    exp -> texp
Rule 27    exp -> texp OR exp
Rule 28    texp -> gexp
Rule 29    texp -> gexp AND texp
Rule 30    gexp -> mexp
Rule 31    gexp -> mexp gexpp mexp
Rule 32    gexpp -> LT
Rule 33    gexpp -> GT
Rule 34    gexpp -> EQUAL
Rule 35    gexpp -> DIFF
Rule 36    mexp -> t
Rule 37    mexp -> mexp PLUS t
Rule 38    mexp -> mexp MINUS t
Rule 39    t -> f
Rule 40    t -> t MULT f
Rule 41    t -> t DIV f
Rule 42    f -> LPAREN exp RPAREN
Rule 43    f -> CTI
Rule 44    f -> CTF
Rule 45    f -> var
Rule 46    f -> call
Rule 47    statements -> assign
Rule 48    statements -> function
Rule 49    statements -> voidfunction
Rule 50    statements -> call
Rule 51    statements -> read
Rule 52    statements -> print
Rule 53    statements -> if
Rule 54    statements -> while
Rule 55    statements -> for
Rule 56    assign -> var EQUAL exp SEMICOLON
Rule 57    read -> READ LPAREN var RPAREN SEMICOLON
Rule 58    print -> PRINT LPAREN printp SEMICOLON
Rule 59    printp -> exp RPAREN
Rule 60    printp -> exp COMMA printp
Rule 61    var -> ID
Rule 62    call -> ID LPAREN callp RPAREN
Rule 63    callp -> exp SEMICOLON callp
Rule 64    callp -> exp
Rule 65    if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
Rule 66    ifelse -> <empty>
Rule 67    ifelse -> ELSE quadsElse statements
Rule 68    quadsIf -> <empty>
Rule 69    jumpsIf -> <empty>
Rule 70    quadsElse -> <empty>
Rule 71    while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
Rule 72    whilep -> SEMICOLON
Rule 73    whilep -> statements whilep
Rule 74    saveJumps -> <empty>
Rule 75    quadsWhile -> <empty>
Rule 76    jumpsWhile -> <empty>
Rule 77    for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
Rule 78    forp -> RBRACKET
Rule 79    forp -> statements forp
Rule 80    funcesp -> array
Rule 81    funcesp -> matrix
Rule 82    funcesp -> mean
Rule 83    funcesp -> layers
Rule 84    funcesp -> sequential
Rule 85    funcesp -> compile
Rule 86    funcesp -> fit
Rule 87    funcesp -> predict
Rule 88    funcesp -> getweights
Rule 89    array -> ID EQUAL ARRAY LPAREN var arrayp
Rule 90    arrayp -> RPAREN
Rule 91    arrayp -> COMMA var RPAREN
Rule 92    matrix -> ID EQUAL MATRIX LPAREN array matrixp
Rule 93    matrixp -> RPAREN
Rule 94    matrixp -> COMMA array RPAREN
Rule 95    mean -> MEAN LPAREN array RPAREN
Rule 96    layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
Rule 97    sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
Rule 98    sequentialp -> RBRACKET RPAREN
Rule 99    sequentialp -> COMMA layers sequentialp
Rule 100   compile -> sequential DOT COMPILE LPAREN RPAREN
Rule 101   fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
Rule 102   fitp -> TRUE RPAREN
Rule 103   fitp -> FALSE RPAREN
Rule 104   predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
Rule 105   predictp -> INT RBRACKET RPAREN
Rule 106   predictp -> FLOAT RBRACKET RPAREN
Rule 107   getweights -> layers DOT GETWEIGHTS LPAREN RPAREN
Rule 108   empty -> <empty>

Terminals, with rules where they appear

AND                  : 29
ARRAY                : 89
ASSIGN               : 
CHAR                 : 
COLON                : 
COMMA                : 7 24 60 91 94 99 101 101 101
COMPILE              : 100
CTF                  : 44
CTI                  : 43
DIFF                 : 35
DIV                  : 41
DOT                  : 100 101 104 107
ELSE                 : 67
END                  : 
EPOCHS               : 101
EQUAL                : 34 56 89 92 96 96 97 101 101 101 104
FALSE                : 103
FIT                  : 101
FLOAT                : 10 106
FOR                  : 77
FUNCESP              : 
FUNCTION             : 11 13
GETWEIGHTS           : 107
GT                   : 33
GTE                  : 
ID                   : 1 7 8 12 23 24 61 62 89 92 96 97 101 104
IF                   : 65
IFEQUAL              : 
INT                  : 9 96 101 105
LAYERS               : 96
LBRACE               : 11 13 14
LBRACKET             : 77 97 104
LPAREN               : 11 13 14 42 57 58 62 65 71 77 89 92 95 96 97 100 101 104 107
LT                   : 32
LTE                  : 
MAIN                 : 14
MATRIX               : 92
MEAN                 : 95
MINUS                : 38
MULT                 : 40
NUMPY                : 
OR                   : 27
PLUS                 : 37
PREDICT              : 104
PRINT                : 58
PROGRAM              : 1
QUOTE                : 
RBRACE               : 11 13 14
RBRACKET             : 78 98 105 106
READ                 : 57
RPAREN               : 11 13 14 42 57 59 62 65 71 77 90 91 93 94 95 96 98 100 102 103 105 106 107
SEMICOLON            : 1 6 56 57 58 63 72 77 77
SEQUENTIAL           : 97
STRING               : 
TRUE                 : 102
UNITS                : 96
VAR                  : 3 4
VERBOSE              : 101
VOID                 : 13
WHILE                : 71
error                : 

Nonterminals, with rules where they appear

array                : 80 92 94 95 101 101
arrayp               : 89
assign               : 47
body                 : 11 13 14 19 20
call                 : 46 50
callp                : 62 63
compile              : 85
decfunc              : 11 13
decvar               : 1 4 19 21
decvarp              : 3 4
decvarpp             : 6 7
empty                : 
exp                  : 27 42 56 59 60 63 64 65 71 77 77
f                    : 39 40 41
fit                  : 86
fitp                 : 101
for                  : 55
forp                 : 77 79
funcesp              : 
function             : 15 17 48
getweights           : 88
gexp                 : 28 29
gexpp                : 31
gotomain             : 1
if                   : 53
ifelse               : 65
jumpsIf              : 65
jumpsWhile           : 71
layers               : 83 97 99 107
mainfunction         : 
matrix               : 81
matrixp              : 92
mean                 : 82
mexp                 : 30 31 31 37 38
modules              : 1 15 16
param                : 11 13 24
predict              : 87
predictp             : 104
print                : 52
printp               : 58 60
program              : 0
quadsElse            : 67
quadsIf              : 65
quadsWhile           : 71
read                 : 51
saveJumps            : 71
sequential           : 84 100 101 104
sequentialp          : 97 99
statements           : 19 20 65 67 71 73 77 79
t                    : 36 37 38 40 41
texp                 : 26 27 29
type                 : 6 11 23 24
var                  : 45 56 57 77 89 91
voidfunction         : 16 18 49
while                : 54
whilep               : 71 73

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM gotomain ID SEMICOLON decvar modules

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . gotomain ID SEMICOLON decvar modules
    (2) gotomain -> .

    ID              reduce using rule 2 (gotomain -> .)

    gotomain                       shift and go to state 3

state 3

    (1) program -> PROGRAM gotomain . ID SEMICOLON decvar modules

    ID              shift and go to state 4


state 4

    (1) program -> PROGRAM gotomain ID . SEMICOLON decvar modules

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM gotomain ID SEMICOLON . decvar modules
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .

    VAR             shift and go to state 7
    FUNCTION        reduce using rule 5 (decvar -> .)

    decvar                         shift and go to state 6

state 6

    (1) program -> PROGRAM gotomain ID SEMICOLON decvar . modules
    (15) modules -> . function modules
    (16) modules -> . voidfunction modules
    (17) modules -> . function
    (18) modules -> . voidfunction
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE

    FUNCTION        shift and go to state 11

    modules                        shift and go to state 8
    function                       shift and go to state 9
    voidfunction                   shift and go to state 10

state 7

    (3) decvar -> VAR . decvarp
    (4) decvar -> VAR . decvarp decvar
    (6) decvarp -> . type decvarpp SEMICOLON
    (9) type -> . INT
    (10) type -> . FLOAT

    INT             shift and go to state 14
    FLOAT           shift and go to state 15

    decvarp                        shift and go to state 12
    type                           shift and go to state 13

state 8

    (1) program -> PROGRAM gotomain ID SEMICOLON decvar modules .

    $end            reduce using rule 1 (program -> PROGRAM gotomain ID SEMICOLON decvar modules .)


state 9

    (15) modules -> function . modules
    (17) modules -> function .
    (15) modules -> . function modules
    (16) modules -> . voidfunction modules
    (17) modules -> . function
    (18) modules -> . voidfunction
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE

    $end            reduce using rule 17 (modules -> function .)
    FUNCTION        shift and go to state 11

    function                       shift and go to state 9
    modules                        shift and go to state 16
    voidfunction                   shift and go to state 10

state 10

    (16) modules -> voidfunction . modules
    (18) modules -> voidfunction .
    (15) modules -> . function modules
    (16) modules -> . voidfunction modules
    (17) modules -> . function
    (18) modules -> . voidfunction
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE

    $end            reduce using rule 18 (modules -> voidfunction .)
    FUNCTION        shift and go to state 11

    voidfunction                   shift and go to state 10
    modules                        shift and go to state 17
    function                       shift and go to state 9

state 11

    (11) function -> FUNCTION . type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> FUNCTION . VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (9) type -> . INT
    (10) type -> . FLOAT

    VOID            shift and go to state 19
    INT             shift and go to state 14
    FLOAT           shift and go to state 15

    type                           shift and go to state 18

state 12

    (3) decvar -> VAR decvarp .
    (4) decvar -> VAR decvarp . decvar
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .

  ! reduce/reduce conflict for FUNCTION resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for ID resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for READ resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for PRINT resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for IF resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for WHILE resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for FOR resolved using rule 3 (decvar -> VAR decvarp .)
  ! reduce/reduce conflict for RBRACE resolved using rule 3 (decvar -> VAR decvarp .)
    FUNCTION        reduce using rule 3 (decvar -> VAR decvarp .)
    ID              reduce using rule 3 (decvar -> VAR decvarp .)
    READ            reduce using rule 3 (decvar -> VAR decvarp .)
    PRINT           reduce using rule 3 (decvar -> VAR decvarp .)
    IF              reduce using rule 3 (decvar -> VAR decvarp .)
    WHILE           reduce using rule 3 (decvar -> VAR decvarp .)
    FOR             reduce using rule 3 (decvar -> VAR decvarp .)
    RBRACE          reduce using rule 3 (decvar -> VAR decvarp .)
    VAR             shift and go to state 7

  ! FUNCTION        [ reduce using rule 5 (decvar -> .) ]
  ! ID              [ reduce using rule 5 (decvar -> .) ]
  ! READ            [ reduce using rule 5 (decvar -> .) ]
  ! PRINT           [ reduce using rule 5 (decvar -> .) ]
  ! IF              [ reduce using rule 5 (decvar -> .) ]
  ! WHILE           [ reduce using rule 5 (decvar -> .) ]
  ! FOR             [ reduce using rule 5 (decvar -> .) ]
  ! RBRACE          [ reduce using rule 5 (decvar -> .) ]

    decvar                         shift and go to state 20

state 13

    (6) decvarp -> type . decvarpp SEMICOLON
    (7) decvarpp -> . ID COMMA decvarpp
    (8) decvarpp -> . ID

    ID              shift and go to state 22

    decvarpp                       shift and go to state 21

state 14

    (9) type -> INT .

    ID              reduce using rule 9 (type -> INT .)


state 15

    (10) type -> FLOAT .

    ID              reduce using rule 10 (type -> FLOAT .)


state 16

    (15) modules -> function modules .

    $end            reduce using rule 15 (modules -> function modules .)


state 17

    (16) modules -> voidfunction modules .

    $end            reduce using rule 16 (modules -> voidfunction modules .)


state 18

    (11) function -> FUNCTION type . decfunc LPAREN param RPAREN LBRACE body RBRACE
    (12) decfunc -> . ID

    ID              shift and go to state 24

    decfunc                        shift and go to state 23

state 19

    (13) voidfunction -> FUNCTION VOID . decfunc LPAREN param RPAREN LBRACE body RBRACE
    (12) decfunc -> . ID

    ID              shift and go to state 24

    decfunc                        shift and go to state 25

state 20

    (4) decvar -> VAR decvarp decvar .

    FUNCTION        reduce using rule 4 (decvar -> VAR decvarp decvar .)
    ID              reduce using rule 4 (decvar -> VAR decvarp decvar .)
    READ            reduce using rule 4 (decvar -> VAR decvarp decvar .)
    PRINT           reduce using rule 4 (decvar -> VAR decvarp decvar .)
    IF              reduce using rule 4 (decvar -> VAR decvarp decvar .)
    WHILE           reduce using rule 4 (decvar -> VAR decvarp decvar .)
    FOR             reduce using rule 4 (decvar -> VAR decvarp decvar .)
    RBRACE          reduce using rule 4 (decvar -> VAR decvarp decvar .)


state 21

    (6) decvarp -> type decvarpp . SEMICOLON

    SEMICOLON       shift and go to state 26


state 22

    (7) decvarpp -> ID . COMMA decvarpp
    (8) decvarpp -> ID .

    COMMA           shift and go to state 27
    SEMICOLON       reduce using rule 8 (decvarpp -> ID .)


state 23

    (11) function -> FUNCTION type decfunc . LPAREN param RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 28


state 24

    (12) decfunc -> ID .

    LPAREN          reduce using rule 12 (decfunc -> ID .)


state 25

    (13) voidfunction -> FUNCTION VOID decfunc . LPAREN param RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 29


state 26

    (6) decvarp -> type decvarpp SEMICOLON .

    VAR             reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    FUNCTION        reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    ID              reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    READ            reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    PRINT           reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    IF              reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    WHILE           reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    FOR             reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)
    RBRACE          reduce using rule 6 (decvarp -> type decvarpp SEMICOLON .)


state 27

    (7) decvarpp -> ID COMMA . decvarpp
    (7) decvarpp -> . ID COMMA decvarpp
    (8) decvarpp -> . ID

    ID              shift and go to state 22

    decvarpp                       shift and go to state 30

state 28

    (11) function -> FUNCTION type decfunc LPAREN . param RPAREN LBRACE body RBRACE
    (23) param -> . type ID
    (24) param -> . type ID COMMA param
    (25) param -> .
    (9) type -> . INT
    (10) type -> . FLOAT

    RPAREN          reduce using rule 25 (param -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15

    type                           shift and go to state 31
    param                          shift and go to state 32

state 29

    (13) voidfunction -> FUNCTION VOID decfunc LPAREN . param RPAREN LBRACE body RBRACE
    (23) param -> . type ID
    (24) param -> . type ID COMMA param
    (25) param -> .
    (9) type -> . INT
    (10) type -> . FLOAT

    RPAREN          reduce using rule 25 (param -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15

    param                          shift and go to state 33
    type                           shift and go to state 31

state 30

    (7) decvarpp -> ID COMMA decvarpp .

    SEMICOLON       reduce using rule 7 (decvarpp -> ID COMMA decvarpp .)


state 31

    (23) param -> type . ID
    (24) param -> type . ID COMMA param

    ID              shift and go to state 34


state 32

    (11) function -> FUNCTION type decfunc LPAREN param . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 35


state 33

    (13) voidfunction -> FUNCTION VOID decfunc LPAREN param . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 36


state 34

    (23) param -> type ID .
    (24) param -> type ID . COMMA param

    RPAREN          reduce using rule 23 (param -> type ID .)
    COMMA           shift and go to state 37


state 35

    (11) function -> FUNCTION type decfunc LPAREN param RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 38


state 36

    (13) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 39


state 37

    (24) param -> type ID COMMA . param
    (23) param -> . type ID
    (24) param -> . type ID COMMA param
    (25) param -> .
    (9) type -> . INT
    (10) type -> . FLOAT

    RPAREN          reduce using rule 25 (param -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15

    type                           shift and go to state 31
    param                          shift and go to state 40

state 38

    (11) function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE . body RBRACE
    (19) body -> . decvar statements body
    (20) body -> . statements body
    (21) body -> . decvar
    (22) body -> .
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .
    (47) statements -> . assign
    (48) statements -> . function
    (49) statements -> . voidfunction
    (50) statements -> . call
    (51) statements -> . read
    (52) statements -> . print
    (53) statements -> . if
    (54) statements -> . while
    (55) statements -> . for
    (56) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (62) call -> . ID LPAREN callp RPAREN
    (57) read -> . READ LPAREN var RPAREN SEMICOLON
    (58) print -> . PRINT LPAREN printp SEMICOLON
    (65) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (71) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (77) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (61) var -> . ID

  ! reduce/reduce conflict for RBRACE resolved using rule 5 (decvar -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    VAR             shift and go to state 7
    RBRACE          reduce using rule 5 (decvar -> .)
    FUNCTION        shift and go to state 11
    ID              shift and go to state 54
    READ            shift and go to state 55
    PRINT           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59

  ! RBRACE          [ reduce using rule 22 (body -> .) ]
  ! FUNCTION        [ reduce using rule 5 (decvar -> .) ]
  ! ID              [ reduce using rule 5 (decvar -> .) ]
  ! READ            [ reduce using rule 5 (decvar -> .) ]
  ! PRINT           [ reduce using rule 5 (decvar -> .) ]
  ! IF              [ reduce using rule 5 (decvar -> .) ]
  ! WHILE           [ reduce using rule 5 (decvar -> .) ]
  ! FOR             [ reduce using rule 5 (decvar -> .) ]

    body                           shift and go to state 41
    decvar                         shift and go to state 42
    statements                     shift and go to state 43
    assign                         shift and go to state 44
    function                       shift and go to state 45
    voidfunction                   shift and go to state 46
    call                           shift and go to state 47
    read                           shift and go to state 48
    print                          shift and go to state 49
    if                             shift and go to state 50
    while                          shift and go to state 51
    for                            shift and go to state 52
    var                            shift and go to state 53

state 39

    (13) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE . body RBRACE
    (19) body -> . decvar statements body
    (20) body -> . statements body
    (21) body -> . decvar
    (22) body -> .
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .
    (47) statements -> . assign
    (48) statements -> . function
    (49) statements -> . voidfunction
    (50) statements -> . call
    (51) statements -> . read
    (52) statements -> . print
    (53) statements -> . if
    (54) statements -> . while
    (55) statements -> . for
    (56) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (62) call -> . ID LPAREN callp RPAREN
    (57) read -> . READ LPAREN var RPAREN SEMICOLON
    (58) print -> . PRINT LPAREN printp SEMICOLON
    (65) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (71) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (77) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (61) var -> . ID

  ! reduce/reduce conflict for RBRACE resolved using rule 5 (decvar -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    VAR             shift and go to state 7
    RBRACE          reduce using rule 5 (decvar -> .)
    FUNCTION        shift and go to state 11
    ID              shift and go to state 54
    READ            shift and go to state 55
    PRINT           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59

  ! RBRACE          [ reduce using rule 22 (body -> .) ]
  ! FUNCTION        [ reduce using rule 5 (decvar -> .) ]
  ! ID              [ reduce using rule 5 (decvar -> .) ]
  ! READ            [ reduce using rule 5 (decvar -> .) ]
  ! PRINT           [ reduce using rule 5 (decvar -> .) ]
  ! IF              [ reduce using rule 5 (decvar -> .) ]
  ! WHILE           [ reduce using rule 5 (decvar -> .) ]
  ! FOR             [ reduce using rule 5 (decvar -> .) ]

    body                           shift and go to state 60
    decvar                         shift and go to state 42
    statements                     shift and go to state 43
    assign                         shift and go to state 44
    function                       shift and go to state 45
    voidfunction                   shift and go to state 46
    call                           shift and go to state 47
    read                           shift and go to state 48
    print                          shift and go to state 49
    if                             shift and go to state 50
    while                          shift and go to state 51
    for                            shift and go to state 52
    var                            shift and go to state 53

state 40

    (24) param -> type ID COMMA param .

    RPAREN          reduce using rule 24 (param -> type ID COMMA param .)


state 41

    (11) function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 61


state 42

    (19) body -> decvar . statements body
    (21) body -> decvar .
    (47) statements -> . assign
    (48) statements -> . function
    (49) statements -> . voidfunction
    (50) statements -> . call
    (51) statements -> . read
    (52) statements -> . print
    (53) statements -> . if
    (54) statements -> . while
    (55) statements -> . for
    (56) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (62) call -> . ID LPAREN callp RPAREN
    (57) read -> . READ LPAREN var RPAREN SEMICOLON
    (58) print -> . PRINT LPAREN printp SEMICOLON
    (65) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (71) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (77) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (61) var -> . ID

    RBRACE          reduce using rule 21 (body -> decvar .)
    FUNCTION        shift and go to state 11
    ID              shift and go to state 54
    READ            shift and go to state 55
    PRINT           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59

    statements                     shift and go to state 62
    assign                         shift and go to state 44
    function                       shift and go to state 45
    voidfunction                   shift and go to state 46
    call                           shift and go to state 47
    read                           shift and go to state 48
    print                          shift and go to state 49
    if                             shift and go to state 50
    while                          shift and go to state 51
    for                            shift and go to state 52
    var                            shift and go to state 53

state 43

    (20) body -> statements . body
    (19) body -> . decvar statements body
    (20) body -> . statements body
    (21) body -> . decvar
    (22) body -> .
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .
    (47) statements -> . assign
    (48) statements -> . function
    (49) statements -> . voidfunction
    (50) statements -> . call
    (51) statements -> . read
    (52) statements -> . print
    (53) statements -> . if
    (54) statements -> . while
    (55) statements -> . for
    (56) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (62) call -> . ID LPAREN callp RPAREN
    (57) read -> . READ LPAREN var RPAREN SEMICOLON
    (58) print -> . PRINT LPAREN printp SEMICOLON
    (65) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (71) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (77) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (61) var -> . ID

  ! reduce/reduce conflict for RBRACE resolved using rule 5 (decvar -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    VAR             shift and go to state 7
    RBRACE          reduce using rule 5 (decvar -> .)
    FUNCTION        shift and go to state 11
    ID              shift and go to state 54
    READ            shift and go to state 55
    PRINT           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59

  ! RBRACE          [ reduce using rule 22 (body -> .) ]
  ! FUNCTION        [ reduce using rule 5 (decvar -> .) ]
  ! ID              [ reduce using rule 5 (decvar -> .) ]
  ! READ            [ reduce using rule 5 (decvar -> .) ]
  ! PRINT           [ reduce using rule 5 (decvar -> .) ]
  ! IF              [ reduce using rule 5 (decvar -> .) ]
  ! WHILE           [ reduce using rule 5 (decvar -> .) ]
  ! FOR             [ reduce using rule 5 (decvar -> .) ]

    statements                     shift and go to state 43
    body                           shift and go to state 63
    decvar                         shift and go to state 42
    assign                         shift and go to state 44
    function                       shift and go to state 45
    voidfunction                   shift and go to state 46
    call                           shift and go to state 47
    read                           shift and go to state 48
    print                          shift and go to state 49
    if                             shift and go to state 50
    while                          shift and go to state 51
    for                            shift and go to state 52
    var                            shift and go to state 53

state 44

    (47) statements -> assign .

    VAR             reduce using rule 47 (statements -> assign .)
    FUNCTION        reduce using rule 47 (statements -> assign .)
    ID              reduce using rule 47 (statements -> assign .)
    READ            reduce using rule 47 (statements -> assign .)
    PRINT           reduce using rule 47 (statements -> assign .)
    IF              reduce using rule 47 (statements -> assign .)
    WHILE           reduce using rule 47 (statements -> assign .)
    FOR             reduce using rule 47 (statements -> assign .)
    RBRACE          reduce using rule 47 (statements -> assign .)
    ELSE            reduce using rule 47 (statements -> assign .)
    SEMICOLON       reduce using rule 47 (statements -> assign .)
    RBRACKET        reduce using rule 47 (statements -> assign .)


state 45

    (48) statements -> function .

    VAR             reduce using rule 48 (statements -> function .)
    FUNCTION        reduce using rule 48 (statements -> function .)
    ID              reduce using rule 48 (statements -> function .)
    READ            reduce using rule 48 (statements -> function .)
    PRINT           reduce using rule 48 (statements -> function .)
    IF              reduce using rule 48 (statements -> function .)
    WHILE           reduce using rule 48 (statements -> function .)
    FOR             reduce using rule 48 (statements -> function .)
    RBRACE          reduce using rule 48 (statements -> function .)
    ELSE            reduce using rule 48 (statements -> function .)
    SEMICOLON       reduce using rule 48 (statements -> function .)
    RBRACKET        reduce using rule 48 (statements -> function .)


state 46

    (49) statements -> voidfunction .

    VAR             reduce using rule 49 (statements -> voidfunction .)
    FUNCTION        reduce using rule 49 (statements -> voidfunction .)
    ID              reduce using rule 49 (statements -> voidfunction .)
    READ            reduce using rule 49 (statements -> voidfunction .)
    PRINT           reduce using rule 49 (statements -> voidfunction .)
    IF              reduce using rule 49 (statements -> voidfunction .)
    WHILE           reduce using rule 49 (statements -> voidfunction .)
    FOR             reduce using rule 49 (statements -> voidfunction .)
    RBRACE          reduce using rule 49 (statements -> voidfunction .)
    ELSE            reduce using rule 49 (statements -> voidfunction .)
    SEMICOLON       reduce using rule 49 (statements -> voidfunction .)
    RBRACKET        reduce using rule 49 (statements -> voidfunction .)


state 47

    (50) statements -> call .

    VAR             reduce using rule 50 (statements -> call .)
    FUNCTION        reduce using rule 50 (statements -> call .)
    ID              reduce using rule 50 (statements -> call .)
    READ            reduce using rule 50 (statements -> call .)
    PRINT           reduce using rule 50 (statements -> call .)
    IF              reduce using rule 50 (statements -> call .)
    WHILE           reduce using rule 50 (statements -> call .)
    FOR             reduce using rule 50 (statements -> call .)
    RBRACE          reduce using rule 50 (statements -> call .)
    ELSE            reduce using rule 50 (statements -> call .)
    SEMICOLON       reduce using rule 50 (statements -> call .)
    RBRACKET        reduce using rule 50 (statements -> call .)


state 48

    (51) statements -> read .

    VAR             reduce using rule 51 (statements -> read .)
    FUNCTION        reduce using rule 51 (statements -> read .)
    ID              reduce using rule 51 (statements -> read .)
    READ            reduce using rule 51 (statements -> read .)
    PRINT           reduce using rule 51 (statements -> read .)
    IF              reduce using rule 51 (statements -> read .)
    WHILE           reduce using rule 51 (statements -> read .)
    FOR             reduce using rule 51 (statements -> read .)
    RBRACE          reduce using rule 51 (statements -> read .)
    ELSE            reduce using rule 51 (statements -> read .)
    SEMICOLON       reduce using rule 51 (statements -> read .)
    RBRACKET        reduce using rule 51 (statements -> read .)


state 49

    (52) statements -> print .

    VAR             reduce using rule 52 (statements -> print .)
    FUNCTION        reduce using rule 52 (statements -> print .)
    ID              reduce using rule 52 (statements -> print .)
    READ            reduce using rule 52 (statements -> print .)
    PRINT           reduce using rule 52 (statements -> print .)
    IF              reduce using rule 52 (statements -> print .)
    WHILE           reduce using rule 52 (statements -> print .)
    FOR             reduce using rule 52 (statements -> print .)
    RBRACE          reduce using rule 52 (statements -> print .)
    ELSE            reduce using rule 52 (statements -> print .)
    SEMICOLON       reduce using rule 52 (statements -> print .)
    RBRACKET        reduce using rule 52 (statements -> print .)


state 50

    (53) statements -> if .

    VAR             reduce using rule 53 (statements -> if .)
    FUNCTION        reduce using rule 53 (statements -> if .)
    ID              reduce using rule 53 (statements -> if .)
    READ            reduce using rule 53 (statements -> if .)
    PRINT           reduce using rule 53 (statements -> if .)
    IF              reduce using rule 53 (statements -> if .)
    WHILE           reduce using rule 53 (statements -> if .)
    FOR             reduce using rule 53 (statements -> if .)
    RBRACE          reduce using rule 53 (statements -> if .)
    ELSE            reduce using rule 53 (statements -> if .)
    SEMICOLON       reduce using rule 53 (statements -> if .)
    RBRACKET        reduce using rule 53 (statements -> if .)


state 51

    (54) statements -> while .

    VAR             reduce using rule 54 (statements -> while .)
    FUNCTION        reduce using rule 54 (statements -> while .)
    ID              reduce using rule 54 (statements -> while .)
    READ            reduce using rule 54 (statements -> while .)
    PRINT           reduce using rule 54 (statements -> while .)
    IF              reduce using rule 54 (statements -> while .)
    WHILE           reduce using rule 54 (statements -> while .)
    FOR             reduce using rule 54 (statements -> while .)
    RBRACE          reduce using rule 54 (statements -> while .)
    ELSE            reduce using rule 54 (statements -> while .)
    SEMICOLON       reduce using rule 54 (statements -> while .)
    RBRACKET        reduce using rule 54 (statements -> while .)


state 52

    (55) statements -> for .

    VAR             reduce using rule 55 (statements -> for .)
    FUNCTION        reduce using rule 55 (statements -> for .)
    ID              reduce using rule 55 (statements -> for .)
    READ            reduce using rule 55 (statements -> for .)
    PRINT           reduce using rule 55 (statements -> for .)
    IF              reduce using rule 55 (statements -> for .)
    WHILE           reduce using rule 55 (statements -> for .)
    FOR             reduce using rule 55 (statements -> for .)
    RBRACE          reduce using rule 55 (statements -> for .)
    ELSE            reduce using rule 55 (statements -> for .)
    SEMICOLON       reduce using rule 55 (statements -> for .)
    RBRACKET        reduce using rule 55 (statements -> for .)


state 53

    (56) assign -> var . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 64


state 54

    (62) call -> ID . LPAREN callp RPAREN
    (61) var -> ID .

    LPAREN          shift and go to state 65
    EQUAL           reduce using rule 61 (var -> ID .)


state 55

    (57) read -> READ . LPAREN var RPAREN SEMICOLON

    LPAREN          shift and go to state 66


state 56

    (58) print -> PRINT . LPAREN printp SEMICOLON

    LPAREN          shift and go to state 67


state 57

    (65) if -> IF . LPAREN exp RPAREN quadsIf statements ifelse jumpsIf

    LPAREN          shift and go to state 68


state 58

    (71) while -> WHILE . LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep

    LPAREN          shift and go to state 69


state 59

    (77) for -> FOR . LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp

    LPAREN          shift and go to state 70


state 60

    (13) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 71


state 61

    (11) function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .

    FUNCTION        reduce using rule 11 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    $end            reduce using rule 11 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    VAR             reduce using rule 11 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 11 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    READ            reduce using rule 11 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 11 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 11 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 11 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 11 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 11 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    ELSE            reduce using rule 11 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    SEMICOLON       reduce using rule 11 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RBRACKET        reduce using rule 11 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)


state 62

    (19) body -> decvar statements . body
    (19) body -> . decvar statements body
    (20) body -> . statements body
    (21) body -> . decvar
    (22) body -> .
    (3) decvar -> . VAR decvarp
    (4) decvar -> . VAR decvarp decvar
    (5) decvar -> .
    (47) statements -> . assign
    (48) statements -> . function
    (49) statements -> . voidfunction
    (50) statements -> . call
    (51) statements -> . read
    (52) statements -> . print
    (53) statements -> . if
    (54) statements -> . while
    (55) statements -> . for
    (56) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (62) call -> . ID LPAREN callp RPAREN
    (57) read -> . READ LPAREN var RPAREN SEMICOLON
    (58) print -> . PRINT LPAREN printp SEMICOLON
    (65) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (71) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (77) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (61) var -> . ID

  ! reduce/reduce conflict for RBRACE resolved using rule 5 (decvar -> .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    VAR             shift and go to state 7
    RBRACE          reduce using rule 5 (decvar -> .)
    FUNCTION        shift and go to state 11
    ID              shift and go to state 54
    READ            shift and go to state 55
    PRINT           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59

  ! RBRACE          [ reduce using rule 22 (body -> .) ]
  ! FUNCTION        [ reduce using rule 5 (decvar -> .) ]
  ! ID              [ reduce using rule 5 (decvar -> .) ]
  ! READ            [ reduce using rule 5 (decvar -> .) ]
  ! PRINT           [ reduce using rule 5 (decvar -> .) ]
  ! IF              [ reduce using rule 5 (decvar -> .) ]
  ! WHILE           [ reduce using rule 5 (decvar -> .) ]
  ! FOR             [ reduce using rule 5 (decvar -> .) ]

    decvar                         shift and go to state 42
    statements                     shift and go to state 43
    body                           shift and go to state 72
    assign                         shift and go to state 44
    function                       shift and go to state 45
    voidfunction                   shift and go to state 46
    call                           shift and go to state 47
    read                           shift and go to state 48
    print                          shift and go to state 49
    if                             shift and go to state 50
    while                          shift and go to state 51
    for                            shift and go to state 52
    var                            shift and go to state 53

state 63

    (20) body -> statements body .

    RBRACE          reduce using rule 20 (body -> statements body .)


state 64

    (56) assign -> var EQUAL . exp SEMICOLON
    (26) exp -> . texp
    (27) exp -> . texp OR exp
    (28) texp -> . gexp
    (29) texp -> . gexp AND texp
    (30) gexp -> . mexp
    (31) gexp -> . mexp gexpp mexp
    (36) mexp -> . t
    (37) mexp -> . mexp PLUS t
    (38) mexp -> . mexp MINUS t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    var                            shift and go to state 73
    exp                            shift and go to state 74
    texp                           shift and go to state 75
    gexp                           shift and go to state 76
    mexp                           shift and go to state 77
    t                              shift and go to state 78
    f                              shift and go to state 79
    call                           shift and go to state 83

state 65

    (62) call -> ID LPAREN . callp RPAREN
    (63) callp -> . exp SEMICOLON callp
    (64) callp -> . exp
    (26) exp -> . texp
    (27) exp -> . texp OR exp
    (28) texp -> . gexp
    (29) texp -> . gexp AND texp
    (30) gexp -> . mexp
    (31) gexp -> . mexp gexpp mexp
    (36) mexp -> . t
    (37) mexp -> . mexp PLUS t
    (38) mexp -> . mexp MINUS t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    callp                          shift and go to state 85
    exp                            shift and go to state 86
    texp                           shift and go to state 75
    gexp                           shift and go to state 76
    mexp                           shift and go to state 77
    t                              shift and go to state 78
    f                              shift and go to state 79
    var                            shift and go to state 73
    call                           shift and go to state 83

state 66

    (57) read -> READ LPAREN . var RPAREN SEMICOLON
    (61) var -> . ID

    ID              shift and go to state 88

    var                            shift and go to state 87

state 67

    (58) print -> PRINT LPAREN . printp SEMICOLON
    (59) printp -> . exp RPAREN
    (60) printp -> . exp COMMA printp
    (26) exp -> . texp
    (27) exp -> . texp OR exp
    (28) texp -> . gexp
    (29) texp -> . gexp AND texp
    (30) gexp -> . mexp
    (31) gexp -> . mexp gexpp mexp
    (36) mexp -> . t
    (37) mexp -> . mexp PLUS t
    (38) mexp -> . mexp MINUS t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    printp                         shift and go to state 89
    exp                            shift and go to state 90
    texp                           shift and go to state 75
    gexp                           shift and go to state 76
    mexp                           shift and go to state 77
    t                              shift and go to state 78
    f                              shift and go to state 79
    var                            shift and go to state 73
    call                           shift and go to state 83

state 68

    (65) if -> IF LPAREN . exp RPAREN quadsIf statements ifelse jumpsIf
    (26) exp -> . texp
    (27) exp -> . texp OR exp
    (28) texp -> . gexp
    (29) texp -> . gexp AND texp
    (30) gexp -> . mexp
    (31) gexp -> . mexp gexpp mexp
    (36) mexp -> . t
    (37) mexp -> . mexp PLUS t
    (38) mexp -> . mexp MINUS t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    exp                            shift and go to state 91
    texp                           shift and go to state 75
    gexp                           shift and go to state 76
    mexp                           shift and go to state 77
    t                              shift and go to state 78
    f                              shift and go to state 79
    var                            shift and go to state 73
    call                           shift and go to state 83

state 69

    (71) while -> WHILE LPAREN . saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (74) saveJumps -> .

    LPAREN          reduce using rule 74 (saveJumps -> .)
    CTI             reduce using rule 74 (saveJumps -> .)
    CTF             reduce using rule 74 (saveJumps -> .)
    ID              reduce using rule 74 (saveJumps -> .)

    saveJumps                      shift and go to state 92

state 70

    (77) for -> FOR LPAREN . var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (61) var -> . ID

    ID              shift and go to state 88

    var                            shift and go to state 93

state 71

    (13) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .

    FUNCTION        reduce using rule 13 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    $end            reduce using rule 13 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    VAR             reduce using rule 13 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 13 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    READ            reduce using rule 13 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 13 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 13 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 13 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 13 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 13 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    ELSE            reduce using rule 13 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    SEMICOLON       reduce using rule 13 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RBRACKET        reduce using rule 13 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)


state 72

    (19) body -> decvar statements body .

    RBRACE          reduce using rule 19 (body -> decvar statements body .)


state 73

    (45) f -> var .

    MULT            reduce using rule 45 (f -> var .)
    DIV             reduce using rule 45 (f -> var .)
    PLUS            reduce using rule 45 (f -> var .)
    MINUS           reduce using rule 45 (f -> var .)
    LT              reduce using rule 45 (f -> var .)
    GT              reduce using rule 45 (f -> var .)
    EQUAL           reduce using rule 45 (f -> var .)
    DIFF            reduce using rule 45 (f -> var .)
    AND             reduce using rule 45 (f -> var .)
    OR              reduce using rule 45 (f -> var .)
    SEMICOLON       reduce using rule 45 (f -> var .)
    RPAREN          reduce using rule 45 (f -> var .)
    COMMA           reduce using rule 45 (f -> var .)


state 74

    (56) assign -> var EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 94


state 75

    (26) exp -> texp .
    (27) exp -> texp . OR exp

    SEMICOLON       reduce using rule 26 (exp -> texp .)
    RPAREN          reduce using rule 26 (exp -> texp .)
    COMMA           reduce using rule 26 (exp -> texp .)
    OR              shift and go to state 95


state 76

    (28) texp -> gexp .
    (29) texp -> gexp . AND texp

    OR              reduce using rule 28 (texp -> gexp .)
    SEMICOLON       reduce using rule 28 (texp -> gexp .)
    RPAREN          reduce using rule 28 (texp -> gexp .)
    COMMA           reduce using rule 28 (texp -> gexp .)
    AND             shift and go to state 96


state 77

    (30) gexp -> mexp .
    (31) gexp -> mexp . gexpp mexp
    (37) mexp -> mexp . PLUS t
    (38) mexp -> mexp . MINUS t
    (32) gexpp -> . LT
    (33) gexpp -> . GT
    (34) gexpp -> . EQUAL
    (35) gexpp -> . DIFF

    AND             reduce using rule 30 (gexp -> mexp .)
    OR              reduce using rule 30 (gexp -> mexp .)
    SEMICOLON       reduce using rule 30 (gexp -> mexp .)
    RPAREN          reduce using rule 30 (gexp -> mexp .)
    COMMA           reduce using rule 30 (gexp -> mexp .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    LT              shift and go to state 100
    GT              shift and go to state 101
    EQUAL           shift and go to state 102
    DIFF            shift and go to state 103

    gexpp                          shift and go to state 97

state 78

    (36) mexp -> t .
    (40) t -> t . MULT f
    (41) t -> t . DIV f

    PLUS            reduce using rule 36 (mexp -> t .)
    MINUS           reduce using rule 36 (mexp -> t .)
    LT              reduce using rule 36 (mexp -> t .)
    GT              reduce using rule 36 (mexp -> t .)
    EQUAL           reduce using rule 36 (mexp -> t .)
    DIFF            reduce using rule 36 (mexp -> t .)
    AND             reduce using rule 36 (mexp -> t .)
    OR              reduce using rule 36 (mexp -> t .)
    SEMICOLON       reduce using rule 36 (mexp -> t .)
    RPAREN          reduce using rule 36 (mexp -> t .)
    COMMA           reduce using rule 36 (mexp -> t .)
    MULT            shift and go to state 104
    DIV             shift and go to state 105


state 79

    (39) t -> f .

    MULT            reduce using rule 39 (t -> f .)
    DIV             reduce using rule 39 (t -> f .)
    PLUS            reduce using rule 39 (t -> f .)
    MINUS           reduce using rule 39 (t -> f .)
    LT              reduce using rule 39 (t -> f .)
    GT              reduce using rule 39 (t -> f .)
    EQUAL           reduce using rule 39 (t -> f .)
    DIFF            reduce using rule 39 (t -> f .)
    AND             reduce using rule 39 (t -> f .)
    OR              reduce using rule 39 (t -> f .)
    SEMICOLON       reduce using rule 39 (t -> f .)
    RPAREN          reduce using rule 39 (t -> f .)
    COMMA           reduce using rule 39 (t -> f .)


state 80

    (42) f -> LPAREN . exp RPAREN
    (26) exp -> . texp
    (27) exp -> . texp OR exp
    (28) texp -> . gexp
    (29) texp -> . gexp AND texp
    (30) gexp -> . mexp
    (31) gexp -> . mexp gexpp mexp
    (36) mexp -> . t
    (37) mexp -> . mexp PLUS t
    (38) mexp -> . mexp MINUS t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    exp                            shift and go to state 106
    texp                           shift and go to state 75
    gexp                           shift and go to state 76
    mexp                           shift and go to state 77
    t                              shift and go to state 78
    f                              shift and go to state 79
    var                            shift and go to state 73
    call                           shift and go to state 83

state 81

    (43) f -> CTI .

    MULT            reduce using rule 43 (f -> CTI .)
    DIV             reduce using rule 43 (f -> CTI .)
    PLUS            reduce using rule 43 (f -> CTI .)
    MINUS           reduce using rule 43 (f -> CTI .)
    LT              reduce using rule 43 (f -> CTI .)
    GT              reduce using rule 43 (f -> CTI .)
    EQUAL           reduce using rule 43 (f -> CTI .)
    DIFF            reduce using rule 43 (f -> CTI .)
    AND             reduce using rule 43 (f -> CTI .)
    OR              reduce using rule 43 (f -> CTI .)
    SEMICOLON       reduce using rule 43 (f -> CTI .)
    RPAREN          reduce using rule 43 (f -> CTI .)
    COMMA           reduce using rule 43 (f -> CTI .)


state 82

    (44) f -> CTF .

    MULT            reduce using rule 44 (f -> CTF .)
    DIV             reduce using rule 44 (f -> CTF .)
    PLUS            reduce using rule 44 (f -> CTF .)
    MINUS           reduce using rule 44 (f -> CTF .)
    LT              reduce using rule 44 (f -> CTF .)
    GT              reduce using rule 44 (f -> CTF .)
    EQUAL           reduce using rule 44 (f -> CTF .)
    DIFF            reduce using rule 44 (f -> CTF .)
    AND             reduce using rule 44 (f -> CTF .)
    OR              reduce using rule 44 (f -> CTF .)
    SEMICOLON       reduce using rule 44 (f -> CTF .)
    RPAREN          reduce using rule 44 (f -> CTF .)
    COMMA           reduce using rule 44 (f -> CTF .)


state 83

    (46) f -> call .

    MULT            reduce using rule 46 (f -> call .)
    DIV             reduce using rule 46 (f -> call .)
    PLUS            reduce using rule 46 (f -> call .)
    MINUS           reduce using rule 46 (f -> call .)
    LT              reduce using rule 46 (f -> call .)
    GT              reduce using rule 46 (f -> call .)
    EQUAL           reduce using rule 46 (f -> call .)
    DIFF            reduce using rule 46 (f -> call .)
    AND             reduce using rule 46 (f -> call .)
    OR              reduce using rule 46 (f -> call .)
    SEMICOLON       reduce using rule 46 (f -> call .)
    RPAREN          reduce using rule 46 (f -> call .)
    COMMA           reduce using rule 46 (f -> call .)


state 84

    (61) var -> ID .
    (62) call -> ID . LPAREN callp RPAREN

    MULT            reduce using rule 61 (var -> ID .)
    DIV             reduce using rule 61 (var -> ID .)
    PLUS            reduce using rule 61 (var -> ID .)
    MINUS           reduce using rule 61 (var -> ID .)
    LT              reduce using rule 61 (var -> ID .)
    GT              reduce using rule 61 (var -> ID .)
    EQUAL           reduce using rule 61 (var -> ID .)
    DIFF            reduce using rule 61 (var -> ID .)
    AND             reduce using rule 61 (var -> ID .)
    OR              reduce using rule 61 (var -> ID .)
    SEMICOLON       reduce using rule 61 (var -> ID .)
    RPAREN          reduce using rule 61 (var -> ID .)
    COMMA           reduce using rule 61 (var -> ID .)
    LPAREN          shift and go to state 65


state 85

    (62) call -> ID LPAREN callp . RPAREN

    RPAREN          shift and go to state 107


state 86

    (63) callp -> exp . SEMICOLON callp
    (64) callp -> exp .

    SEMICOLON       shift and go to state 108
    RPAREN          reduce using rule 64 (callp -> exp .)


state 87

    (57) read -> READ LPAREN var . RPAREN SEMICOLON

    RPAREN          shift and go to state 109


state 88

    (61) var -> ID .

    RPAREN          reduce using rule 61 (var -> ID .)
    SEMICOLON       reduce using rule 61 (var -> ID .)


state 89

    (58) print -> PRINT LPAREN printp . SEMICOLON

    SEMICOLON       shift and go to state 110


state 90

    (59) printp -> exp . RPAREN
    (60) printp -> exp . COMMA printp

    RPAREN          shift and go to state 111
    COMMA           shift and go to state 112


state 91

    (65) if -> IF LPAREN exp . RPAREN quadsIf statements ifelse jumpsIf

    RPAREN          shift and go to state 113


state 92

    (71) while -> WHILE LPAREN saveJumps . exp RPAREN quadsWhile statements jumpsWhile whilep
    (26) exp -> . texp
    (27) exp -> . texp OR exp
    (28) texp -> . gexp
    (29) texp -> . gexp AND texp
    (30) gexp -> . mexp
    (31) gexp -> . mexp gexpp mexp
    (36) mexp -> . t
    (37) mexp -> . mexp PLUS t
    (38) mexp -> . mexp MINUS t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    exp                            shift and go to state 114
    texp                           shift and go to state 75
    gexp                           shift and go to state 76
    mexp                           shift and go to state 77
    t                              shift and go to state 78
    f                              shift and go to state 79
    var                            shift and go to state 73
    call                           shift and go to state 83

state 93

    (77) for -> FOR LPAREN var . SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp

    SEMICOLON       shift and go to state 115


state 94

    (56) assign -> var EQUAL exp SEMICOLON .

    VAR             reduce using rule 56 (assign -> var EQUAL exp SEMICOLON .)
    FUNCTION        reduce using rule 56 (assign -> var EQUAL exp SEMICOLON .)
    ID              reduce using rule 56 (assign -> var EQUAL exp SEMICOLON .)
    READ            reduce using rule 56 (assign -> var EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 56 (assign -> var EQUAL exp SEMICOLON .)
    IF              reduce using rule 56 (assign -> var EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 56 (assign -> var EQUAL exp SEMICOLON .)
    FOR             reduce using rule 56 (assign -> var EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 56 (assign -> var EQUAL exp SEMICOLON .)
    ELSE            reduce using rule 56 (assign -> var EQUAL exp SEMICOLON .)
    SEMICOLON       reduce using rule 56 (assign -> var EQUAL exp SEMICOLON .)
    RBRACKET        reduce using rule 56 (assign -> var EQUAL exp SEMICOLON .)


state 95

    (27) exp -> texp OR . exp
    (26) exp -> . texp
    (27) exp -> . texp OR exp
    (28) texp -> . gexp
    (29) texp -> . gexp AND texp
    (30) gexp -> . mexp
    (31) gexp -> . mexp gexpp mexp
    (36) mexp -> . t
    (37) mexp -> . mexp PLUS t
    (38) mexp -> . mexp MINUS t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    texp                           shift and go to state 75
    exp                            shift and go to state 116
    gexp                           shift and go to state 76
    mexp                           shift and go to state 77
    t                              shift and go to state 78
    f                              shift and go to state 79
    var                            shift and go to state 73
    call                           shift and go to state 83

state 96

    (29) texp -> gexp AND . texp
    (28) texp -> . gexp
    (29) texp -> . gexp AND texp
    (30) gexp -> . mexp
    (31) gexp -> . mexp gexpp mexp
    (36) mexp -> . t
    (37) mexp -> . mexp PLUS t
    (38) mexp -> . mexp MINUS t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    gexp                           shift and go to state 76
    texp                           shift and go to state 117
    mexp                           shift and go to state 77
    t                              shift and go to state 78
    f                              shift and go to state 79
    var                            shift and go to state 73
    call                           shift and go to state 83

state 97

    (31) gexp -> mexp gexpp . mexp
    (36) mexp -> . t
    (37) mexp -> . mexp PLUS t
    (38) mexp -> . mexp MINUS t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    mexp                           shift and go to state 118
    t                              shift and go to state 78
    f                              shift and go to state 79
    var                            shift and go to state 73
    call                           shift and go to state 83

state 98

    (37) mexp -> mexp PLUS . t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    t                              shift and go to state 119
    f                              shift and go to state 79
    var                            shift and go to state 73
    call                           shift and go to state 83

state 99

    (38) mexp -> mexp MINUS . t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    t                              shift and go to state 120
    f                              shift and go to state 79
    var                            shift and go to state 73
    call                           shift and go to state 83

state 100

    (32) gexpp -> LT .

    LPAREN          reduce using rule 32 (gexpp -> LT .)
    CTI             reduce using rule 32 (gexpp -> LT .)
    CTF             reduce using rule 32 (gexpp -> LT .)
    ID              reduce using rule 32 (gexpp -> LT .)


state 101

    (33) gexpp -> GT .

    LPAREN          reduce using rule 33 (gexpp -> GT .)
    CTI             reduce using rule 33 (gexpp -> GT .)
    CTF             reduce using rule 33 (gexpp -> GT .)
    ID              reduce using rule 33 (gexpp -> GT .)


state 102

    (34) gexpp -> EQUAL .

    LPAREN          reduce using rule 34 (gexpp -> EQUAL .)
    CTI             reduce using rule 34 (gexpp -> EQUAL .)
    CTF             reduce using rule 34 (gexpp -> EQUAL .)
    ID              reduce using rule 34 (gexpp -> EQUAL .)


state 103

    (35) gexpp -> DIFF .

    LPAREN          reduce using rule 35 (gexpp -> DIFF .)
    CTI             reduce using rule 35 (gexpp -> DIFF .)
    CTF             reduce using rule 35 (gexpp -> DIFF .)
    ID              reduce using rule 35 (gexpp -> DIFF .)


state 104

    (40) t -> t MULT . f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    f                              shift and go to state 121
    var                            shift and go to state 73
    call                           shift and go to state 83

state 105

    (41) t -> t DIV . f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    f                              shift and go to state 122
    var                            shift and go to state 73
    call                           shift and go to state 83

state 106

    (42) f -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 123


state 107

    (62) call -> ID LPAREN callp RPAREN .

    VAR             reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    FUNCTION        reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    ID              reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    READ            reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    PRINT           reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    IF              reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    WHILE           reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    FOR             reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    RBRACE          reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    MULT            reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    DIV             reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    PLUS            reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    MINUS           reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    LT              reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    GT              reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    EQUAL           reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    DIFF            reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    AND             reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    OR              reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    SEMICOLON       reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    RPAREN          reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    COMMA           reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    ELSE            reduce using rule 62 (call -> ID LPAREN callp RPAREN .)
    RBRACKET        reduce using rule 62 (call -> ID LPAREN callp RPAREN .)


state 108

    (63) callp -> exp SEMICOLON . callp
    (63) callp -> . exp SEMICOLON callp
    (64) callp -> . exp
    (26) exp -> . texp
    (27) exp -> . texp OR exp
    (28) texp -> . gexp
    (29) texp -> . gexp AND texp
    (30) gexp -> . mexp
    (31) gexp -> . mexp gexpp mexp
    (36) mexp -> . t
    (37) mexp -> . mexp PLUS t
    (38) mexp -> . mexp MINUS t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    exp                            shift and go to state 86
    callp                          shift and go to state 124
    texp                           shift and go to state 75
    gexp                           shift and go to state 76
    mexp                           shift and go to state 77
    t                              shift and go to state 78
    f                              shift and go to state 79
    var                            shift and go to state 73
    call                           shift and go to state 83

state 109

    (57) read -> READ LPAREN var RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 125


state 110

    (58) print -> PRINT LPAREN printp SEMICOLON .

    VAR             reduce using rule 58 (print -> PRINT LPAREN printp SEMICOLON .)
    FUNCTION        reduce using rule 58 (print -> PRINT LPAREN printp SEMICOLON .)
    ID              reduce using rule 58 (print -> PRINT LPAREN printp SEMICOLON .)
    READ            reduce using rule 58 (print -> PRINT LPAREN printp SEMICOLON .)
    PRINT           reduce using rule 58 (print -> PRINT LPAREN printp SEMICOLON .)
    IF              reduce using rule 58 (print -> PRINT LPAREN printp SEMICOLON .)
    WHILE           reduce using rule 58 (print -> PRINT LPAREN printp SEMICOLON .)
    FOR             reduce using rule 58 (print -> PRINT LPAREN printp SEMICOLON .)
    RBRACE          reduce using rule 58 (print -> PRINT LPAREN printp SEMICOLON .)
    ELSE            reduce using rule 58 (print -> PRINT LPAREN printp SEMICOLON .)
    SEMICOLON       reduce using rule 58 (print -> PRINT LPAREN printp SEMICOLON .)
    RBRACKET        reduce using rule 58 (print -> PRINT LPAREN printp SEMICOLON .)


state 111

    (59) printp -> exp RPAREN .

    SEMICOLON       reduce using rule 59 (printp -> exp RPAREN .)


state 112

    (60) printp -> exp COMMA . printp
    (59) printp -> . exp RPAREN
    (60) printp -> . exp COMMA printp
    (26) exp -> . texp
    (27) exp -> . texp OR exp
    (28) texp -> . gexp
    (29) texp -> . gexp AND texp
    (30) gexp -> . mexp
    (31) gexp -> . mexp gexpp mexp
    (36) mexp -> . t
    (37) mexp -> . mexp PLUS t
    (38) mexp -> . mexp MINUS t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    exp                            shift and go to state 90
    printp                         shift and go to state 126
    texp                           shift and go to state 75
    gexp                           shift and go to state 76
    mexp                           shift and go to state 77
    t                              shift and go to state 78
    f                              shift and go to state 79
    var                            shift and go to state 73
    call                           shift and go to state 83

state 113

    (65) if -> IF LPAREN exp RPAREN . quadsIf statements ifelse jumpsIf
    (68) quadsIf -> .

    FUNCTION        reduce using rule 68 (quadsIf -> .)
    ID              reduce using rule 68 (quadsIf -> .)
    READ            reduce using rule 68 (quadsIf -> .)
    PRINT           reduce using rule 68 (quadsIf -> .)
    IF              reduce using rule 68 (quadsIf -> .)
    WHILE           reduce using rule 68 (quadsIf -> .)
    FOR             reduce using rule 68 (quadsIf -> .)

    quadsIf                        shift and go to state 127

state 114

    (71) while -> WHILE LPAREN saveJumps exp . RPAREN quadsWhile statements jumpsWhile whilep

    RPAREN          shift and go to state 128


state 115

    (77) for -> FOR LPAREN var SEMICOLON . exp SEMICOLON exp RPAREN LBRACKET statements forp
    (26) exp -> . texp
    (27) exp -> . texp OR exp
    (28) texp -> . gexp
    (29) texp -> . gexp AND texp
    (30) gexp -> . mexp
    (31) gexp -> . mexp gexpp mexp
    (36) mexp -> . t
    (37) mexp -> . mexp PLUS t
    (38) mexp -> . mexp MINUS t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    var                            shift and go to state 73
    exp                            shift and go to state 129
    texp                           shift and go to state 75
    gexp                           shift and go to state 76
    mexp                           shift and go to state 77
    t                              shift and go to state 78
    f                              shift and go to state 79
    call                           shift and go to state 83

state 116

    (27) exp -> texp OR exp .

    SEMICOLON       reduce using rule 27 (exp -> texp OR exp .)
    RPAREN          reduce using rule 27 (exp -> texp OR exp .)
    COMMA           reduce using rule 27 (exp -> texp OR exp .)


state 117

    (29) texp -> gexp AND texp .

    OR              reduce using rule 29 (texp -> gexp AND texp .)
    SEMICOLON       reduce using rule 29 (texp -> gexp AND texp .)
    RPAREN          reduce using rule 29 (texp -> gexp AND texp .)
    COMMA           reduce using rule 29 (texp -> gexp AND texp .)


state 118

    (31) gexp -> mexp gexpp mexp .
    (37) mexp -> mexp . PLUS t
    (38) mexp -> mexp . MINUS t

    AND             reduce using rule 31 (gexp -> mexp gexpp mexp .)
    OR              reduce using rule 31 (gexp -> mexp gexpp mexp .)
    SEMICOLON       reduce using rule 31 (gexp -> mexp gexpp mexp .)
    RPAREN          reduce using rule 31 (gexp -> mexp gexpp mexp .)
    COMMA           reduce using rule 31 (gexp -> mexp gexpp mexp .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99


state 119

    (37) mexp -> mexp PLUS t .
    (40) t -> t . MULT f
    (41) t -> t . DIV f

    PLUS            reduce using rule 37 (mexp -> mexp PLUS t .)
    MINUS           reduce using rule 37 (mexp -> mexp PLUS t .)
    LT              reduce using rule 37 (mexp -> mexp PLUS t .)
    GT              reduce using rule 37 (mexp -> mexp PLUS t .)
    EQUAL           reduce using rule 37 (mexp -> mexp PLUS t .)
    DIFF            reduce using rule 37 (mexp -> mexp PLUS t .)
    AND             reduce using rule 37 (mexp -> mexp PLUS t .)
    OR              reduce using rule 37 (mexp -> mexp PLUS t .)
    SEMICOLON       reduce using rule 37 (mexp -> mexp PLUS t .)
    RPAREN          reduce using rule 37 (mexp -> mexp PLUS t .)
    COMMA           reduce using rule 37 (mexp -> mexp PLUS t .)
    MULT            shift and go to state 104
    DIV             shift and go to state 105


state 120

    (38) mexp -> mexp MINUS t .
    (40) t -> t . MULT f
    (41) t -> t . DIV f

    PLUS            reduce using rule 38 (mexp -> mexp MINUS t .)
    MINUS           reduce using rule 38 (mexp -> mexp MINUS t .)
    LT              reduce using rule 38 (mexp -> mexp MINUS t .)
    GT              reduce using rule 38 (mexp -> mexp MINUS t .)
    EQUAL           reduce using rule 38 (mexp -> mexp MINUS t .)
    DIFF            reduce using rule 38 (mexp -> mexp MINUS t .)
    AND             reduce using rule 38 (mexp -> mexp MINUS t .)
    OR              reduce using rule 38 (mexp -> mexp MINUS t .)
    SEMICOLON       reduce using rule 38 (mexp -> mexp MINUS t .)
    RPAREN          reduce using rule 38 (mexp -> mexp MINUS t .)
    COMMA           reduce using rule 38 (mexp -> mexp MINUS t .)
    MULT            shift and go to state 104
    DIV             shift and go to state 105


state 121

    (40) t -> t MULT f .

    MULT            reduce using rule 40 (t -> t MULT f .)
    DIV             reduce using rule 40 (t -> t MULT f .)
    PLUS            reduce using rule 40 (t -> t MULT f .)
    MINUS           reduce using rule 40 (t -> t MULT f .)
    LT              reduce using rule 40 (t -> t MULT f .)
    GT              reduce using rule 40 (t -> t MULT f .)
    EQUAL           reduce using rule 40 (t -> t MULT f .)
    DIFF            reduce using rule 40 (t -> t MULT f .)
    AND             reduce using rule 40 (t -> t MULT f .)
    OR              reduce using rule 40 (t -> t MULT f .)
    SEMICOLON       reduce using rule 40 (t -> t MULT f .)
    RPAREN          reduce using rule 40 (t -> t MULT f .)
    COMMA           reduce using rule 40 (t -> t MULT f .)


state 122

    (41) t -> t DIV f .

    MULT            reduce using rule 41 (t -> t DIV f .)
    DIV             reduce using rule 41 (t -> t DIV f .)
    PLUS            reduce using rule 41 (t -> t DIV f .)
    MINUS           reduce using rule 41 (t -> t DIV f .)
    LT              reduce using rule 41 (t -> t DIV f .)
    GT              reduce using rule 41 (t -> t DIV f .)
    EQUAL           reduce using rule 41 (t -> t DIV f .)
    DIFF            reduce using rule 41 (t -> t DIV f .)
    AND             reduce using rule 41 (t -> t DIV f .)
    OR              reduce using rule 41 (t -> t DIV f .)
    SEMICOLON       reduce using rule 41 (t -> t DIV f .)
    RPAREN          reduce using rule 41 (t -> t DIV f .)
    COMMA           reduce using rule 41 (t -> t DIV f .)


state 123

    (42) f -> LPAREN exp RPAREN .

    MULT            reduce using rule 42 (f -> LPAREN exp RPAREN .)
    DIV             reduce using rule 42 (f -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 42 (f -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 42 (f -> LPAREN exp RPAREN .)
    LT              reduce using rule 42 (f -> LPAREN exp RPAREN .)
    GT              reduce using rule 42 (f -> LPAREN exp RPAREN .)
    EQUAL           reduce using rule 42 (f -> LPAREN exp RPAREN .)
    DIFF            reduce using rule 42 (f -> LPAREN exp RPAREN .)
    AND             reduce using rule 42 (f -> LPAREN exp RPAREN .)
    OR              reduce using rule 42 (f -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 42 (f -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 42 (f -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 42 (f -> LPAREN exp RPAREN .)


state 124

    (63) callp -> exp SEMICOLON callp .

    RPAREN          reduce using rule 63 (callp -> exp SEMICOLON callp .)


state 125

    (57) read -> READ LPAREN var RPAREN SEMICOLON .

    VAR             reduce using rule 57 (read -> READ LPAREN var RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 57 (read -> READ LPAREN var RPAREN SEMICOLON .)
    ID              reduce using rule 57 (read -> READ LPAREN var RPAREN SEMICOLON .)
    READ            reduce using rule 57 (read -> READ LPAREN var RPAREN SEMICOLON .)
    PRINT           reduce using rule 57 (read -> READ LPAREN var RPAREN SEMICOLON .)
    IF              reduce using rule 57 (read -> READ LPAREN var RPAREN SEMICOLON .)
    WHILE           reduce using rule 57 (read -> READ LPAREN var RPAREN SEMICOLON .)
    FOR             reduce using rule 57 (read -> READ LPAREN var RPAREN SEMICOLON .)
    RBRACE          reduce using rule 57 (read -> READ LPAREN var RPAREN SEMICOLON .)
    ELSE            reduce using rule 57 (read -> READ LPAREN var RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 57 (read -> READ LPAREN var RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 57 (read -> READ LPAREN var RPAREN SEMICOLON .)


state 126

    (60) printp -> exp COMMA printp .

    SEMICOLON       reduce using rule 60 (printp -> exp COMMA printp .)


state 127

    (65) if -> IF LPAREN exp RPAREN quadsIf . statements ifelse jumpsIf
    (47) statements -> . assign
    (48) statements -> . function
    (49) statements -> . voidfunction
    (50) statements -> . call
    (51) statements -> . read
    (52) statements -> . print
    (53) statements -> . if
    (54) statements -> . while
    (55) statements -> . for
    (56) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (62) call -> . ID LPAREN callp RPAREN
    (57) read -> . READ LPAREN var RPAREN SEMICOLON
    (58) print -> . PRINT LPAREN printp SEMICOLON
    (65) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (71) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (77) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (61) var -> . ID

    FUNCTION        shift and go to state 11
    ID              shift and go to state 54
    READ            shift and go to state 55
    PRINT           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59

    statements                     shift and go to state 130
    assign                         shift and go to state 44
    function                       shift and go to state 45
    voidfunction                   shift and go to state 46
    call                           shift and go to state 47
    read                           shift and go to state 48
    print                          shift and go to state 49
    if                             shift and go to state 50
    while                          shift and go to state 51
    for                            shift and go to state 52
    var                            shift and go to state 53

state 128

    (71) while -> WHILE LPAREN saveJumps exp RPAREN . quadsWhile statements jumpsWhile whilep
    (75) quadsWhile -> .

    FUNCTION        reduce using rule 75 (quadsWhile -> .)
    ID              reduce using rule 75 (quadsWhile -> .)
    READ            reduce using rule 75 (quadsWhile -> .)
    PRINT           reduce using rule 75 (quadsWhile -> .)
    IF              reduce using rule 75 (quadsWhile -> .)
    WHILE           reduce using rule 75 (quadsWhile -> .)
    FOR             reduce using rule 75 (quadsWhile -> .)

    quadsWhile                     shift and go to state 131

state 129

    (77) for -> FOR LPAREN var SEMICOLON exp . SEMICOLON exp RPAREN LBRACKET statements forp

    SEMICOLON       shift and go to state 132


state 130

    (65) if -> IF LPAREN exp RPAREN quadsIf statements . ifelse jumpsIf
    (66) ifelse -> .
    (67) ifelse -> . ELSE quadsElse statements

  ! shift/reduce conflict for ELSE resolved as shift
    VAR             reduce using rule 66 (ifelse -> .)
    FUNCTION        reduce using rule 66 (ifelse -> .)
    ID              reduce using rule 66 (ifelse -> .)
    READ            reduce using rule 66 (ifelse -> .)
    PRINT           reduce using rule 66 (ifelse -> .)
    IF              reduce using rule 66 (ifelse -> .)
    WHILE           reduce using rule 66 (ifelse -> .)
    FOR             reduce using rule 66 (ifelse -> .)
    RBRACE          reduce using rule 66 (ifelse -> .)
    SEMICOLON       reduce using rule 66 (ifelse -> .)
    RBRACKET        reduce using rule 66 (ifelse -> .)
    ELSE            shift and go to state 134

  ! ELSE            [ reduce using rule 66 (ifelse -> .) ]

    ifelse                         shift and go to state 133

state 131

    (71) while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile . statements jumpsWhile whilep
    (47) statements -> . assign
    (48) statements -> . function
    (49) statements -> . voidfunction
    (50) statements -> . call
    (51) statements -> . read
    (52) statements -> . print
    (53) statements -> . if
    (54) statements -> . while
    (55) statements -> . for
    (56) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (62) call -> . ID LPAREN callp RPAREN
    (57) read -> . READ LPAREN var RPAREN SEMICOLON
    (58) print -> . PRINT LPAREN printp SEMICOLON
    (65) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (71) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (77) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (61) var -> . ID

    FUNCTION        shift and go to state 11
    ID              shift and go to state 54
    READ            shift and go to state 55
    PRINT           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59

    statements                     shift and go to state 135
    assign                         shift and go to state 44
    function                       shift and go to state 45
    voidfunction                   shift and go to state 46
    call                           shift and go to state 47
    read                           shift and go to state 48
    print                          shift and go to state 49
    if                             shift and go to state 50
    while                          shift and go to state 51
    for                            shift and go to state 52
    var                            shift and go to state 53

state 132

    (77) for -> FOR LPAREN var SEMICOLON exp SEMICOLON . exp RPAREN LBRACKET statements forp
    (26) exp -> . texp
    (27) exp -> . texp OR exp
    (28) texp -> . gexp
    (29) texp -> . gexp AND texp
    (30) gexp -> . mexp
    (31) gexp -> . mexp gexpp mexp
    (36) mexp -> . t
    (37) mexp -> . mexp PLUS t
    (38) mexp -> . mexp MINUS t
    (39) t -> . f
    (40) t -> . t MULT f
    (41) t -> . t DIV f
    (42) f -> . LPAREN exp RPAREN
    (43) f -> . CTI
    (44) f -> . CTF
    (45) f -> . var
    (46) f -> . call
    (61) var -> . ID
    (62) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 80
    CTI             shift and go to state 81
    CTF             shift and go to state 82
    ID              shift and go to state 84

    var                            shift and go to state 73
    exp                            shift and go to state 136
    texp                           shift and go to state 75
    gexp                           shift and go to state 76
    mexp                           shift and go to state 77
    t                              shift and go to state 78
    f                              shift and go to state 79
    call                           shift and go to state 83

state 133

    (65) if -> IF LPAREN exp RPAREN quadsIf statements ifelse . jumpsIf
    (69) jumpsIf -> .

    VAR             reduce using rule 69 (jumpsIf -> .)
    FUNCTION        reduce using rule 69 (jumpsIf -> .)
    ID              reduce using rule 69 (jumpsIf -> .)
    READ            reduce using rule 69 (jumpsIf -> .)
    PRINT           reduce using rule 69 (jumpsIf -> .)
    IF              reduce using rule 69 (jumpsIf -> .)
    WHILE           reduce using rule 69 (jumpsIf -> .)
    FOR             reduce using rule 69 (jumpsIf -> .)
    RBRACE          reduce using rule 69 (jumpsIf -> .)
    ELSE            reduce using rule 69 (jumpsIf -> .)
    SEMICOLON       reduce using rule 69 (jumpsIf -> .)
    RBRACKET        reduce using rule 69 (jumpsIf -> .)

    jumpsIf                        shift and go to state 137

state 134

    (67) ifelse -> ELSE . quadsElse statements
    (70) quadsElse -> .

    FUNCTION        reduce using rule 70 (quadsElse -> .)
    ID              reduce using rule 70 (quadsElse -> .)
    READ            reduce using rule 70 (quadsElse -> .)
    PRINT           reduce using rule 70 (quadsElse -> .)
    IF              reduce using rule 70 (quadsElse -> .)
    WHILE           reduce using rule 70 (quadsElse -> .)
    FOR             reduce using rule 70 (quadsElse -> .)

    quadsElse                      shift and go to state 138

state 135

    (71) while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements . jumpsWhile whilep
    (76) jumpsWhile -> .

    SEMICOLON       reduce using rule 76 (jumpsWhile -> .)
    FUNCTION        reduce using rule 76 (jumpsWhile -> .)
    ID              reduce using rule 76 (jumpsWhile -> .)
    READ            reduce using rule 76 (jumpsWhile -> .)
    PRINT           reduce using rule 76 (jumpsWhile -> .)
    IF              reduce using rule 76 (jumpsWhile -> .)
    WHILE           reduce using rule 76 (jumpsWhile -> .)
    FOR             reduce using rule 76 (jumpsWhile -> .)

    jumpsWhile                     shift and go to state 139

state 136

    (77) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp . RPAREN LBRACKET statements forp

    RPAREN          shift and go to state 140


state 137

    (65) if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .

    VAR             reduce using rule 65 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    FUNCTION        reduce using rule 65 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    ID              reduce using rule 65 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    READ            reduce using rule 65 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    PRINT           reduce using rule 65 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    IF              reduce using rule 65 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    WHILE           reduce using rule 65 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    FOR             reduce using rule 65 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    RBRACE          reduce using rule 65 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    ELSE            reduce using rule 65 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    SEMICOLON       reduce using rule 65 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)
    RBRACKET        reduce using rule 65 (if -> IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf .)


state 138

    (67) ifelse -> ELSE quadsElse . statements
    (47) statements -> . assign
    (48) statements -> . function
    (49) statements -> . voidfunction
    (50) statements -> . call
    (51) statements -> . read
    (52) statements -> . print
    (53) statements -> . if
    (54) statements -> . while
    (55) statements -> . for
    (56) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (62) call -> . ID LPAREN callp RPAREN
    (57) read -> . READ LPAREN var RPAREN SEMICOLON
    (58) print -> . PRINT LPAREN printp SEMICOLON
    (65) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (71) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (77) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (61) var -> . ID

    FUNCTION        shift and go to state 11
    ID              shift and go to state 54
    READ            shift and go to state 55
    PRINT           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59

    statements                     shift and go to state 141
    assign                         shift and go to state 44
    function                       shift and go to state 45
    voidfunction                   shift and go to state 46
    call                           shift and go to state 47
    read                           shift and go to state 48
    print                          shift and go to state 49
    if                             shift and go to state 50
    while                          shift and go to state 51
    for                            shift and go to state 52
    var                            shift and go to state 53

state 139

    (71) while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile . whilep
    (72) whilep -> . SEMICOLON
    (73) whilep -> . statements whilep
    (47) statements -> . assign
    (48) statements -> . function
    (49) statements -> . voidfunction
    (50) statements -> . call
    (51) statements -> . read
    (52) statements -> . print
    (53) statements -> . if
    (54) statements -> . while
    (55) statements -> . for
    (56) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (62) call -> . ID LPAREN callp RPAREN
    (57) read -> . READ LPAREN var RPAREN SEMICOLON
    (58) print -> . PRINT LPAREN printp SEMICOLON
    (65) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (71) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (77) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (61) var -> . ID

    SEMICOLON       shift and go to state 144
    FUNCTION        shift and go to state 11
    ID              shift and go to state 54
    READ            shift and go to state 55
    PRINT           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59

    statements                     shift and go to state 142
    whilep                         shift and go to state 143
    assign                         shift and go to state 44
    function                       shift and go to state 45
    voidfunction                   shift and go to state 46
    call                           shift and go to state 47
    read                           shift and go to state 48
    print                          shift and go to state 49
    if                             shift and go to state 50
    while                          shift and go to state 51
    for                            shift and go to state 52
    var                            shift and go to state 53

state 140

    (77) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN . LBRACKET statements forp

    LBRACKET        shift and go to state 145


state 141

    (67) ifelse -> ELSE quadsElse statements .

    ELSE            reduce using rule 67 (ifelse -> ELSE quadsElse statements .)
    VAR             reduce using rule 67 (ifelse -> ELSE quadsElse statements .)
    FUNCTION        reduce using rule 67 (ifelse -> ELSE quadsElse statements .)
    ID              reduce using rule 67 (ifelse -> ELSE quadsElse statements .)
    READ            reduce using rule 67 (ifelse -> ELSE quadsElse statements .)
    PRINT           reduce using rule 67 (ifelse -> ELSE quadsElse statements .)
    IF              reduce using rule 67 (ifelse -> ELSE quadsElse statements .)
    WHILE           reduce using rule 67 (ifelse -> ELSE quadsElse statements .)
    FOR             reduce using rule 67 (ifelse -> ELSE quadsElse statements .)
    RBRACE          reduce using rule 67 (ifelse -> ELSE quadsElse statements .)
    SEMICOLON       reduce using rule 67 (ifelse -> ELSE quadsElse statements .)
    RBRACKET        reduce using rule 67 (ifelse -> ELSE quadsElse statements .)


state 142

    (73) whilep -> statements . whilep
    (72) whilep -> . SEMICOLON
    (73) whilep -> . statements whilep
    (47) statements -> . assign
    (48) statements -> . function
    (49) statements -> . voidfunction
    (50) statements -> . call
    (51) statements -> . read
    (52) statements -> . print
    (53) statements -> . if
    (54) statements -> . while
    (55) statements -> . for
    (56) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (62) call -> . ID LPAREN callp RPAREN
    (57) read -> . READ LPAREN var RPAREN SEMICOLON
    (58) print -> . PRINT LPAREN printp SEMICOLON
    (65) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (71) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (77) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (61) var -> . ID

    SEMICOLON       shift and go to state 144
    FUNCTION        shift and go to state 11
    ID              shift and go to state 54
    READ            shift and go to state 55
    PRINT           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59

    statements                     shift and go to state 142
    whilep                         shift and go to state 146
    assign                         shift and go to state 44
    function                       shift and go to state 45
    voidfunction                   shift and go to state 46
    call                           shift and go to state 47
    read                           shift and go to state 48
    print                          shift and go to state 49
    if                             shift and go to state 50
    while                          shift and go to state 51
    for                            shift and go to state 52
    var                            shift and go to state 53

state 143

    (71) while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .

    VAR             reduce using rule 71 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    FUNCTION        reduce using rule 71 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    ID              reduce using rule 71 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    READ            reduce using rule 71 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    PRINT           reduce using rule 71 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    IF              reduce using rule 71 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    WHILE           reduce using rule 71 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    FOR             reduce using rule 71 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    RBRACE          reduce using rule 71 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    ELSE            reduce using rule 71 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    SEMICOLON       reduce using rule 71 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)
    RBRACKET        reduce using rule 71 (while -> WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep .)


state 144

    (72) whilep -> SEMICOLON .

    VAR             reduce using rule 72 (whilep -> SEMICOLON .)
    FUNCTION        reduce using rule 72 (whilep -> SEMICOLON .)
    ID              reduce using rule 72 (whilep -> SEMICOLON .)
    READ            reduce using rule 72 (whilep -> SEMICOLON .)
    PRINT           reduce using rule 72 (whilep -> SEMICOLON .)
    IF              reduce using rule 72 (whilep -> SEMICOLON .)
    WHILE           reduce using rule 72 (whilep -> SEMICOLON .)
    FOR             reduce using rule 72 (whilep -> SEMICOLON .)
    RBRACE          reduce using rule 72 (whilep -> SEMICOLON .)
    ELSE            reduce using rule 72 (whilep -> SEMICOLON .)
    SEMICOLON       reduce using rule 72 (whilep -> SEMICOLON .)
    RBRACKET        reduce using rule 72 (whilep -> SEMICOLON .)


state 145

    (77) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET . statements forp
    (47) statements -> . assign
    (48) statements -> . function
    (49) statements -> . voidfunction
    (50) statements -> . call
    (51) statements -> . read
    (52) statements -> . print
    (53) statements -> . if
    (54) statements -> . while
    (55) statements -> . for
    (56) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (62) call -> . ID LPAREN callp RPAREN
    (57) read -> . READ LPAREN var RPAREN SEMICOLON
    (58) print -> . PRINT LPAREN printp SEMICOLON
    (65) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (71) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (77) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (61) var -> . ID

    FUNCTION        shift and go to state 11
    ID              shift and go to state 54
    READ            shift and go to state 55
    PRINT           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59

    var                            shift and go to state 53
    statements                     shift and go to state 147
    assign                         shift and go to state 44
    function                       shift and go to state 45
    voidfunction                   shift and go to state 46
    call                           shift and go to state 47
    read                           shift and go to state 48
    print                          shift and go to state 49
    if                             shift and go to state 50
    while                          shift and go to state 51
    for                            shift and go to state 52

state 146

    (73) whilep -> statements whilep .

    VAR             reduce using rule 73 (whilep -> statements whilep .)
    FUNCTION        reduce using rule 73 (whilep -> statements whilep .)
    ID              reduce using rule 73 (whilep -> statements whilep .)
    READ            reduce using rule 73 (whilep -> statements whilep .)
    PRINT           reduce using rule 73 (whilep -> statements whilep .)
    IF              reduce using rule 73 (whilep -> statements whilep .)
    WHILE           reduce using rule 73 (whilep -> statements whilep .)
    FOR             reduce using rule 73 (whilep -> statements whilep .)
    RBRACE          reduce using rule 73 (whilep -> statements whilep .)
    ELSE            reduce using rule 73 (whilep -> statements whilep .)
    SEMICOLON       reduce using rule 73 (whilep -> statements whilep .)
    RBRACKET        reduce using rule 73 (whilep -> statements whilep .)


state 147

    (77) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements . forp
    (78) forp -> . RBRACKET
    (79) forp -> . statements forp
    (47) statements -> . assign
    (48) statements -> . function
    (49) statements -> . voidfunction
    (50) statements -> . call
    (51) statements -> . read
    (52) statements -> . print
    (53) statements -> . if
    (54) statements -> . while
    (55) statements -> . for
    (56) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (62) call -> . ID LPAREN callp RPAREN
    (57) read -> . READ LPAREN var RPAREN SEMICOLON
    (58) print -> . PRINT LPAREN printp SEMICOLON
    (65) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (71) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (77) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (61) var -> . ID

    RBRACKET        shift and go to state 150
    FUNCTION        shift and go to state 11
    ID              shift and go to state 54
    READ            shift and go to state 55
    PRINT           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59

    var                            shift and go to state 53
    statements                     shift and go to state 148
    forp                           shift and go to state 149
    assign                         shift and go to state 44
    function                       shift and go to state 45
    voidfunction                   shift and go to state 46
    call                           shift and go to state 47
    read                           shift and go to state 48
    print                          shift and go to state 49
    if                             shift and go to state 50
    while                          shift and go to state 51
    for                            shift and go to state 52

state 148

    (79) forp -> statements . forp
    (78) forp -> . RBRACKET
    (79) forp -> . statements forp
    (47) statements -> . assign
    (48) statements -> . function
    (49) statements -> . voidfunction
    (50) statements -> . call
    (51) statements -> . read
    (52) statements -> . print
    (53) statements -> . if
    (54) statements -> . while
    (55) statements -> . for
    (56) assign -> . var EQUAL exp SEMICOLON
    (11) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (13) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (62) call -> . ID LPAREN callp RPAREN
    (57) read -> . READ LPAREN var RPAREN SEMICOLON
    (58) print -> . PRINT LPAREN printp SEMICOLON
    (65) if -> . IF LPAREN exp RPAREN quadsIf statements ifelse jumpsIf
    (71) while -> . WHILE LPAREN saveJumps exp RPAREN quadsWhile statements jumpsWhile whilep
    (77) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (61) var -> . ID

    RBRACKET        shift and go to state 150
    FUNCTION        shift and go to state 11
    ID              shift and go to state 54
    READ            shift and go to state 55
    PRINT           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59

    statements                     shift and go to state 148
    forp                           shift and go to state 151
    assign                         shift and go to state 44
    function                       shift and go to state 45
    voidfunction                   shift and go to state 46
    call                           shift and go to state 47
    read                           shift and go to state 48
    print                          shift and go to state 49
    if                             shift and go to state 50
    while                          shift and go to state 51
    for                            shift and go to state 52
    var                            shift and go to state 53

state 149

    (77) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .

    VAR             reduce using rule 77 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    FUNCTION        reduce using rule 77 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    ID              reduce using rule 77 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    READ            reduce using rule 77 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    PRINT           reduce using rule 77 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    IF              reduce using rule 77 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    WHILE           reduce using rule 77 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    FOR             reduce using rule 77 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    RBRACE          reduce using rule 77 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    ELSE            reduce using rule 77 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    SEMICOLON       reduce using rule 77 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    RBRACKET        reduce using rule 77 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)


state 150

    (78) forp -> RBRACKET .

    VAR             reduce using rule 78 (forp -> RBRACKET .)
    FUNCTION        reduce using rule 78 (forp -> RBRACKET .)
    ID              reduce using rule 78 (forp -> RBRACKET .)
    READ            reduce using rule 78 (forp -> RBRACKET .)
    PRINT           reduce using rule 78 (forp -> RBRACKET .)
    IF              reduce using rule 78 (forp -> RBRACKET .)
    WHILE           reduce using rule 78 (forp -> RBRACKET .)
    FOR             reduce using rule 78 (forp -> RBRACKET .)
    RBRACE          reduce using rule 78 (forp -> RBRACKET .)
    ELSE            reduce using rule 78 (forp -> RBRACKET .)
    SEMICOLON       reduce using rule 78 (forp -> RBRACKET .)
    RBRACKET        reduce using rule 78 (forp -> RBRACKET .)


state 151

    (79) forp -> statements forp .

    VAR             reduce using rule 79 (forp -> statements forp .)
    FUNCTION        reduce using rule 79 (forp -> statements forp .)
    ID              reduce using rule 79 (forp -> statements forp .)
    READ            reduce using rule 79 (forp -> statements forp .)
    PRINT           reduce using rule 79 (forp -> statements forp .)
    IF              reduce using rule 79 (forp -> statements forp .)
    WHILE           reduce using rule 79 (forp -> statements forp .)
    FOR             reduce using rule 79 (forp -> statements forp .)
    RBRACE          reduce using rule 79 (forp -> statements forp .)
    ELSE            reduce using rule 79 (forp -> statements forp .)
    SEMICOLON       reduce using rule 79 (forp -> statements forp .)
    RBRACKET        reduce using rule 79 (forp -> statements forp .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 38 resolved as shift
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for READ in state 38 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 38 resolved as shift
WARNING: shift/reduce conflict for IF in state 38 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 38 resolved as shift
WARNING: shift/reduce conflict for FOR in state 38 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 39 resolved as shift
WARNING: shift/reduce conflict for ID in state 39 resolved as shift
WARNING: shift/reduce conflict for READ in state 39 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 39 resolved as shift
WARNING: shift/reduce conflict for IF in state 39 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 39 resolved as shift
WARNING: shift/reduce conflict for FOR in state 39 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 43 resolved as shift
WARNING: shift/reduce conflict for ID in state 43 resolved as shift
WARNING: shift/reduce conflict for READ in state 43 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 43 resolved as shift
WARNING: shift/reduce conflict for IF in state 43 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 43 resolved as shift
WARNING: shift/reduce conflict for FOR in state 43 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for READ in state 62 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 62 resolved as shift
WARNING: shift/reduce conflict for IF in state 62 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 62 resolved as shift
WARNING: shift/reduce conflict for FOR in state 62 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 130 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (decvar -> VAR decvarp)
WARNING: rejected rule (decvar -> <empty>) in state 12
WARNING: reduce/reduce conflict in state 38 resolved using rule (decvar -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 38
WARNING: reduce/reduce conflict in state 39 resolved using rule (decvar -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 39
WARNING: reduce/reduce conflict in state 43 resolved using rule (decvar -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 43
WARNING: reduce/reduce conflict in state 62 resolved using rule (decvar -> <empty>)
WARNING: rejected rule (body -> <empty>) in state 62
WARNING: Rule (body -> <empty>) is never reduced
