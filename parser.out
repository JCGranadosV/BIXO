Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    CHAR
    COLON
    CTF
    CTI
    FUNCESP
    GTE
    LTE
    NUMPY
    QUOTE
    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON decvar
Rule 2     decvar -> VAR type ID SEMICOLON
Rule 3     decvar -> VAR type decvarp SEMICOLON
Rule 4     decvarp -> ID COMMA decvarp
Rule 5     decvarp -> ID
Rule 6     type -> INT
Rule 7     type -> FLOAT
Rule 8     function -> FUNCTION type ID LPAREN param RPAREN body
Rule 9     voidfunction -> FUNCTION VOID ID LPAREN param RPAREN body
Rule 10    body -> LBRACE bodyp RBRACE
Rule 11    bodyp -> decvar statements bodyp
Rule 12    bodyp -> statements bodyp
Rule 13    bodyp -> decvar
Rule 14    bodyp -> <empty>
Rule 15    param -> <empty>
Rule 16    param -> type paramp
Rule 17    paramp -> ID
Rule 18    paramp -> ID COMMA param
Rule 19    exp -> texp
Rule 20    exp -> texp OR exp
Rule 21    texp -> gexp
Rule 22    texp -> gexp AND texp
Rule 23    gexp -> mexp
Rule 24    gexp -> mexp gexpp mexp
Rule 25    gexpp -> LT
Rule 26    gexpp -> GT
Rule 27    gexpp -> EQUAL
Rule 28    gexpp -> DIFF
Rule 29    mexp -> t
Rule 30    mexp -> t PLUS mexp
Rule 31    mexp -> t MINUS mexp
Rule 32    t -> f
Rule 33    t -> f MULT t
Rule 34    t -> f DIV t
Rule 35    f -> LPAREN exp RPAREN
Rule 36    f -> INT
Rule 37    f -> FLOAT
Rule 38    f -> var
Rule 39    f -> call
Rule 40    statements -> assign
Rule 41    statements -> function
Rule 42    statements -> voidfunction
Rule 43    statements -> call
Rule 44    statements -> read
Rule 45    statements -> print
Rule 46    statements -> if
Rule 47    statements -> while
Rule 48    statements -> for
Rule 49    statements -> funcesp
Rule 50    assign -> var EQUAL exp
Rule 51    read -> READ var
Rule 52    print -> PRINT LPAREN printp
Rule 53    printp -> exp RPAREN
Rule 54    printp -> exp COMMA printp
Rule 55    var -> ID
Rule 56    var -> ID LBRACKET exp RBRACKET
Rule 57    var -> ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 58    call -> ID LPAREN callp RPAREN
Rule 59    callp -> exp SEMICOLON callp
Rule 60    callp -> exp
Rule 61    if -> IF LPAREN exp RPAREN statements ifp
Rule 62    ifp -> <empty>
Rule 63    ifp -> ELSE statements
Rule 64    while -> WHILE LPAREN exp RPAREN statements whilep
Rule 65    whilep -> SEMICOLON
Rule 66    whilep -> statements whilep
Rule 67    for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
Rule 68    forp -> RBRACKET
Rule 69    forp -> statements forp
Rule 70    funcesp -> array
Rule 71    funcesp -> matrix
Rule 72    funcesp -> mean
Rule 73    funcesp -> layers
Rule 74    funcesp -> sequential
Rule 75    funcesp -> compile
Rule 76    funcesp -> fit
Rule 77    funcesp -> predict
Rule 78    funcesp -> getweights
Rule 79    array -> ID EQUAL ARRAY LPAREN var arrayp
Rule 80    arrayp -> RPAREN
Rule 81    arrayp -> COMMA var RPAREN
Rule 82    matrix -> ID EQUAL MATRIX LPAREN array matrixp
Rule 83    matrixp -> RPAREN
Rule 84    matrixp -> COMMA array RPAREN
Rule 85    mean -> MEAN LPAREN array RPAREN
Rule 86    layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
Rule 87    sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
Rule 88    sequentialp -> RBRACKET RPAREN
Rule 89    sequentialp -> COMMA layers sequentialp
Rule 90    compile -> sequential DOT COMPILE LPAREN RPAREN
Rule 91    fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
Rule 92    fitp -> TRUE RPAREN
Rule 93    fitp -> FALSE RPAREN
Rule 94    predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
Rule 95    predictp -> INT RBRACKET RPAREN
Rule 96    predictp -> FLOAT RBRACKET RPAREN
Rule 97    getweights -> layers DOT GETWEIGHTS LPAREN RPAREN
Rule 98    empty -> <empty>

Terminals, with rules where they appear

AND                  : 22
ARRAY                : 79
ASSIGN               : 
CHAR                 : 
COLON                : 
COMMA                : 4 18 54 81 84 89 91 91 91
COMPILE              : 90
CTF                  : 
CTI                  : 
DIFF                 : 28
DIV                  : 34
DOT                  : 90 91 94 97
ELSE                 : 63
EPOCHS               : 91
EQUAL                : 27 50 79 82 86 86 87 91 91 91 94
FALSE                : 93
FIT                  : 91
FLOAT                : 7 37 96
FOR                  : 67
FUNCESP              : 
FUNCTION             : 8 9
GETWEIGHTS           : 97
GT                   : 26
GTE                  : 
ID                   : 1 2 4 5 8 9 17 18 55 56 57 58 79 82 86 87 91 94
IF                   : 61
INT                  : 6 36 86 91 95
LAYERS               : 86
LBRACE               : 10
LBRACKET             : 56 57 57 67 87 94
LPAREN               : 8 9 35 52 58 61 64 67 79 82 85 86 87 90 91 94 97
LT                   : 25
LTE                  : 
MATRIX               : 82
MEAN                 : 85
MINUS                : 31
MULT                 : 33
NUMPY                : 
OR                   : 20
PLUS                 : 30
PREDICT              : 94
PRINT                : 52
PROGRAM              : 1
QUOTE                : 
RBRACE               : 10
RBRACKET             : 56 57 57 68 88 95 96
READ                 : 51
RPAREN               : 8 9 35 53 58 61 64 67 80 81 83 84 85 86 88 90 92 93 95 96 97
SEMICOLON            : 1 2 3 59 65 67 67
SEQUENTIAL           : 87
STRING               : 
TRUE                 : 92
UNITS                : 86
VAR                  : 2 3
VERBOSE              : 91
VOID                 : 9
WHILE                : 64
error                : 

Nonterminals, with rules where they appear

array                : 70 82 84 85 91 91
arrayp               : 79
assign               : 40
body                 : 8 9
bodyp                : 10 11 12
call                 : 39 43
callp                : 58 59
compile              : 75
decvar               : 1 11 13
decvarp              : 3 4
empty                : 
exp                  : 20 35 50 53 54 56 57 57 59 60 61 64 67 67
f                    : 32 33 34
fit                  : 76
fitp                 : 91
for                  : 48
forp                 : 67 69
funcesp              : 49
function             : 41
getweights           : 78
gexp                 : 21 22
gexpp                : 24
if                   : 46
ifp                  : 61
layers               : 73 87 89 97
matrix               : 71
matrixp              : 82
mean                 : 72
mexp                 : 23 24 24 30 31
param                : 8 9 18
paramp               : 16
predict              : 77
predictp             : 94
print                : 45
printp               : 52 54
program              : 0
read                 : 44
sequential           : 74 90 91 94
sequentialp          : 87 89
statements           : 11 12 61 63 64 66 67 69
t                    : 29 30 31 33 34
texp                 : 19 20 22
type                 : 2 3 8 16
var                  : 38 50 51 67 79 81
voidfunction         : 42
while                : 47
whilep               : 64 66

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON decvar

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON decvar

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON decvar

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . decvar
    (2) decvar -> . VAR type ID SEMICOLON
    (3) decvar -> . VAR type decvarp SEMICOLON

    VAR             shift and go to state 6

    decvar                         shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMICOLON decvar .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON decvar .)


state 6

    (2) decvar -> VAR . type ID SEMICOLON
    (3) decvar -> VAR . type decvarp SEMICOLON
    (6) type -> . INT
    (7) type -> . FLOAT

    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    type                           shift and go to state 7

state 7

    (2) decvar -> VAR type . ID SEMICOLON
    (3) decvar -> VAR type . decvarp SEMICOLON
    (4) decvarp -> . ID COMMA decvarp
    (5) decvarp -> . ID

    ID              shift and go to state 10

    decvarp                        shift and go to state 11

state 8

    (6) type -> INT .

    ID              reduce using rule 6 (type -> INT .)


state 9

    (7) type -> FLOAT .

    ID              reduce using rule 7 (type -> FLOAT .)


state 10

    (2) decvar -> VAR type ID . SEMICOLON
    (4) decvarp -> ID . COMMA decvarp
    (5) decvarp -> ID .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 12
    COMMA           shift and go to state 13

  ! SEMICOLON       [ reduce using rule 5 (decvarp -> ID .) ]


state 11

    (3) decvar -> VAR type decvarp . SEMICOLON

    SEMICOLON       shift and go to state 14


state 12

    (2) decvar -> VAR type ID SEMICOLON .

    $end            reduce using rule 2 (decvar -> VAR type ID SEMICOLON .)


state 13

    (4) decvarp -> ID COMMA . decvarp
    (4) decvarp -> . ID COMMA decvarp
    (5) decvarp -> . ID

    ID              shift and go to state 15

    decvarp                        shift and go to state 16

state 14

    (3) decvar -> VAR type decvarp SEMICOLON .

    $end            reduce using rule 3 (decvar -> VAR type decvarp SEMICOLON .)


state 15

    (4) decvarp -> ID . COMMA decvarp
    (5) decvarp -> ID .

    COMMA           shift and go to state 13
    SEMICOLON       reduce using rule 5 (decvarp -> ID .)


state 16

    (4) decvarp -> ID COMMA decvarp .

    SEMICOLON       reduce using rule 4 (decvarp -> ID COMMA decvarp .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 10 resolved as shift
