Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    CHAR
    COLON
    END
    FUNCESP
    GTE
    IFEQUAL
    LTE
    NUMPY
    QUOTE
    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON decvar modules mainfunction
Rule 2     decvar -> VAR decvarp
Rule 3     decvar -> VAR decvarp decvar
Rule 4     decvarp -> type decvarpp SEMICOLON
Rule 5     decvarpp -> ID COMMA decvarpp
Rule 6     decvarpp -> ID
Rule 7     type -> INT
Rule 8     type -> FLOAT
Rule 9     function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
Rule 10    decfunc -> ID
Rule 11    voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
Rule 12    mainfunction -> MAIN
Rule 13    modules -> function modules
Rule 14    modules -> voidfunction modules
Rule 15    modules -> function
Rule 16    modules -> voidfunction
Rule 17    body -> decvar statements body
Rule 18    body -> statements body
Rule 19    body -> decvar
Rule 20    body -> <empty>
Rule 21    param -> type ID
Rule 22    param -> type ID COMMA param
Rule 23    exp -> texp
Rule 24    exp -> texp OR exp
Rule 25    texp -> gexp
Rule 26    texp -> gexp AND texp
Rule 27    gexp -> mexp
Rule 28    gexp -> mexp gexpp mexp
Rule 29    gexpp -> LT
Rule 30    gexpp -> GT
Rule 31    gexpp -> EQUAL
Rule 32    gexpp -> DIFF
Rule 33    mexp -> t
Rule 34    mexp -> t PLUS mexp
Rule 35    mexp -> t MINUS mexp
Rule 36    t -> f
Rule 37    t -> f MULT t
Rule 38    t -> f DIV t
Rule 39    f -> LPAREN exp RPAREN
Rule 40    f -> CTI
Rule 41    f -> CTF
Rule 42    f -> var
Rule 43    f -> call
Rule 44    statements -> assign
Rule 45    statements -> function
Rule 46    statements -> voidfunction
Rule 47    statements -> call
Rule 48    statements -> read
Rule 49    statements -> print
Rule 50    statements -> if
Rule 51    statements -> while
Rule 52    statements -> for
Rule 53    statements -> funcesp
Rule 54    assign -> var EQUAL exp SEMICOLON
Rule 55    read -> READ var
Rule 56    print -> PRINT LPAREN printp
Rule 57    printp -> exp RPAREN
Rule 58    printp -> exp COMMA printp
Rule 59    var -> ID
Rule 60    call -> ID LPAREN callp RPAREN
Rule 61    callp -> exp SEMICOLON callp
Rule 62    callp -> exp
Rule 63    if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf
Rule 64    ifp -> <empty>
Rule 65    ifp -> ELSE quadsElse statements
Rule 66    quadsIf -> <empty>
Rule 67    jumpsIf -> <empty>
Rule 68    quadsElse -> <empty>
Rule 69    while -> WHILE LPAREN exp RPAREN statements whilep
Rule 70    whilep -> SEMICOLON
Rule 71    whilep -> statements whilep
Rule 72    for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
Rule 73    forp -> RBRACKET
Rule 74    forp -> statements forp
Rule 75    funcesp -> array
Rule 76    funcesp -> matrix
Rule 77    funcesp -> mean
Rule 78    funcesp -> layers
Rule 79    funcesp -> sequential
Rule 80    funcesp -> compile
Rule 81    funcesp -> fit
Rule 82    funcesp -> predict
Rule 83    funcesp -> getweights
Rule 84    array -> ID EQUAL ARRAY LPAREN var arrayp
Rule 85    arrayp -> RPAREN
Rule 86    arrayp -> COMMA var RPAREN
Rule 87    matrix -> ID EQUAL MATRIX LPAREN array matrixp
Rule 88    matrixp -> RPAREN
Rule 89    matrixp -> COMMA array RPAREN
Rule 90    mean -> MEAN LPAREN array RPAREN
Rule 91    layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
Rule 92    sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
Rule 93    sequentialp -> RBRACKET RPAREN
Rule 94    sequentialp -> COMMA layers sequentialp
Rule 95    compile -> sequential DOT COMPILE LPAREN RPAREN
Rule 96    fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
Rule 97    fitp -> TRUE RPAREN
Rule 98    fitp -> FALSE RPAREN
Rule 99    predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
Rule 100   predictp -> INT RBRACKET RPAREN
Rule 101   predictp -> FLOAT RBRACKET RPAREN
Rule 102   getweights -> layers DOT GETWEIGHTS LPAREN RPAREN
Rule 103   empty -> <empty>

Terminals, with rules where they appear

AND                  : 26
ARRAY                : 84
ASSIGN               : 
CHAR                 : 
COLON                : 
COMMA                : 5 22 58 86 89 94 96 96 96
COMPILE              : 95
CTF                  : 41
CTI                  : 40 63 63
DIFF                 : 32
DIV                  : 38
DOT                  : 95 96 99 102
ELSE                 : 65
END                  : 
EPOCHS               : 96
EQUAL                : 31 54 84 87 91 91 92 96 96 96 99
FALSE                : 98
FIT                  : 96
FLOAT                : 8 101
FOR                  : 72
FUNCESP              : 
FUNCTION             : 9 11
GETWEIGHTS           : 102
GT                   : 30 63
GTE                  : 
ID                   : 1 5 6 10 21 22 59 60 84 87 91 92 96 99
IF                   : 63
IFEQUAL              : 
INT                  : 7 91 96 100
LAYERS               : 91
LBRACE               : 9 11
LBRACKET             : 72 92 99
LPAREN               : 9 11 39 56 60 63 69 72 84 87 90 91 92 95 96 99 102
LT                   : 29
LTE                  : 
MAIN                 : 12
MATRIX               : 87
MEAN                 : 90
MINUS                : 35
MULT                 : 37
NUMPY                : 
OR                   : 24
PLUS                 : 34
PREDICT              : 99
PRINT                : 56
PROGRAM              : 1
QUOTE                : 
RBRACE               : 9 11
RBRACKET             : 73 93 100 101
READ                 : 55
RPAREN               : 9 11 39 57 60 63 69 72 85 86 88 89 90 91 93 95 97 98 100 101 102
SEMICOLON            : 1 4 54 61 70 72 72
SEQUENTIAL           : 92
STRING               : 
TRUE                 : 97
UNITS                : 91
VAR                  : 2 3
VERBOSE              : 96
VOID                 : 11
WHILE                : 69
error                : 

Nonterminals, with rules where they appear

array                : 75 87 89 90 96 96
arrayp               : 84
assign               : 44
body                 : 9 11 17 18
call                 : 43 47
callp                : 60 61
compile              : 80
decfunc              : 9 11
decvar               : 1 3 17 19
decvarp              : 2 3
decvarpp             : 4 5
empty                : 
exp                  : 24 39 54 57 58 61 62 69 72 72
f                    : 36 37 38
fit                  : 81
fitp                 : 96
for                  : 52
forp                 : 72 74
funcesp              : 53
function             : 13 15 45
getweights           : 83
gexp                 : 25 26
gexpp                : 28
if                   : 50
ifp                  : 63
jumpsIf              : 63
layers               : 78 92 94 102
mainfunction         : 1
matrix               : 76
matrixp              : 87
mean                 : 77
mexp                 : 27 28 28 34 35
modules              : 1 13 14
param                : 9 11 22
predict              : 82
predictp             : 99
print                : 49
printp               : 56 58
program              : 0
quadsElse            : 65
quadsIf              : 63
read                 : 48
sequential           : 79 95 96 99
sequentialp          : 92 94
statements           : 17 18 65 69 71 72 74
t                    : 33 34 35 37 38
texp                 : 23 24 26
type                 : 4 9 21 22
var                  : 42 54 55 72 84 86
voidfunction         : 14 16 46
while                : 51
whilep               : 69 71

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON decvar modules mainfunction

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON decvar modules mainfunction

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON decvar modules mainfunction

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . decvar modules mainfunction
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar

    VAR             shift and go to state 6

    decvar                         shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMICOLON decvar . modules mainfunction
    (13) modules -> . function modules
    (14) modules -> . voidfunction modules
    (15) modules -> . function
    (16) modules -> . voidfunction
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE

    FUNCTION        shift and go to state 10

    modules                        shift and go to state 7
    function                       shift and go to state 8
    voidfunction                   shift and go to state 9

state 6

    (2) decvar -> VAR . decvarp
    (3) decvar -> VAR . decvarp decvar
    (4) decvarp -> . type decvarpp SEMICOLON
    (7) type -> . INT
    (8) type -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 14

    decvarp                        shift and go to state 11
    type                           shift and go to state 12

state 7

    (1) program -> PROGRAM ID SEMICOLON decvar modules . mainfunction
    (12) mainfunction -> . MAIN

    MAIN            shift and go to state 16

    mainfunction                   shift and go to state 15

state 8

    (13) modules -> function . modules
    (15) modules -> function .
    (13) modules -> . function modules
    (14) modules -> . voidfunction modules
    (15) modules -> . function
    (16) modules -> . voidfunction
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE

    MAIN            reduce using rule 15 (modules -> function .)
    FUNCTION        shift and go to state 10

    function                       shift and go to state 8
    modules                        shift and go to state 17
    voidfunction                   shift and go to state 9

state 9

    (14) modules -> voidfunction . modules
    (16) modules -> voidfunction .
    (13) modules -> . function modules
    (14) modules -> . voidfunction modules
    (15) modules -> . function
    (16) modules -> . voidfunction
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE

    MAIN            reduce using rule 16 (modules -> voidfunction .)
    FUNCTION        shift and go to state 10

    voidfunction                   shift and go to state 9
    modules                        shift and go to state 18
    function                       shift and go to state 8

state 10

    (9) function -> FUNCTION . type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> FUNCTION . VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (7) type -> . INT
    (8) type -> . FLOAT

    VOID            shift and go to state 20
    INT             shift and go to state 13
    FLOAT           shift and go to state 14

    type                           shift and go to state 19

state 11

    (2) decvar -> VAR decvarp .
    (3) decvar -> VAR decvarp . decvar
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar

    FUNCTION        reduce using rule 2 (decvar -> VAR decvarp .)
    ID              reduce using rule 2 (decvar -> VAR decvarp .)
    READ            reduce using rule 2 (decvar -> VAR decvarp .)
    PRINT           reduce using rule 2 (decvar -> VAR decvarp .)
    IF              reduce using rule 2 (decvar -> VAR decvarp .)
    WHILE           reduce using rule 2 (decvar -> VAR decvarp .)
    FOR             reduce using rule 2 (decvar -> VAR decvarp .)
    MEAN            reduce using rule 2 (decvar -> VAR decvarp .)
    RBRACE          reduce using rule 2 (decvar -> VAR decvarp .)
    VAR             shift and go to state 6

    decvar                         shift and go to state 21

state 12

    (4) decvarp -> type . decvarpp SEMICOLON
    (5) decvarpp -> . ID COMMA decvarpp
    (6) decvarpp -> . ID

    ID              shift and go to state 23

    decvarpp                       shift and go to state 22

state 13

    (7) type -> INT .

    ID              reduce using rule 7 (type -> INT .)


state 14

    (8) type -> FLOAT .

    ID              reduce using rule 8 (type -> FLOAT .)


state 15

    (1) program -> PROGRAM ID SEMICOLON decvar modules mainfunction .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON decvar modules mainfunction .)


state 16

    (12) mainfunction -> MAIN .

    $end            reduce using rule 12 (mainfunction -> MAIN .)


state 17

    (13) modules -> function modules .

    MAIN            reduce using rule 13 (modules -> function modules .)


state 18

    (14) modules -> voidfunction modules .

    MAIN            reduce using rule 14 (modules -> voidfunction modules .)


state 19

    (9) function -> FUNCTION type . decfunc LPAREN param RPAREN LBRACE body RBRACE
    (10) decfunc -> . ID

    ID              shift and go to state 25

    decfunc                        shift and go to state 24

state 20

    (11) voidfunction -> FUNCTION VOID . decfunc LPAREN param RPAREN LBRACE body RBRACE
    (10) decfunc -> . ID

    ID              shift and go to state 25

    decfunc                        shift and go to state 26

state 21

    (3) decvar -> VAR decvarp decvar .

    FUNCTION        reduce using rule 3 (decvar -> VAR decvarp decvar .)
    ID              reduce using rule 3 (decvar -> VAR decvarp decvar .)
    READ            reduce using rule 3 (decvar -> VAR decvarp decvar .)
    PRINT           reduce using rule 3 (decvar -> VAR decvarp decvar .)
    IF              reduce using rule 3 (decvar -> VAR decvarp decvar .)
    WHILE           reduce using rule 3 (decvar -> VAR decvarp decvar .)
    FOR             reduce using rule 3 (decvar -> VAR decvarp decvar .)
    MEAN            reduce using rule 3 (decvar -> VAR decvarp decvar .)
    RBRACE          reduce using rule 3 (decvar -> VAR decvarp decvar .)


state 22

    (4) decvarp -> type decvarpp . SEMICOLON

    SEMICOLON       shift and go to state 27


state 23

    (5) decvarpp -> ID . COMMA decvarpp
    (6) decvarpp -> ID .

    COMMA           shift and go to state 28
    SEMICOLON       reduce using rule 6 (decvarpp -> ID .)


state 24

    (9) function -> FUNCTION type decfunc . LPAREN param RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 29


state 25

    (10) decfunc -> ID .

    LPAREN          reduce using rule 10 (decfunc -> ID .)


state 26

    (11) voidfunction -> FUNCTION VOID decfunc . LPAREN param RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 30


state 27

    (4) decvarp -> type decvarpp SEMICOLON .

    VAR             reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    FUNCTION        reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    ID              reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    READ            reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    PRINT           reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    IF              reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    WHILE           reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    FOR             reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    MEAN            reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)
    RBRACE          reduce using rule 4 (decvarp -> type decvarpp SEMICOLON .)


state 28

    (5) decvarpp -> ID COMMA . decvarpp
    (5) decvarpp -> . ID COMMA decvarpp
    (6) decvarpp -> . ID

    ID              shift and go to state 23

    decvarpp                       shift and go to state 31

state 29

    (9) function -> FUNCTION type decfunc LPAREN . param RPAREN LBRACE body RBRACE
    (21) param -> . type ID
    (22) param -> . type ID COMMA param
    (7) type -> . INT
    (8) type -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 14

    type                           shift and go to state 32
    param                          shift and go to state 33

state 30

    (11) voidfunction -> FUNCTION VOID decfunc LPAREN . param RPAREN LBRACE body RBRACE
    (21) param -> . type ID
    (22) param -> . type ID COMMA param
    (7) type -> . INT
    (8) type -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 14

    param                          shift and go to state 34
    type                           shift and go to state 32

state 31

    (5) decvarpp -> ID COMMA decvarpp .

    SEMICOLON       reduce using rule 5 (decvarpp -> ID COMMA decvarpp .)


state 32

    (21) param -> type . ID
    (22) param -> type . ID COMMA param

    ID              shift and go to state 35


state 33

    (9) function -> FUNCTION type decfunc LPAREN param . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 36


state 34

    (11) voidfunction -> FUNCTION VOID decfunc LPAREN param . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 37


state 35

    (21) param -> type ID .
    (22) param -> type ID . COMMA param

    RPAREN          reduce using rule 21 (param -> type ID .)
    COMMA           shift and go to state 38


state 36

    (9) function -> FUNCTION type decfunc LPAREN param RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 39


state 37

    (11) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 40


state 38

    (22) param -> type ID COMMA . param
    (21) param -> . type ID
    (22) param -> . type ID COMMA param
    (7) type -> . INT
    (8) type -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 14

    type                           shift and go to state 32
    param                          shift and go to state 41

state 39

    (9) function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE . body RBRACE
    (17) body -> . decvar statements body
    (18) body -> . statements body
    (19) body -> . decvar
    (20) body -> .
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf
    (69) while -> . WHILE LPAREN exp RPAREN statements whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (59) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACE          reduce using rule 20 (body -> .)
    VAR             shift and go to state 6
    FUNCTION        shift and go to state 10
    ID              shift and go to state 56
    READ            shift and go to state 57
    PRINT           shift and go to state 58
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    MEAN            shift and go to state 71

    body                           shift and go to state 42
    decvar                         shift and go to state 43
    statements                     shift and go to state 44
    assign                         shift and go to state 45
    function                       shift and go to state 46
    voidfunction                   shift and go to state 47
    call                           shift and go to state 48
    read                           shift and go to state 49
    print                          shift and go to state 50
    if                             shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    funcesp                        shift and go to state 54
    var                            shift and go to state 55
    array                          shift and go to state 62
    matrix                         shift and go to state 63
    mean                           shift and go to state 64
    layers                         shift and go to state 65
    sequential                     shift and go to state 66
    compile                        shift and go to state 67
    fit                            shift and go to state 68
    predict                        shift and go to state 69
    getweights                     shift and go to state 70

state 40

    (11) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE . body RBRACE
    (17) body -> . decvar statements body
    (18) body -> . statements body
    (19) body -> . decvar
    (20) body -> .
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf
    (69) while -> . WHILE LPAREN exp RPAREN statements whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (59) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACE          reduce using rule 20 (body -> .)
    VAR             shift and go to state 6
    FUNCTION        shift and go to state 10
    ID              shift and go to state 56
    READ            shift and go to state 57
    PRINT           shift and go to state 58
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    MEAN            shift and go to state 71

    body                           shift and go to state 72
    decvar                         shift and go to state 43
    statements                     shift and go to state 44
    assign                         shift and go to state 45
    function                       shift and go to state 46
    voidfunction                   shift and go to state 47
    call                           shift and go to state 48
    read                           shift and go to state 49
    print                          shift and go to state 50
    if                             shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    funcesp                        shift and go to state 54
    var                            shift and go to state 55
    array                          shift and go to state 62
    matrix                         shift and go to state 63
    mean                           shift and go to state 64
    layers                         shift and go to state 65
    sequential                     shift and go to state 66
    compile                        shift and go to state 67
    fit                            shift and go to state 68
    predict                        shift and go to state 69
    getweights                     shift and go to state 70

state 41

    (22) param -> type ID COMMA param .

    RPAREN          reduce using rule 22 (param -> type ID COMMA param .)


state 42

    (9) function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 73


state 43

    (17) body -> decvar . statements body
    (19) body -> decvar .
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf
    (69) while -> . WHILE LPAREN exp RPAREN statements whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (59) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACE          reduce using rule 19 (body -> decvar .)
    FUNCTION        shift and go to state 10
    ID              shift and go to state 56
    READ            shift and go to state 57
    PRINT           shift and go to state 58
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    MEAN            shift and go to state 71

    statements                     shift and go to state 74
    assign                         shift and go to state 45
    function                       shift and go to state 46
    voidfunction                   shift and go to state 47
    call                           shift and go to state 48
    read                           shift and go to state 49
    print                          shift and go to state 50
    if                             shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    funcesp                        shift and go to state 54
    var                            shift and go to state 55
    array                          shift and go to state 62
    matrix                         shift and go to state 63
    mean                           shift and go to state 64
    layers                         shift and go to state 65
    sequential                     shift and go to state 66
    compile                        shift and go to state 67
    fit                            shift and go to state 68
    predict                        shift and go to state 69
    getweights                     shift and go to state 70

state 44

    (18) body -> statements . body
    (17) body -> . decvar statements body
    (18) body -> . statements body
    (19) body -> . decvar
    (20) body -> .
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf
    (69) while -> . WHILE LPAREN exp RPAREN statements whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (59) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACE          reduce using rule 20 (body -> .)
    VAR             shift and go to state 6
    FUNCTION        shift and go to state 10
    ID              shift and go to state 56
    READ            shift and go to state 57
    PRINT           shift and go to state 58
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    MEAN            shift and go to state 71

    statements                     shift and go to state 44
    body                           shift and go to state 75
    decvar                         shift and go to state 43
    assign                         shift and go to state 45
    function                       shift and go to state 46
    voidfunction                   shift and go to state 47
    call                           shift and go to state 48
    read                           shift and go to state 49
    print                          shift and go to state 50
    if                             shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    funcesp                        shift and go to state 54
    var                            shift and go to state 55
    array                          shift and go to state 62
    matrix                         shift and go to state 63
    mean                           shift and go to state 64
    layers                         shift and go to state 65
    sequential                     shift and go to state 66
    compile                        shift and go to state 67
    fit                            shift and go to state 68
    predict                        shift and go to state 69
    getweights                     shift and go to state 70

state 45

    (44) statements -> assign .

    VAR             reduce using rule 44 (statements -> assign .)
    FUNCTION        reduce using rule 44 (statements -> assign .)
    ID              reduce using rule 44 (statements -> assign .)
    READ            reduce using rule 44 (statements -> assign .)
    PRINT           reduce using rule 44 (statements -> assign .)
    IF              reduce using rule 44 (statements -> assign .)
    WHILE           reduce using rule 44 (statements -> assign .)
    FOR             reduce using rule 44 (statements -> assign .)
    MEAN            reduce using rule 44 (statements -> assign .)
    RBRACE          reduce using rule 44 (statements -> assign .)
    SEMICOLON       reduce using rule 44 (statements -> assign .)
    RBRACKET        reduce using rule 44 (statements -> assign .)


state 46

    (45) statements -> function .

    VAR             reduce using rule 45 (statements -> function .)
    FUNCTION        reduce using rule 45 (statements -> function .)
    ID              reduce using rule 45 (statements -> function .)
    READ            reduce using rule 45 (statements -> function .)
    PRINT           reduce using rule 45 (statements -> function .)
    IF              reduce using rule 45 (statements -> function .)
    WHILE           reduce using rule 45 (statements -> function .)
    FOR             reduce using rule 45 (statements -> function .)
    MEAN            reduce using rule 45 (statements -> function .)
    RBRACE          reduce using rule 45 (statements -> function .)
    SEMICOLON       reduce using rule 45 (statements -> function .)
    RBRACKET        reduce using rule 45 (statements -> function .)


state 47

    (46) statements -> voidfunction .

    VAR             reduce using rule 46 (statements -> voidfunction .)
    FUNCTION        reduce using rule 46 (statements -> voidfunction .)
    ID              reduce using rule 46 (statements -> voidfunction .)
    READ            reduce using rule 46 (statements -> voidfunction .)
    PRINT           reduce using rule 46 (statements -> voidfunction .)
    IF              reduce using rule 46 (statements -> voidfunction .)
    WHILE           reduce using rule 46 (statements -> voidfunction .)
    FOR             reduce using rule 46 (statements -> voidfunction .)
    MEAN            reduce using rule 46 (statements -> voidfunction .)
    RBRACE          reduce using rule 46 (statements -> voidfunction .)
    SEMICOLON       reduce using rule 46 (statements -> voidfunction .)
    RBRACKET        reduce using rule 46 (statements -> voidfunction .)


state 48

    (47) statements -> call .

    VAR             reduce using rule 47 (statements -> call .)
    FUNCTION        reduce using rule 47 (statements -> call .)
    ID              reduce using rule 47 (statements -> call .)
    READ            reduce using rule 47 (statements -> call .)
    PRINT           reduce using rule 47 (statements -> call .)
    IF              reduce using rule 47 (statements -> call .)
    WHILE           reduce using rule 47 (statements -> call .)
    FOR             reduce using rule 47 (statements -> call .)
    MEAN            reduce using rule 47 (statements -> call .)
    RBRACE          reduce using rule 47 (statements -> call .)
    SEMICOLON       reduce using rule 47 (statements -> call .)
    RBRACKET        reduce using rule 47 (statements -> call .)


state 49

    (48) statements -> read .

    VAR             reduce using rule 48 (statements -> read .)
    FUNCTION        reduce using rule 48 (statements -> read .)
    ID              reduce using rule 48 (statements -> read .)
    READ            reduce using rule 48 (statements -> read .)
    PRINT           reduce using rule 48 (statements -> read .)
    IF              reduce using rule 48 (statements -> read .)
    WHILE           reduce using rule 48 (statements -> read .)
    FOR             reduce using rule 48 (statements -> read .)
    MEAN            reduce using rule 48 (statements -> read .)
    RBRACE          reduce using rule 48 (statements -> read .)
    SEMICOLON       reduce using rule 48 (statements -> read .)
    RBRACKET        reduce using rule 48 (statements -> read .)


state 50

    (49) statements -> print .

    VAR             reduce using rule 49 (statements -> print .)
    FUNCTION        reduce using rule 49 (statements -> print .)
    ID              reduce using rule 49 (statements -> print .)
    READ            reduce using rule 49 (statements -> print .)
    PRINT           reduce using rule 49 (statements -> print .)
    IF              reduce using rule 49 (statements -> print .)
    WHILE           reduce using rule 49 (statements -> print .)
    FOR             reduce using rule 49 (statements -> print .)
    MEAN            reduce using rule 49 (statements -> print .)
    RBRACE          reduce using rule 49 (statements -> print .)
    SEMICOLON       reduce using rule 49 (statements -> print .)
    RBRACKET        reduce using rule 49 (statements -> print .)


state 51

    (50) statements -> if .

    VAR             reduce using rule 50 (statements -> if .)
    FUNCTION        reduce using rule 50 (statements -> if .)
    ID              reduce using rule 50 (statements -> if .)
    READ            reduce using rule 50 (statements -> if .)
    PRINT           reduce using rule 50 (statements -> if .)
    IF              reduce using rule 50 (statements -> if .)
    WHILE           reduce using rule 50 (statements -> if .)
    FOR             reduce using rule 50 (statements -> if .)
    MEAN            reduce using rule 50 (statements -> if .)
    RBRACE          reduce using rule 50 (statements -> if .)
    SEMICOLON       reduce using rule 50 (statements -> if .)
    RBRACKET        reduce using rule 50 (statements -> if .)


state 52

    (51) statements -> while .

    VAR             reduce using rule 51 (statements -> while .)
    FUNCTION        reduce using rule 51 (statements -> while .)
    ID              reduce using rule 51 (statements -> while .)
    READ            reduce using rule 51 (statements -> while .)
    PRINT           reduce using rule 51 (statements -> while .)
    IF              reduce using rule 51 (statements -> while .)
    WHILE           reduce using rule 51 (statements -> while .)
    FOR             reduce using rule 51 (statements -> while .)
    MEAN            reduce using rule 51 (statements -> while .)
    RBRACE          reduce using rule 51 (statements -> while .)
    SEMICOLON       reduce using rule 51 (statements -> while .)
    RBRACKET        reduce using rule 51 (statements -> while .)


state 53

    (52) statements -> for .

    VAR             reduce using rule 52 (statements -> for .)
    FUNCTION        reduce using rule 52 (statements -> for .)
    ID              reduce using rule 52 (statements -> for .)
    READ            reduce using rule 52 (statements -> for .)
    PRINT           reduce using rule 52 (statements -> for .)
    IF              reduce using rule 52 (statements -> for .)
    WHILE           reduce using rule 52 (statements -> for .)
    FOR             reduce using rule 52 (statements -> for .)
    MEAN            reduce using rule 52 (statements -> for .)
    RBRACE          reduce using rule 52 (statements -> for .)
    SEMICOLON       reduce using rule 52 (statements -> for .)
    RBRACKET        reduce using rule 52 (statements -> for .)


state 54

    (53) statements -> funcesp .

    VAR             reduce using rule 53 (statements -> funcesp .)
    FUNCTION        reduce using rule 53 (statements -> funcesp .)
    ID              reduce using rule 53 (statements -> funcesp .)
    READ            reduce using rule 53 (statements -> funcesp .)
    PRINT           reduce using rule 53 (statements -> funcesp .)
    IF              reduce using rule 53 (statements -> funcesp .)
    WHILE           reduce using rule 53 (statements -> funcesp .)
    FOR             reduce using rule 53 (statements -> funcesp .)
    MEAN            reduce using rule 53 (statements -> funcesp .)
    RBRACE          reduce using rule 53 (statements -> funcesp .)
    SEMICOLON       reduce using rule 53 (statements -> funcesp .)
    RBRACKET        reduce using rule 53 (statements -> funcesp .)


state 55

    (54) assign -> var . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 76


state 56

    (60) call -> ID . LPAREN callp RPAREN
    (59) var -> ID .
    (84) array -> ID . EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> ID . EQUAL MATRIX LPAREN array matrixp
    (91) layers -> ID . EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> ID . EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (96) fit -> ID . EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> ID . EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp

  ! shift/reduce conflict for EQUAL resolved as shift
    LPAREN          shift and go to state 77
    EQUAL           shift and go to state 78

  ! EQUAL           [ reduce using rule 59 (var -> ID .) ]


state 57

    (55) read -> READ . var
    (59) var -> . ID

    ID              shift and go to state 80

    var                            shift and go to state 79

state 58

    (56) print -> PRINT . LPAREN printp

    LPAREN          shift and go to state 81


state 59

    (63) if -> IF . LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf

    LPAREN          shift and go to state 82


state 60

    (69) while -> WHILE . LPAREN exp RPAREN statements whilep

    LPAREN          shift and go to state 83


state 61

    (72) for -> FOR . LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp

    LPAREN          shift and go to state 84


state 62

    (75) funcesp -> array .

    VAR             reduce using rule 75 (funcesp -> array .)
    FUNCTION        reduce using rule 75 (funcesp -> array .)
    ID              reduce using rule 75 (funcesp -> array .)
    READ            reduce using rule 75 (funcesp -> array .)
    PRINT           reduce using rule 75 (funcesp -> array .)
    IF              reduce using rule 75 (funcesp -> array .)
    WHILE           reduce using rule 75 (funcesp -> array .)
    FOR             reduce using rule 75 (funcesp -> array .)
    MEAN            reduce using rule 75 (funcesp -> array .)
    RBRACE          reduce using rule 75 (funcesp -> array .)
    SEMICOLON       reduce using rule 75 (funcesp -> array .)
    RBRACKET        reduce using rule 75 (funcesp -> array .)


state 63

    (76) funcesp -> matrix .

    VAR             reduce using rule 76 (funcesp -> matrix .)
    FUNCTION        reduce using rule 76 (funcesp -> matrix .)
    ID              reduce using rule 76 (funcesp -> matrix .)
    READ            reduce using rule 76 (funcesp -> matrix .)
    PRINT           reduce using rule 76 (funcesp -> matrix .)
    IF              reduce using rule 76 (funcesp -> matrix .)
    WHILE           reduce using rule 76 (funcesp -> matrix .)
    FOR             reduce using rule 76 (funcesp -> matrix .)
    MEAN            reduce using rule 76 (funcesp -> matrix .)
    RBRACE          reduce using rule 76 (funcesp -> matrix .)
    SEMICOLON       reduce using rule 76 (funcesp -> matrix .)
    RBRACKET        reduce using rule 76 (funcesp -> matrix .)


state 64

    (77) funcesp -> mean .

    VAR             reduce using rule 77 (funcesp -> mean .)
    FUNCTION        reduce using rule 77 (funcesp -> mean .)
    ID              reduce using rule 77 (funcesp -> mean .)
    READ            reduce using rule 77 (funcesp -> mean .)
    PRINT           reduce using rule 77 (funcesp -> mean .)
    IF              reduce using rule 77 (funcesp -> mean .)
    WHILE           reduce using rule 77 (funcesp -> mean .)
    FOR             reduce using rule 77 (funcesp -> mean .)
    MEAN            reduce using rule 77 (funcesp -> mean .)
    RBRACE          reduce using rule 77 (funcesp -> mean .)
    SEMICOLON       reduce using rule 77 (funcesp -> mean .)
    RBRACKET        reduce using rule 77 (funcesp -> mean .)


state 65

    (78) funcesp -> layers .
    (102) getweights -> layers . DOT GETWEIGHTS LPAREN RPAREN

    VAR             reduce using rule 78 (funcesp -> layers .)
    FUNCTION        reduce using rule 78 (funcesp -> layers .)
    ID              reduce using rule 78 (funcesp -> layers .)
    READ            reduce using rule 78 (funcesp -> layers .)
    PRINT           reduce using rule 78 (funcesp -> layers .)
    IF              reduce using rule 78 (funcesp -> layers .)
    WHILE           reduce using rule 78 (funcesp -> layers .)
    FOR             reduce using rule 78 (funcesp -> layers .)
    MEAN            reduce using rule 78 (funcesp -> layers .)
    RBRACE          reduce using rule 78 (funcesp -> layers .)
    SEMICOLON       reduce using rule 78 (funcesp -> layers .)
    RBRACKET        reduce using rule 78 (funcesp -> layers .)
    DOT             shift and go to state 85


state 66

    (79) funcesp -> sequential .
    (95) compile -> sequential . DOT COMPILE LPAREN RPAREN

    VAR             reduce using rule 79 (funcesp -> sequential .)
    FUNCTION        reduce using rule 79 (funcesp -> sequential .)
    ID              reduce using rule 79 (funcesp -> sequential .)
    READ            reduce using rule 79 (funcesp -> sequential .)
    PRINT           reduce using rule 79 (funcesp -> sequential .)
    IF              reduce using rule 79 (funcesp -> sequential .)
    WHILE           reduce using rule 79 (funcesp -> sequential .)
    FOR             reduce using rule 79 (funcesp -> sequential .)
    MEAN            reduce using rule 79 (funcesp -> sequential .)
    RBRACE          reduce using rule 79 (funcesp -> sequential .)
    SEMICOLON       reduce using rule 79 (funcesp -> sequential .)
    RBRACKET        reduce using rule 79 (funcesp -> sequential .)
    DOT             shift and go to state 86


state 67

    (80) funcesp -> compile .

    VAR             reduce using rule 80 (funcesp -> compile .)
    FUNCTION        reduce using rule 80 (funcesp -> compile .)
    ID              reduce using rule 80 (funcesp -> compile .)
    READ            reduce using rule 80 (funcesp -> compile .)
    PRINT           reduce using rule 80 (funcesp -> compile .)
    IF              reduce using rule 80 (funcesp -> compile .)
    WHILE           reduce using rule 80 (funcesp -> compile .)
    FOR             reduce using rule 80 (funcesp -> compile .)
    MEAN            reduce using rule 80 (funcesp -> compile .)
    RBRACE          reduce using rule 80 (funcesp -> compile .)
    SEMICOLON       reduce using rule 80 (funcesp -> compile .)
    RBRACKET        reduce using rule 80 (funcesp -> compile .)


state 68

    (81) funcesp -> fit .

    VAR             reduce using rule 81 (funcesp -> fit .)
    FUNCTION        reduce using rule 81 (funcesp -> fit .)
    ID              reduce using rule 81 (funcesp -> fit .)
    READ            reduce using rule 81 (funcesp -> fit .)
    PRINT           reduce using rule 81 (funcesp -> fit .)
    IF              reduce using rule 81 (funcesp -> fit .)
    WHILE           reduce using rule 81 (funcesp -> fit .)
    FOR             reduce using rule 81 (funcesp -> fit .)
    MEAN            reduce using rule 81 (funcesp -> fit .)
    RBRACE          reduce using rule 81 (funcesp -> fit .)
    SEMICOLON       reduce using rule 81 (funcesp -> fit .)
    RBRACKET        reduce using rule 81 (funcesp -> fit .)


state 69

    (82) funcesp -> predict .

    VAR             reduce using rule 82 (funcesp -> predict .)
    FUNCTION        reduce using rule 82 (funcesp -> predict .)
    ID              reduce using rule 82 (funcesp -> predict .)
    READ            reduce using rule 82 (funcesp -> predict .)
    PRINT           reduce using rule 82 (funcesp -> predict .)
    IF              reduce using rule 82 (funcesp -> predict .)
    WHILE           reduce using rule 82 (funcesp -> predict .)
    FOR             reduce using rule 82 (funcesp -> predict .)
    MEAN            reduce using rule 82 (funcesp -> predict .)
    RBRACE          reduce using rule 82 (funcesp -> predict .)
    SEMICOLON       reduce using rule 82 (funcesp -> predict .)
    RBRACKET        reduce using rule 82 (funcesp -> predict .)


state 70

    (83) funcesp -> getweights .

    VAR             reduce using rule 83 (funcesp -> getweights .)
    FUNCTION        reduce using rule 83 (funcesp -> getweights .)
    ID              reduce using rule 83 (funcesp -> getweights .)
    READ            reduce using rule 83 (funcesp -> getweights .)
    PRINT           reduce using rule 83 (funcesp -> getweights .)
    IF              reduce using rule 83 (funcesp -> getweights .)
    WHILE           reduce using rule 83 (funcesp -> getweights .)
    FOR             reduce using rule 83 (funcesp -> getweights .)
    MEAN            reduce using rule 83 (funcesp -> getweights .)
    RBRACE          reduce using rule 83 (funcesp -> getweights .)
    SEMICOLON       reduce using rule 83 (funcesp -> getweights .)
    RBRACKET        reduce using rule 83 (funcesp -> getweights .)


state 71

    (90) mean -> MEAN . LPAREN array RPAREN

    LPAREN          shift and go to state 87


state 72

    (11) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 88


state 73

    (9) function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .

    FUNCTION        reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    MAIN            reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    VAR             reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    READ            reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    MEAN            reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    SEMICOLON       reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RBRACKET        reduce using rule 9 (function -> FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE .)


state 74

    (17) body -> decvar statements . body
    (17) body -> . decvar statements body
    (18) body -> . statements body
    (19) body -> . decvar
    (20) body -> .
    (2) decvar -> . VAR decvarp
    (3) decvar -> . VAR decvarp decvar
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf
    (69) while -> . WHILE LPAREN exp RPAREN statements whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (59) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACE          reduce using rule 20 (body -> .)
    VAR             shift and go to state 6
    FUNCTION        shift and go to state 10
    ID              shift and go to state 56
    READ            shift and go to state 57
    PRINT           shift and go to state 58
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    MEAN            shift and go to state 71

    decvar                         shift and go to state 43
    statements                     shift and go to state 44
    body                           shift and go to state 89
    assign                         shift and go to state 45
    function                       shift and go to state 46
    voidfunction                   shift and go to state 47
    call                           shift and go to state 48
    read                           shift and go to state 49
    print                          shift and go to state 50
    if                             shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    funcesp                        shift and go to state 54
    var                            shift and go to state 55
    array                          shift and go to state 62
    matrix                         shift and go to state 63
    mean                           shift and go to state 64
    layers                         shift and go to state 65
    sequential                     shift and go to state 66
    compile                        shift and go to state 67
    fit                            shift and go to state 68
    predict                        shift and go to state 69
    getweights                     shift and go to state 70

state 75

    (18) body -> statements body .

    RBRACE          reduce using rule 18 (body -> statements body .)


state 76

    (54) assign -> var EQUAL . exp SEMICOLON
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    var                            shift and go to state 90
    exp                            shift and go to state 91
    texp                           shift and go to state 92
    gexp                           shift and go to state 93
    mexp                           shift and go to state 94
    t                              shift and go to state 95
    f                              shift and go to state 96
    call                           shift and go to state 100

state 77

    (60) call -> ID LPAREN . callp RPAREN
    (61) callp -> . exp SEMICOLON callp
    (62) callp -> . exp
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    callp                          shift and go to state 102
    exp                            shift and go to state 103
    texp                           shift and go to state 92
    gexp                           shift and go to state 93
    mexp                           shift and go to state 94
    t                              shift and go to state 95
    f                              shift and go to state 96
    var                            shift and go to state 90
    call                           shift and go to state 100

state 78

    (84) array -> ID EQUAL . ARRAY LPAREN var arrayp
    (87) matrix -> ID EQUAL . MATRIX LPAREN array matrixp
    (91) layers -> ID EQUAL . LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> ID EQUAL . SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (96) fit -> ID EQUAL . sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> ID EQUAL . sequential DOT PREDICT LPAREN LBRACKET predictp
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp

    ARRAY           shift and go to state 105
    MATRIX          shift and go to state 106
    LAYERS          shift and go to state 107
    SEQUENTIAL      shift and go to state 108
    ID              shift and go to state 104

    sequential                     shift and go to state 109

state 79

    (55) read -> READ var .

    VAR             reduce using rule 55 (read -> READ var .)
    FUNCTION        reduce using rule 55 (read -> READ var .)
    ID              reduce using rule 55 (read -> READ var .)
    READ            reduce using rule 55 (read -> READ var .)
    PRINT           reduce using rule 55 (read -> READ var .)
    IF              reduce using rule 55 (read -> READ var .)
    WHILE           reduce using rule 55 (read -> READ var .)
    FOR             reduce using rule 55 (read -> READ var .)
    MEAN            reduce using rule 55 (read -> READ var .)
    RBRACE          reduce using rule 55 (read -> READ var .)
    SEMICOLON       reduce using rule 55 (read -> READ var .)
    RBRACKET        reduce using rule 55 (read -> READ var .)


state 80

    (59) var -> ID .

    VAR             reduce using rule 59 (var -> ID .)
    FUNCTION        reduce using rule 59 (var -> ID .)
    ID              reduce using rule 59 (var -> ID .)
    READ            reduce using rule 59 (var -> ID .)
    PRINT           reduce using rule 59 (var -> ID .)
    IF              reduce using rule 59 (var -> ID .)
    WHILE           reduce using rule 59 (var -> ID .)
    FOR             reduce using rule 59 (var -> ID .)
    MEAN            reduce using rule 59 (var -> ID .)
    RBRACE          reduce using rule 59 (var -> ID .)
    SEMICOLON       reduce using rule 59 (var -> ID .)
    RBRACKET        reduce using rule 59 (var -> ID .)
    RPAREN          reduce using rule 59 (var -> ID .)
    COMMA           reduce using rule 59 (var -> ID .)


state 81

    (56) print -> PRINT LPAREN . printp
    (57) printp -> . exp RPAREN
    (58) printp -> . exp COMMA printp
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    printp                         shift and go to state 110
    exp                            shift and go to state 111
    texp                           shift and go to state 92
    gexp                           shift and go to state 93
    mexp                           shift and go to state 94
    t                              shift and go to state 95
    f                              shift and go to state 96
    var                            shift and go to state 90
    call                           shift and go to state 100

state 82

    (63) if -> IF LPAREN . CTI GT CTI RPAREN quadsIf ifp jumpsIf

    CTI             shift and go to state 112


state 83

    (69) while -> WHILE LPAREN . exp RPAREN statements whilep
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    exp                            shift and go to state 113
    texp                           shift and go to state 92
    gexp                           shift and go to state 93
    mexp                           shift and go to state 94
    t                              shift and go to state 95
    f                              shift and go to state 96
    var                            shift and go to state 90
    call                           shift and go to state 100

state 84

    (72) for -> FOR LPAREN . var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (59) var -> . ID

    ID              shift and go to state 80

    var                            shift and go to state 114

state 85

    (102) getweights -> layers DOT . GETWEIGHTS LPAREN RPAREN

    GETWEIGHTS      shift and go to state 115


state 86

    (95) compile -> sequential DOT . COMPILE LPAREN RPAREN

    COMPILE         shift and go to state 116


state 87

    (90) mean -> MEAN LPAREN . array RPAREN
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 118

    array                          shift and go to state 117

state 88

    (11) voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .

    FUNCTION        reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    MAIN            reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    VAR             reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    READ            reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    MEAN            reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    SEMICOLON       reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)
    RBRACKET        reduce using rule 11 (voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE .)


state 89

    (17) body -> decvar statements body .

    RBRACE          reduce using rule 17 (body -> decvar statements body .)


state 90

    (42) f -> var .

    MULT            reduce using rule 42 (f -> var .)
    DIV             reduce using rule 42 (f -> var .)
    PLUS            reduce using rule 42 (f -> var .)
    MINUS           reduce using rule 42 (f -> var .)
    LT              reduce using rule 42 (f -> var .)
    GT              reduce using rule 42 (f -> var .)
    EQUAL           reduce using rule 42 (f -> var .)
    DIFF            reduce using rule 42 (f -> var .)
    AND             reduce using rule 42 (f -> var .)
    OR              reduce using rule 42 (f -> var .)
    SEMICOLON       reduce using rule 42 (f -> var .)
    RPAREN          reduce using rule 42 (f -> var .)
    COMMA           reduce using rule 42 (f -> var .)


state 91

    (54) assign -> var EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 119


state 92

    (23) exp -> texp .
    (24) exp -> texp . OR exp

    SEMICOLON       reduce using rule 23 (exp -> texp .)
    RPAREN          reduce using rule 23 (exp -> texp .)
    COMMA           reduce using rule 23 (exp -> texp .)
    OR              shift and go to state 120


state 93

    (25) texp -> gexp .
    (26) texp -> gexp . AND texp

    OR              reduce using rule 25 (texp -> gexp .)
    SEMICOLON       reduce using rule 25 (texp -> gexp .)
    RPAREN          reduce using rule 25 (texp -> gexp .)
    COMMA           reduce using rule 25 (texp -> gexp .)
    AND             shift and go to state 121


state 94

    (27) gexp -> mexp .
    (28) gexp -> mexp . gexpp mexp
    (29) gexpp -> . LT
    (30) gexpp -> . GT
    (31) gexpp -> . EQUAL
    (32) gexpp -> . DIFF

    AND             reduce using rule 27 (gexp -> mexp .)
    OR              reduce using rule 27 (gexp -> mexp .)
    SEMICOLON       reduce using rule 27 (gexp -> mexp .)
    RPAREN          reduce using rule 27 (gexp -> mexp .)
    COMMA           reduce using rule 27 (gexp -> mexp .)
    LT              shift and go to state 123
    GT              shift and go to state 124
    EQUAL           shift and go to state 125
    DIFF            shift and go to state 126

    gexpp                          shift and go to state 122

state 95

    (33) mexp -> t .
    (34) mexp -> t . PLUS mexp
    (35) mexp -> t . MINUS mexp

    LT              reduce using rule 33 (mexp -> t .)
    GT              reduce using rule 33 (mexp -> t .)
    EQUAL           reduce using rule 33 (mexp -> t .)
    DIFF            reduce using rule 33 (mexp -> t .)
    AND             reduce using rule 33 (mexp -> t .)
    OR              reduce using rule 33 (mexp -> t .)
    SEMICOLON       reduce using rule 33 (mexp -> t .)
    RPAREN          reduce using rule 33 (mexp -> t .)
    COMMA           reduce using rule 33 (mexp -> t .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128


state 96

    (36) t -> f .
    (37) t -> f . MULT t
    (38) t -> f . DIV t

    PLUS            reduce using rule 36 (t -> f .)
    MINUS           reduce using rule 36 (t -> f .)
    LT              reduce using rule 36 (t -> f .)
    GT              reduce using rule 36 (t -> f .)
    EQUAL           reduce using rule 36 (t -> f .)
    DIFF            reduce using rule 36 (t -> f .)
    AND             reduce using rule 36 (t -> f .)
    OR              reduce using rule 36 (t -> f .)
    SEMICOLON       reduce using rule 36 (t -> f .)
    RPAREN          reduce using rule 36 (t -> f .)
    COMMA           reduce using rule 36 (t -> f .)
    MULT            shift and go to state 129
    DIV             shift and go to state 130


state 97

    (39) f -> LPAREN . exp RPAREN
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    exp                            shift and go to state 131
    texp                           shift and go to state 92
    gexp                           shift and go to state 93
    mexp                           shift and go to state 94
    t                              shift and go to state 95
    f                              shift and go to state 96
    var                            shift and go to state 90
    call                           shift and go to state 100

state 98

    (40) f -> CTI .

    MULT            reduce using rule 40 (f -> CTI .)
    DIV             reduce using rule 40 (f -> CTI .)
    PLUS            reduce using rule 40 (f -> CTI .)
    MINUS           reduce using rule 40 (f -> CTI .)
    LT              reduce using rule 40 (f -> CTI .)
    GT              reduce using rule 40 (f -> CTI .)
    EQUAL           reduce using rule 40 (f -> CTI .)
    DIFF            reduce using rule 40 (f -> CTI .)
    AND             reduce using rule 40 (f -> CTI .)
    OR              reduce using rule 40 (f -> CTI .)
    SEMICOLON       reduce using rule 40 (f -> CTI .)
    RPAREN          reduce using rule 40 (f -> CTI .)
    COMMA           reduce using rule 40 (f -> CTI .)


state 99

    (41) f -> CTF .

    MULT            reduce using rule 41 (f -> CTF .)
    DIV             reduce using rule 41 (f -> CTF .)
    PLUS            reduce using rule 41 (f -> CTF .)
    MINUS           reduce using rule 41 (f -> CTF .)
    LT              reduce using rule 41 (f -> CTF .)
    GT              reduce using rule 41 (f -> CTF .)
    EQUAL           reduce using rule 41 (f -> CTF .)
    DIFF            reduce using rule 41 (f -> CTF .)
    AND             reduce using rule 41 (f -> CTF .)
    OR              reduce using rule 41 (f -> CTF .)
    SEMICOLON       reduce using rule 41 (f -> CTF .)
    RPAREN          reduce using rule 41 (f -> CTF .)
    COMMA           reduce using rule 41 (f -> CTF .)


state 100

    (43) f -> call .

    MULT            reduce using rule 43 (f -> call .)
    DIV             reduce using rule 43 (f -> call .)
    PLUS            reduce using rule 43 (f -> call .)
    MINUS           reduce using rule 43 (f -> call .)
    LT              reduce using rule 43 (f -> call .)
    GT              reduce using rule 43 (f -> call .)
    EQUAL           reduce using rule 43 (f -> call .)
    DIFF            reduce using rule 43 (f -> call .)
    AND             reduce using rule 43 (f -> call .)
    OR              reduce using rule 43 (f -> call .)
    SEMICOLON       reduce using rule 43 (f -> call .)
    RPAREN          reduce using rule 43 (f -> call .)
    COMMA           reduce using rule 43 (f -> call .)


state 101

    (59) var -> ID .
    (60) call -> ID . LPAREN callp RPAREN

    MULT            reduce using rule 59 (var -> ID .)
    DIV             reduce using rule 59 (var -> ID .)
    PLUS            reduce using rule 59 (var -> ID .)
    MINUS           reduce using rule 59 (var -> ID .)
    LT              reduce using rule 59 (var -> ID .)
    GT              reduce using rule 59 (var -> ID .)
    EQUAL           reduce using rule 59 (var -> ID .)
    DIFF            reduce using rule 59 (var -> ID .)
    AND             reduce using rule 59 (var -> ID .)
    OR              reduce using rule 59 (var -> ID .)
    SEMICOLON       reduce using rule 59 (var -> ID .)
    RPAREN          reduce using rule 59 (var -> ID .)
    COMMA           reduce using rule 59 (var -> ID .)
    LPAREN          shift and go to state 77


state 102

    (60) call -> ID LPAREN callp . RPAREN

    RPAREN          shift and go to state 132


state 103

    (61) callp -> exp . SEMICOLON callp
    (62) callp -> exp .

    SEMICOLON       shift and go to state 133
    RPAREN          reduce using rule 62 (callp -> exp .)


state 104

    (92) sequential -> ID . EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp

    EQUAL           shift and go to state 134


state 105

    (84) array -> ID EQUAL ARRAY . LPAREN var arrayp

    LPAREN          shift and go to state 135


state 106

    (87) matrix -> ID EQUAL MATRIX . LPAREN array matrixp

    LPAREN          shift and go to state 136


state 107

    (91) layers -> ID EQUAL LAYERS . LPAREN UNITS EQUAL INT RPAREN

    LPAREN          shift and go to state 137


state 108

    (92) sequential -> ID EQUAL SEQUENTIAL . LPAREN LBRACKET layers sequentialp

    LPAREN          shift and go to state 138


state 109

    (96) fit -> ID EQUAL sequential . DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> ID EQUAL sequential . DOT PREDICT LPAREN LBRACKET predictp

    DOT             shift and go to state 139


state 110

    (56) print -> PRINT LPAREN printp .

    VAR             reduce using rule 56 (print -> PRINT LPAREN printp .)
    FUNCTION        reduce using rule 56 (print -> PRINT LPAREN printp .)
    ID              reduce using rule 56 (print -> PRINT LPAREN printp .)
    READ            reduce using rule 56 (print -> PRINT LPAREN printp .)
    PRINT           reduce using rule 56 (print -> PRINT LPAREN printp .)
    IF              reduce using rule 56 (print -> PRINT LPAREN printp .)
    WHILE           reduce using rule 56 (print -> PRINT LPAREN printp .)
    FOR             reduce using rule 56 (print -> PRINT LPAREN printp .)
    MEAN            reduce using rule 56 (print -> PRINT LPAREN printp .)
    RBRACE          reduce using rule 56 (print -> PRINT LPAREN printp .)
    SEMICOLON       reduce using rule 56 (print -> PRINT LPAREN printp .)
    RBRACKET        reduce using rule 56 (print -> PRINT LPAREN printp .)


state 111

    (57) printp -> exp . RPAREN
    (58) printp -> exp . COMMA printp

    RPAREN          shift and go to state 140
    COMMA           shift and go to state 141


state 112

    (63) if -> IF LPAREN CTI . GT CTI RPAREN quadsIf ifp jumpsIf

    GT              shift and go to state 142


state 113

    (69) while -> WHILE LPAREN exp . RPAREN statements whilep

    RPAREN          shift and go to state 143


state 114

    (72) for -> FOR LPAREN var . SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp

    SEMICOLON       shift and go to state 144


state 115

    (102) getweights -> layers DOT GETWEIGHTS . LPAREN RPAREN

    LPAREN          shift and go to state 145


state 116

    (95) compile -> sequential DOT COMPILE . LPAREN RPAREN

    LPAREN          shift and go to state 146


state 117

    (90) mean -> MEAN LPAREN array . RPAREN

    RPAREN          shift and go to state 147


state 118

    (84) array -> ID . EQUAL ARRAY LPAREN var arrayp

    EQUAL           shift and go to state 148


state 119

    (54) assign -> var EQUAL exp SEMICOLON .

    VAR             reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    FUNCTION        reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    ID              reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    READ            reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    IF              reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    FOR             reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    MEAN            reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    SEMICOLON       reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)
    RBRACKET        reduce using rule 54 (assign -> var EQUAL exp SEMICOLON .)


state 120

    (24) exp -> texp OR . exp
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    texp                           shift and go to state 92
    exp                            shift and go to state 149
    gexp                           shift and go to state 93
    mexp                           shift and go to state 94
    t                              shift and go to state 95
    f                              shift and go to state 96
    var                            shift and go to state 90
    call                           shift and go to state 100

state 121

    (26) texp -> gexp AND . texp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    gexp                           shift and go to state 93
    texp                           shift and go to state 150
    mexp                           shift and go to state 94
    t                              shift and go to state 95
    f                              shift and go to state 96
    var                            shift and go to state 90
    call                           shift and go to state 100

state 122

    (28) gexp -> mexp gexpp . mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    mexp                           shift and go to state 151
    t                              shift and go to state 95
    f                              shift and go to state 96
    var                            shift and go to state 90
    call                           shift and go to state 100

state 123

    (29) gexpp -> LT .

    LPAREN          reduce using rule 29 (gexpp -> LT .)
    CTI             reduce using rule 29 (gexpp -> LT .)
    CTF             reduce using rule 29 (gexpp -> LT .)
    ID              reduce using rule 29 (gexpp -> LT .)


state 124

    (30) gexpp -> GT .

    LPAREN          reduce using rule 30 (gexpp -> GT .)
    CTI             reduce using rule 30 (gexpp -> GT .)
    CTF             reduce using rule 30 (gexpp -> GT .)
    ID              reduce using rule 30 (gexpp -> GT .)


state 125

    (31) gexpp -> EQUAL .

    LPAREN          reduce using rule 31 (gexpp -> EQUAL .)
    CTI             reduce using rule 31 (gexpp -> EQUAL .)
    CTF             reduce using rule 31 (gexpp -> EQUAL .)
    ID              reduce using rule 31 (gexpp -> EQUAL .)


state 126

    (32) gexpp -> DIFF .

    LPAREN          reduce using rule 32 (gexpp -> DIFF .)
    CTI             reduce using rule 32 (gexpp -> DIFF .)
    CTF             reduce using rule 32 (gexpp -> DIFF .)
    ID              reduce using rule 32 (gexpp -> DIFF .)


state 127

    (34) mexp -> t PLUS . mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    t                              shift and go to state 95
    mexp                           shift and go to state 152
    f                              shift and go to state 96
    var                            shift and go to state 90
    call                           shift and go to state 100

state 128

    (35) mexp -> t MINUS . mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    t                              shift and go to state 95
    mexp                           shift and go to state 153
    f                              shift and go to state 96
    var                            shift and go to state 90
    call                           shift and go to state 100

state 129

    (37) t -> f MULT . t
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    f                              shift and go to state 96
    t                              shift and go to state 154
    var                            shift and go to state 90
    call                           shift and go to state 100

state 130

    (38) t -> f DIV . t
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    f                              shift and go to state 96
    t                              shift and go to state 155
    var                            shift and go to state 90
    call                           shift and go to state 100

state 131

    (39) f -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 156


state 132

    (60) call -> ID LPAREN callp RPAREN .

    VAR             reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    FUNCTION        reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    ID              reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    READ            reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    PRINT           reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    IF              reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    WHILE           reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    FOR             reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    MEAN            reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    RBRACE          reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    MULT            reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    DIV             reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    PLUS            reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    MINUS           reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    LT              reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    GT              reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    EQUAL           reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    DIFF            reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    AND             reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    OR              reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    SEMICOLON       reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    RPAREN          reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    COMMA           reduce using rule 60 (call -> ID LPAREN callp RPAREN .)
    RBRACKET        reduce using rule 60 (call -> ID LPAREN callp RPAREN .)


state 133

    (61) callp -> exp SEMICOLON . callp
    (61) callp -> . exp SEMICOLON callp
    (62) callp -> . exp
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    exp                            shift and go to state 103
    callp                          shift and go to state 157
    texp                           shift and go to state 92
    gexp                           shift and go to state 93
    mexp                           shift and go to state 94
    t                              shift and go to state 95
    f                              shift and go to state 96
    var                            shift and go to state 90
    call                           shift and go to state 100

state 134

    (92) sequential -> ID EQUAL . SEQUENTIAL LPAREN LBRACKET layers sequentialp

    SEQUENTIAL      shift and go to state 108


state 135

    (84) array -> ID EQUAL ARRAY LPAREN . var arrayp
    (59) var -> . ID

    ID              shift and go to state 80

    var                            shift and go to state 158

state 136

    (87) matrix -> ID EQUAL MATRIX LPAREN . array matrixp
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 118

    array                          shift and go to state 159

state 137

    (91) layers -> ID EQUAL LAYERS LPAREN . UNITS EQUAL INT RPAREN

    UNITS           shift and go to state 160


state 138

    (92) sequential -> ID EQUAL SEQUENTIAL LPAREN . LBRACKET layers sequentialp

    LBRACKET        shift and go to state 161


state 139

    (96) fit -> ID EQUAL sequential DOT . FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> ID EQUAL sequential DOT . PREDICT LPAREN LBRACKET predictp

    FIT             shift and go to state 162
    PREDICT         shift and go to state 163


state 140

    (57) printp -> exp RPAREN .

    VAR             reduce using rule 57 (printp -> exp RPAREN .)
    FUNCTION        reduce using rule 57 (printp -> exp RPAREN .)
    ID              reduce using rule 57 (printp -> exp RPAREN .)
    READ            reduce using rule 57 (printp -> exp RPAREN .)
    PRINT           reduce using rule 57 (printp -> exp RPAREN .)
    IF              reduce using rule 57 (printp -> exp RPAREN .)
    WHILE           reduce using rule 57 (printp -> exp RPAREN .)
    FOR             reduce using rule 57 (printp -> exp RPAREN .)
    MEAN            reduce using rule 57 (printp -> exp RPAREN .)
    RBRACE          reduce using rule 57 (printp -> exp RPAREN .)
    SEMICOLON       reduce using rule 57 (printp -> exp RPAREN .)
    RBRACKET        reduce using rule 57 (printp -> exp RPAREN .)


state 141

    (58) printp -> exp COMMA . printp
    (57) printp -> . exp RPAREN
    (58) printp -> . exp COMMA printp
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    exp                            shift and go to state 111
    printp                         shift and go to state 164
    texp                           shift and go to state 92
    gexp                           shift and go to state 93
    mexp                           shift and go to state 94
    t                              shift and go to state 95
    f                              shift and go to state 96
    var                            shift and go to state 90
    call                           shift and go to state 100

state 142

    (63) if -> IF LPAREN CTI GT . CTI RPAREN quadsIf ifp jumpsIf

    CTI             shift and go to state 165


state 143

    (69) while -> WHILE LPAREN exp RPAREN . statements whilep
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf
    (69) while -> . WHILE LPAREN exp RPAREN statements whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (59) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    FUNCTION        shift and go to state 10
    ID              shift and go to state 56
    READ            shift and go to state 57
    PRINT           shift and go to state 58
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    MEAN            shift and go to state 71

    statements                     shift and go to state 166
    assign                         shift and go to state 45
    function                       shift and go to state 46
    voidfunction                   shift and go to state 47
    call                           shift and go to state 48
    read                           shift and go to state 49
    print                          shift and go to state 50
    if                             shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    funcesp                        shift and go to state 54
    var                            shift and go to state 55
    array                          shift and go to state 62
    matrix                         shift and go to state 63
    mean                           shift and go to state 64
    layers                         shift and go to state 65
    sequential                     shift and go to state 66
    compile                        shift and go to state 67
    fit                            shift and go to state 68
    predict                        shift and go to state 69
    getweights                     shift and go to state 70

state 144

    (72) for -> FOR LPAREN var SEMICOLON . exp SEMICOLON exp RPAREN LBRACKET statements forp
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    var                            shift and go to state 90
    exp                            shift and go to state 167
    texp                           shift and go to state 92
    gexp                           shift and go to state 93
    mexp                           shift and go to state 94
    t                              shift and go to state 95
    f                              shift and go to state 96
    call                           shift and go to state 100

state 145

    (102) getweights -> layers DOT GETWEIGHTS LPAREN . RPAREN

    RPAREN          shift and go to state 168


state 146

    (95) compile -> sequential DOT COMPILE LPAREN . RPAREN

    RPAREN          shift and go to state 169


state 147

    (90) mean -> MEAN LPAREN array RPAREN .

    VAR             reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    FUNCTION        reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    ID              reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    READ            reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    PRINT           reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    IF              reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    WHILE           reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    FOR             reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    MEAN            reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    RBRACE          reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    SEMICOLON       reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)
    RBRACKET        reduce using rule 90 (mean -> MEAN LPAREN array RPAREN .)


state 148

    (84) array -> ID EQUAL . ARRAY LPAREN var arrayp

    ARRAY           shift and go to state 105


state 149

    (24) exp -> texp OR exp .

    SEMICOLON       reduce using rule 24 (exp -> texp OR exp .)
    RPAREN          reduce using rule 24 (exp -> texp OR exp .)
    COMMA           reduce using rule 24 (exp -> texp OR exp .)


state 150

    (26) texp -> gexp AND texp .

    OR              reduce using rule 26 (texp -> gexp AND texp .)
    SEMICOLON       reduce using rule 26 (texp -> gexp AND texp .)
    RPAREN          reduce using rule 26 (texp -> gexp AND texp .)
    COMMA           reduce using rule 26 (texp -> gexp AND texp .)


state 151

    (28) gexp -> mexp gexpp mexp .

    AND             reduce using rule 28 (gexp -> mexp gexpp mexp .)
    OR              reduce using rule 28 (gexp -> mexp gexpp mexp .)
    SEMICOLON       reduce using rule 28 (gexp -> mexp gexpp mexp .)
    RPAREN          reduce using rule 28 (gexp -> mexp gexpp mexp .)
    COMMA           reduce using rule 28 (gexp -> mexp gexpp mexp .)


state 152

    (34) mexp -> t PLUS mexp .

    LT              reduce using rule 34 (mexp -> t PLUS mexp .)
    GT              reduce using rule 34 (mexp -> t PLUS mexp .)
    EQUAL           reduce using rule 34 (mexp -> t PLUS mexp .)
    DIFF            reduce using rule 34 (mexp -> t PLUS mexp .)
    AND             reduce using rule 34 (mexp -> t PLUS mexp .)
    OR              reduce using rule 34 (mexp -> t PLUS mexp .)
    SEMICOLON       reduce using rule 34 (mexp -> t PLUS mexp .)
    RPAREN          reduce using rule 34 (mexp -> t PLUS mexp .)
    COMMA           reduce using rule 34 (mexp -> t PLUS mexp .)


state 153

    (35) mexp -> t MINUS mexp .

    LT              reduce using rule 35 (mexp -> t MINUS mexp .)
    GT              reduce using rule 35 (mexp -> t MINUS mexp .)
    EQUAL           reduce using rule 35 (mexp -> t MINUS mexp .)
    DIFF            reduce using rule 35 (mexp -> t MINUS mexp .)
    AND             reduce using rule 35 (mexp -> t MINUS mexp .)
    OR              reduce using rule 35 (mexp -> t MINUS mexp .)
    SEMICOLON       reduce using rule 35 (mexp -> t MINUS mexp .)
    RPAREN          reduce using rule 35 (mexp -> t MINUS mexp .)
    COMMA           reduce using rule 35 (mexp -> t MINUS mexp .)


state 154

    (37) t -> f MULT t .

    PLUS            reduce using rule 37 (t -> f MULT t .)
    MINUS           reduce using rule 37 (t -> f MULT t .)
    LT              reduce using rule 37 (t -> f MULT t .)
    GT              reduce using rule 37 (t -> f MULT t .)
    EQUAL           reduce using rule 37 (t -> f MULT t .)
    DIFF            reduce using rule 37 (t -> f MULT t .)
    AND             reduce using rule 37 (t -> f MULT t .)
    OR              reduce using rule 37 (t -> f MULT t .)
    SEMICOLON       reduce using rule 37 (t -> f MULT t .)
    RPAREN          reduce using rule 37 (t -> f MULT t .)
    COMMA           reduce using rule 37 (t -> f MULT t .)


state 155

    (38) t -> f DIV t .

    PLUS            reduce using rule 38 (t -> f DIV t .)
    MINUS           reduce using rule 38 (t -> f DIV t .)
    LT              reduce using rule 38 (t -> f DIV t .)
    GT              reduce using rule 38 (t -> f DIV t .)
    EQUAL           reduce using rule 38 (t -> f DIV t .)
    DIFF            reduce using rule 38 (t -> f DIV t .)
    AND             reduce using rule 38 (t -> f DIV t .)
    OR              reduce using rule 38 (t -> f DIV t .)
    SEMICOLON       reduce using rule 38 (t -> f DIV t .)
    RPAREN          reduce using rule 38 (t -> f DIV t .)
    COMMA           reduce using rule 38 (t -> f DIV t .)


state 156

    (39) f -> LPAREN exp RPAREN .

    MULT            reduce using rule 39 (f -> LPAREN exp RPAREN .)
    DIV             reduce using rule 39 (f -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 39 (f -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 39 (f -> LPAREN exp RPAREN .)
    LT              reduce using rule 39 (f -> LPAREN exp RPAREN .)
    GT              reduce using rule 39 (f -> LPAREN exp RPAREN .)
    EQUAL           reduce using rule 39 (f -> LPAREN exp RPAREN .)
    DIFF            reduce using rule 39 (f -> LPAREN exp RPAREN .)
    AND             reduce using rule 39 (f -> LPAREN exp RPAREN .)
    OR              reduce using rule 39 (f -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 39 (f -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 39 (f -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 39 (f -> LPAREN exp RPAREN .)


state 157

    (61) callp -> exp SEMICOLON callp .

    RPAREN          reduce using rule 61 (callp -> exp SEMICOLON callp .)


state 158

    (84) array -> ID EQUAL ARRAY LPAREN var . arrayp
    (85) arrayp -> . RPAREN
    (86) arrayp -> . COMMA var RPAREN

    RPAREN          shift and go to state 171
    COMMA           shift and go to state 172

    arrayp                         shift and go to state 170

state 159

    (87) matrix -> ID EQUAL MATRIX LPAREN array . matrixp
    (88) matrixp -> . RPAREN
    (89) matrixp -> . COMMA array RPAREN

    RPAREN          shift and go to state 174
    COMMA           shift and go to state 175

    matrixp                        shift and go to state 173

state 160

    (91) layers -> ID EQUAL LAYERS LPAREN UNITS . EQUAL INT RPAREN

    EQUAL           shift and go to state 176


state 161

    (92) sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET . layers sequentialp
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN

    ID              shift and go to state 177

    layers                         shift and go to state 178

state 162

    (96) fit -> ID EQUAL sequential DOT FIT . LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp

    LPAREN          shift and go to state 179


state 163

    (99) predict -> ID EQUAL sequential DOT PREDICT . LPAREN LBRACKET predictp

    LPAREN          shift and go to state 180


state 164

    (58) printp -> exp COMMA printp .

    VAR             reduce using rule 58 (printp -> exp COMMA printp .)
    FUNCTION        reduce using rule 58 (printp -> exp COMMA printp .)
    ID              reduce using rule 58 (printp -> exp COMMA printp .)
    READ            reduce using rule 58 (printp -> exp COMMA printp .)
    PRINT           reduce using rule 58 (printp -> exp COMMA printp .)
    IF              reduce using rule 58 (printp -> exp COMMA printp .)
    WHILE           reduce using rule 58 (printp -> exp COMMA printp .)
    FOR             reduce using rule 58 (printp -> exp COMMA printp .)
    MEAN            reduce using rule 58 (printp -> exp COMMA printp .)
    RBRACE          reduce using rule 58 (printp -> exp COMMA printp .)
    SEMICOLON       reduce using rule 58 (printp -> exp COMMA printp .)
    RBRACKET        reduce using rule 58 (printp -> exp COMMA printp .)


state 165

    (63) if -> IF LPAREN CTI GT CTI . RPAREN quadsIf ifp jumpsIf

    RPAREN          shift and go to state 181


state 166

    (69) while -> WHILE LPAREN exp RPAREN statements . whilep
    (70) whilep -> . SEMICOLON
    (71) whilep -> . statements whilep
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf
    (69) while -> . WHILE LPAREN exp RPAREN statements whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (59) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    SEMICOLON       shift and go to state 184
    FUNCTION        shift and go to state 10
    ID              shift and go to state 56
    READ            shift and go to state 57
    PRINT           shift and go to state 58
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    MEAN            shift and go to state 71

    statements                     shift and go to state 182
    whilep                         shift and go to state 183
    assign                         shift and go to state 45
    function                       shift and go to state 46
    voidfunction                   shift and go to state 47
    call                           shift and go to state 48
    read                           shift and go to state 49
    print                          shift and go to state 50
    if                             shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    funcesp                        shift and go to state 54
    var                            shift and go to state 55
    array                          shift and go to state 62
    matrix                         shift and go to state 63
    mean                           shift and go to state 64
    layers                         shift and go to state 65
    sequential                     shift and go to state 66
    compile                        shift and go to state 67
    fit                            shift and go to state 68
    predict                        shift and go to state 69
    getweights                     shift and go to state 70

state 167

    (72) for -> FOR LPAREN var SEMICOLON exp . SEMICOLON exp RPAREN LBRACKET statements forp

    SEMICOLON       shift and go to state 185


state 168

    (102) getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .

    VAR             reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    FUNCTION        reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    ID              reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    READ            reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    PRINT           reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    IF              reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    WHILE           reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    FOR             reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    MEAN            reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    RBRACE          reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    SEMICOLON       reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)
    RBRACKET        reduce using rule 102 (getweights -> layers DOT GETWEIGHTS LPAREN RPAREN .)


state 169

    (95) compile -> sequential DOT COMPILE LPAREN RPAREN .

    VAR             reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    FUNCTION        reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    ID              reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    READ            reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    PRINT           reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    IF              reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    WHILE           reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    FOR             reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    MEAN            reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    RBRACE          reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    SEMICOLON       reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)
    RBRACKET        reduce using rule 95 (compile -> sequential DOT COMPILE LPAREN RPAREN .)


state 170

    (84) array -> ID EQUAL ARRAY LPAREN var arrayp .

    VAR             reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    FUNCTION        reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    ID              reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    READ            reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    PRINT           reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    IF              reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    WHILE           reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    FOR             reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    MEAN            reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    RBRACE          reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    RPAREN          reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    COMMA           reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    SEMICOLON       reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)
    RBRACKET        reduce using rule 84 (array -> ID EQUAL ARRAY LPAREN var arrayp .)


state 171

    (85) arrayp -> RPAREN .

    VAR             reduce using rule 85 (arrayp -> RPAREN .)
    FUNCTION        reduce using rule 85 (arrayp -> RPAREN .)
    ID              reduce using rule 85 (arrayp -> RPAREN .)
    READ            reduce using rule 85 (arrayp -> RPAREN .)
    PRINT           reduce using rule 85 (arrayp -> RPAREN .)
    IF              reduce using rule 85 (arrayp -> RPAREN .)
    WHILE           reduce using rule 85 (arrayp -> RPAREN .)
    FOR             reduce using rule 85 (arrayp -> RPAREN .)
    MEAN            reduce using rule 85 (arrayp -> RPAREN .)
    RBRACE          reduce using rule 85 (arrayp -> RPAREN .)
    RPAREN          reduce using rule 85 (arrayp -> RPAREN .)
    COMMA           reduce using rule 85 (arrayp -> RPAREN .)
    SEMICOLON       reduce using rule 85 (arrayp -> RPAREN .)
    RBRACKET        reduce using rule 85 (arrayp -> RPAREN .)


state 172

    (86) arrayp -> COMMA . var RPAREN
    (59) var -> . ID

    ID              shift and go to state 80

    var                            shift and go to state 186

state 173

    (87) matrix -> ID EQUAL MATRIX LPAREN array matrixp .

    VAR             reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    FUNCTION        reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    ID              reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    READ            reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    PRINT           reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    IF              reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    WHILE           reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    FOR             reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    MEAN            reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    RBRACE          reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    SEMICOLON       reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)
    RBRACKET        reduce using rule 87 (matrix -> ID EQUAL MATRIX LPAREN array matrixp .)


state 174

    (88) matrixp -> RPAREN .

    VAR             reduce using rule 88 (matrixp -> RPAREN .)
    FUNCTION        reduce using rule 88 (matrixp -> RPAREN .)
    ID              reduce using rule 88 (matrixp -> RPAREN .)
    READ            reduce using rule 88 (matrixp -> RPAREN .)
    PRINT           reduce using rule 88 (matrixp -> RPAREN .)
    IF              reduce using rule 88 (matrixp -> RPAREN .)
    WHILE           reduce using rule 88 (matrixp -> RPAREN .)
    FOR             reduce using rule 88 (matrixp -> RPAREN .)
    MEAN            reduce using rule 88 (matrixp -> RPAREN .)
    RBRACE          reduce using rule 88 (matrixp -> RPAREN .)
    SEMICOLON       reduce using rule 88 (matrixp -> RPAREN .)
    RBRACKET        reduce using rule 88 (matrixp -> RPAREN .)


state 175

    (89) matrixp -> COMMA . array RPAREN
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 118

    array                          shift and go to state 187

state 176

    (91) layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL . INT RPAREN

    INT             shift and go to state 188


state 177

    (91) layers -> ID . EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN

    EQUAL           shift and go to state 189


state 178

    (92) sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers . sequentialp
    (93) sequentialp -> . RBRACKET RPAREN
    (94) sequentialp -> . COMMA layers sequentialp

    RBRACKET        shift and go to state 191
    COMMA           shift and go to state 192

    sequentialp                    shift and go to state 190

state 179

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN . array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 118

    array                          shift and go to state 193

state 180

    (99) predict -> ID EQUAL sequential DOT PREDICT LPAREN . LBRACKET predictp

    LBRACKET        shift and go to state 194


state 181

    (63) if -> IF LPAREN CTI GT CTI RPAREN . quadsIf ifp jumpsIf
    (66) quadsIf -> .

    ELSE            reduce using rule 66 (quadsIf -> .)
    VAR             reduce using rule 66 (quadsIf -> .)
    FUNCTION        reduce using rule 66 (quadsIf -> .)
    ID              reduce using rule 66 (quadsIf -> .)
    READ            reduce using rule 66 (quadsIf -> .)
    PRINT           reduce using rule 66 (quadsIf -> .)
    IF              reduce using rule 66 (quadsIf -> .)
    WHILE           reduce using rule 66 (quadsIf -> .)
    FOR             reduce using rule 66 (quadsIf -> .)
    MEAN            reduce using rule 66 (quadsIf -> .)
    RBRACE          reduce using rule 66 (quadsIf -> .)
    SEMICOLON       reduce using rule 66 (quadsIf -> .)
    RBRACKET        reduce using rule 66 (quadsIf -> .)

    quadsIf                        shift and go to state 195

state 182

    (71) whilep -> statements . whilep
    (70) whilep -> . SEMICOLON
    (71) whilep -> . statements whilep
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf
    (69) while -> . WHILE LPAREN exp RPAREN statements whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (59) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    SEMICOLON       shift and go to state 184
    FUNCTION        shift and go to state 10
    ID              shift and go to state 56
    READ            shift and go to state 57
    PRINT           shift and go to state 58
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    MEAN            shift and go to state 71

    statements                     shift and go to state 182
    whilep                         shift and go to state 196
    assign                         shift and go to state 45
    function                       shift and go to state 46
    voidfunction                   shift and go to state 47
    call                           shift and go to state 48
    read                           shift and go to state 49
    print                          shift and go to state 50
    if                             shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    funcesp                        shift and go to state 54
    var                            shift and go to state 55
    array                          shift and go to state 62
    matrix                         shift and go to state 63
    mean                           shift and go to state 64
    layers                         shift and go to state 65
    sequential                     shift and go to state 66
    compile                        shift and go to state 67
    fit                            shift and go to state 68
    predict                        shift and go to state 69
    getweights                     shift and go to state 70

state 183

    (69) while -> WHILE LPAREN exp RPAREN statements whilep .

    VAR             reduce using rule 69 (while -> WHILE LPAREN exp RPAREN statements whilep .)
    FUNCTION        reduce using rule 69 (while -> WHILE LPAREN exp RPAREN statements whilep .)
    ID              reduce using rule 69 (while -> WHILE LPAREN exp RPAREN statements whilep .)
    READ            reduce using rule 69 (while -> WHILE LPAREN exp RPAREN statements whilep .)
    PRINT           reduce using rule 69 (while -> WHILE LPAREN exp RPAREN statements whilep .)
    IF              reduce using rule 69 (while -> WHILE LPAREN exp RPAREN statements whilep .)
    WHILE           reduce using rule 69 (while -> WHILE LPAREN exp RPAREN statements whilep .)
    FOR             reduce using rule 69 (while -> WHILE LPAREN exp RPAREN statements whilep .)
    MEAN            reduce using rule 69 (while -> WHILE LPAREN exp RPAREN statements whilep .)
    RBRACE          reduce using rule 69 (while -> WHILE LPAREN exp RPAREN statements whilep .)
    SEMICOLON       reduce using rule 69 (while -> WHILE LPAREN exp RPAREN statements whilep .)
    RBRACKET        reduce using rule 69 (while -> WHILE LPAREN exp RPAREN statements whilep .)


state 184

    (70) whilep -> SEMICOLON .

    VAR             reduce using rule 70 (whilep -> SEMICOLON .)
    FUNCTION        reduce using rule 70 (whilep -> SEMICOLON .)
    ID              reduce using rule 70 (whilep -> SEMICOLON .)
    READ            reduce using rule 70 (whilep -> SEMICOLON .)
    PRINT           reduce using rule 70 (whilep -> SEMICOLON .)
    IF              reduce using rule 70 (whilep -> SEMICOLON .)
    WHILE           reduce using rule 70 (whilep -> SEMICOLON .)
    FOR             reduce using rule 70 (whilep -> SEMICOLON .)
    MEAN            reduce using rule 70 (whilep -> SEMICOLON .)
    RBRACE          reduce using rule 70 (whilep -> SEMICOLON .)
    SEMICOLON       reduce using rule 70 (whilep -> SEMICOLON .)
    RBRACKET        reduce using rule 70 (whilep -> SEMICOLON .)


state 185

    (72) for -> FOR LPAREN var SEMICOLON exp SEMICOLON . exp RPAREN LBRACKET statements forp
    (23) exp -> . texp
    (24) exp -> . texp OR exp
    (25) texp -> . gexp
    (26) texp -> . gexp AND texp
    (27) gexp -> . mexp
    (28) gexp -> . mexp gexpp mexp
    (33) mexp -> . t
    (34) mexp -> . t PLUS mexp
    (35) mexp -> . t MINUS mexp
    (36) t -> . f
    (37) t -> . f MULT t
    (38) t -> . f DIV t
    (39) f -> . LPAREN exp RPAREN
    (40) f -> . CTI
    (41) f -> . CTF
    (42) f -> . var
    (43) f -> . call
    (59) var -> . ID
    (60) call -> . ID LPAREN callp RPAREN

    LPAREN          shift and go to state 97
    CTI             shift and go to state 98
    CTF             shift and go to state 99
    ID              shift and go to state 101

    var                            shift and go to state 90
    exp                            shift and go to state 197
    texp                           shift and go to state 92
    gexp                           shift and go to state 93
    mexp                           shift and go to state 94
    t                              shift and go to state 95
    f                              shift and go to state 96
    call                           shift and go to state 100

state 186

    (86) arrayp -> COMMA var . RPAREN

    RPAREN          shift and go to state 198


state 187

    (89) matrixp -> COMMA array . RPAREN

    RPAREN          shift and go to state 199


state 188

    (91) layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT . RPAREN

    RPAREN          shift and go to state 200


state 189

    (91) layers -> ID EQUAL . LAYERS LPAREN UNITS EQUAL INT RPAREN

    LAYERS          shift and go to state 107


state 190

    (92) sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .

    DOT             reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    VAR             reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    FUNCTION        reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    ID              reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    READ            reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    PRINT           reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    IF              reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    WHILE           reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    FOR             reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    MEAN            reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    RBRACE          reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    SEMICOLON       reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)
    RBRACKET        reduce using rule 92 (sequential -> ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp .)


state 191

    (93) sequentialp -> RBRACKET . RPAREN

    RPAREN          shift and go to state 201


state 192

    (94) sequentialp -> COMMA . layers sequentialp
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN

    ID              shift and go to state 177

    layers                         shift and go to state 202

state 193

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array . COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp

    COMMA           shift and go to state 203


state 194

    (99) predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET . predictp
    (100) predictp -> . INT RBRACKET RPAREN
    (101) predictp -> . FLOAT RBRACKET RPAREN

    INT             shift and go to state 205
    FLOAT           shift and go to state 206

    predictp                       shift and go to state 204

state 195

    (63) if -> IF LPAREN CTI GT CTI RPAREN quadsIf . ifp jumpsIf
    (64) ifp -> .
    (65) ifp -> . ELSE quadsElse statements

    VAR             reduce using rule 64 (ifp -> .)
    FUNCTION        reduce using rule 64 (ifp -> .)
    ID              reduce using rule 64 (ifp -> .)
    READ            reduce using rule 64 (ifp -> .)
    PRINT           reduce using rule 64 (ifp -> .)
    IF              reduce using rule 64 (ifp -> .)
    WHILE           reduce using rule 64 (ifp -> .)
    FOR             reduce using rule 64 (ifp -> .)
    MEAN            reduce using rule 64 (ifp -> .)
    RBRACE          reduce using rule 64 (ifp -> .)
    SEMICOLON       reduce using rule 64 (ifp -> .)
    RBRACKET        reduce using rule 64 (ifp -> .)
    ELSE            shift and go to state 208

    ifp                            shift and go to state 207

state 196

    (71) whilep -> statements whilep .

    VAR             reduce using rule 71 (whilep -> statements whilep .)
    FUNCTION        reduce using rule 71 (whilep -> statements whilep .)
    ID              reduce using rule 71 (whilep -> statements whilep .)
    READ            reduce using rule 71 (whilep -> statements whilep .)
    PRINT           reduce using rule 71 (whilep -> statements whilep .)
    IF              reduce using rule 71 (whilep -> statements whilep .)
    WHILE           reduce using rule 71 (whilep -> statements whilep .)
    FOR             reduce using rule 71 (whilep -> statements whilep .)
    MEAN            reduce using rule 71 (whilep -> statements whilep .)
    RBRACE          reduce using rule 71 (whilep -> statements whilep .)
    SEMICOLON       reduce using rule 71 (whilep -> statements whilep .)
    RBRACKET        reduce using rule 71 (whilep -> statements whilep .)


state 197

    (72) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp . RPAREN LBRACKET statements forp

    RPAREN          shift and go to state 209


state 198

    (86) arrayp -> COMMA var RPAREN .

    VAR             reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    FUNCTION        reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    ID              reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    READ            reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    PRINT           reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    IF              reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    WHILE           reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    FOR             reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    MEAN            reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    RBRACE          reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    RPAREN          reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    COMMA           reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    SEMICOLON       reduce using rule 86 (arrayp -> COMMA var RPAREN .)
    RBRACKET        reduce using rule 86 (arrayp -> COMMA var RPAREN .)


state 199

    (89) matrixp -> COMMA array RPAREN .

    VAR             reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    FUNCTION        reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    ID              reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    READ            reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    PRINT           reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    IF              reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    WHILE           reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    FOR             reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    MEAN            reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    RBRACE          reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    SEMICOLON       reduce using rule 89 (matrixp -> COMMA array RPAREN .)
    RBRACKET        reduce using rule 89 (matrixp -> COMMA array RPAREN .)


state 200

    (91) layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .

    DOT             reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    VAR             reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    FUNCTION        reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    ID              reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    READ            reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    PRINT           reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    IF              reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    WHILE           reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    FOR             reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    MEAN            reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    RBRACE          reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    SEMICOLON       reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    RBRACKET        reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)
    COMMA           reduce using rule 91 (layers -> ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN .)


state 201

    (93) sequentialp -> RBRACKET RPAREN .

    DOT             reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    VAR             reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    FUNCTION        reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    ID              reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    READ            reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    PRINT           reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    IF              reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    WHILE           reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    FOR             reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    MEAN            reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    RBRACE          reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    SEMICOLON       reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)
    RBRACKET        reduce using rule 93 (sequentialp -> RBRACKET RPAREN .)


state 202

    (94) sequentialp -> COMMA layers . sequentialp
    (93) sequentialp -> . RBRACKET RPAREN
    (94) sequentialp -> . COMMA layers sequentialp

    RBRACKET        shift and go to state 191
    COMMA           shift and go to state 192

    sequentialp                    shift and go to state 210

state 203

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA . array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp

    ID              shift and go to state 118

    array                          shift and go to state 211

state 204

    (99) predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .

    VAR             reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    FUNCTION        reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    ID              reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    READ            reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    PRINT           reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    IF              reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    WHILE           reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    FOR             reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    MEAN            reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    RBRACE          reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    SEMICOLON       reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)
    RBRACKET        reduce using rule 99 (predict -> ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp .)


state 205

    (100) predictp -> INT . RBRACKET RPAREN

    RBRACKET        shift and go to state 212


state 206

    (101) predictp -> FLOAT . RBRACKET RPAREN

    RBRACKET        shift and go to state 213


state 207

    (63) if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp . jumpsIf
    (67) jumpsIf -> .

    VAR             reduce using rule 67 (jumpsIf -> .)
    FUNCTION        reduce using rule 67 (jumpsIf -> .)
    ID              reduce using rule 67 (jumpsIf -> .)
    READ            reduce using rule 67 (jumpsIf -> .)
    PRINT           reduce using rule 67 (jumpsIf -> .)
    IF              reduce using rule 67 (jumpsIf -> .)
    WHILE           reduce using rule 67 (jumpsIf -> .)
    FOR             reduce using rule 67 (jumpsIf -> .)
    MEAN            reduce using rule 67 (jumpsIf -> .)
    RBRACE          reduce using rule 67 (jumpsIf -> .)
    SEMICOLON       reduce using rule 67 (jumpsIf -> .)
    RBRACKET        reduce using rule 67 (jumpsIf -> .)

    jumpsIf                        shift and go to state 214

state 208

    (65) ifp -> ELSE . quadsElse statements
    (68) quadsElse -> .

    FUNCTION        reduce using rule 68 (quadsElse -> .)
    ID              reduce using rule 68 (quadsElse -> .)
    READ            reduce using rule 68 (quadsElse -> .)
    PRINT           reduce using rule 68 (quadsElse -> .)
    IF              reduce using rule 68 (quadsElse -> .)
    WHILE           reduce using rule 68 (quadsElse -> .)
    FOR             reduce using rule 68 (quadsElse -> .)
    MEAN            reduce using rule 68 (quadsElse -> .)

    quadsElse                      shift and go to state 215

state 209

    (72) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN . LBRACKET statements forp

    LBRACKET        shift and go to state 216


state 210

    (94) sequentialp -> COMMA layers sequentialp .

    DOT             reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    VAR             reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    FUNCTION        reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    ID              reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    READ            reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    PRINT           reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    IF              reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    WHILE           reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    FOR             reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    MEAN            reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    RBRACE          reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    SEMICOLON       reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)
    RBRACKET        reduce using rule 94 (sequentialp -> COMMA layers sequentialp .)


state 211

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array . COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp

    COMMA           shift and go to state 217


state 212

    (100) predictp -> INT RBRACKET . RPAREN

    RPAREN          shift and go to state 218


state 213

    (101) predictp -> FLOAT RBRACKET . RPAREN

    RPAREN          shift and go to state 219


state 214

    (63) if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf .

    VAR             reduce using rule 63 (if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf .)
    FUNCTION        reduce using rule 63 (if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf .)
    ID              reduce using rule 63 (if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf .)
    READ            reduce using rule 63 (if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf .)
    PRINT           reduce using rule 63 (if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf .)
    IF              reduce using rule 63 (if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf .)
    WHILE           reduce using rule 63 (if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf .)
    FOR             reduce using rule 63 (if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf .)
    MEAN            reduce using rule 63 (if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf .)
    RBRACE          reduce using rule 63 (if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf .)
    SEMICOLON       reduce using rule 63 (if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf .)
    RBRACKET        reduce using rule 63 (if -> IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf .)


state 215

    (65) ifp -> ELSE quadsElse . statements
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf
    (69) while -> . WHILE LPAREN exp RPAREN statements whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (59) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    FUNCTION        shift and go to state 10
    ID              shift and go to state 56
    READ            shift and go to state 57
    PRINT           shift and go to state 58
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    MEAN            shift and go to state 71

    statements                     shift and go to state 220
    assign                         shift and go to state 45
    function                       shift and go to state 46
    voidfunction                   shift and go to state 47
    call                           shift and go to state 48
    read                           shift and go to state 49
    print                          shift and go to state 50
    if                             shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    funcesp                        shift and go to state 54
    var                            shift and go to state 55
    array                          shift and go to state 62
    matrix                         shift and go to state 63
    mean                           shift and go to state 64
    layers                         shift and go to state 65
    sequential                     shift and go to state 66
    compile                        shift and go to state 67
    fit                            shift and go to state 68
    predict                        shift and go to state 69
    getweights                     shift and go to state 70

state 216

    (72) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET . statements forp
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf
    (69) while -> . WHILE LPAREN exp RPAREN statements whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (59) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    FUNCTION        shift and go to state 10
    ID              shift and go to state 56
    READ            shift and go to state 57
    PRINT           shift and go to state 58
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    MEAN            shift and go to state 71

    var                            shift and go to state 55
    statements                     shift and go to state 221
    assign                         shift and go to state 45
    function                       shift and go to state 46
    voidfunction                   shift and go to state 47
    call                           shift and go to state 48
    read                           shift and go to state 49
    print                          shift and go to state 50
    if                             shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    funcesp                        shift and go to state 54
    array                          shift and go to state 62
    matrix                         shift and go to state 63
    mean                           shift and go to state 64
    layers                         shift and go to state 65
    sequential                     shift and go to state 66
    compile                        shift and go to state 67
    fit                            shift and go to state 68
    predict                        shift and go to state 69
    getweights                     shift and go to state 70

state 217

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA . EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp

    EPOCHS          shift and go to state 222


state 218

    (100) predictp -> INT RBRACKET RPAREN .

    VAR             reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    FUNCTION        reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    ID              reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    READ            reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    PRINT           reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    IF              reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    WHILE           reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    FOR             reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    MEAN            reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    RBRACE          reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    SEMICOLON       reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)
    RBRACKET        reduce using rule 100 (predictp -> INT RBRACKET RPAREN .)


state 219

    (101) predictp -> FLOAT RBRACKET RPAREN .

    VAR             reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    FUNCTION        reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    ID              reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    READ            reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    PRINT           reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    IF              reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    WHILE           reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    FOR             reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    MEAN            reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    RBRACE          reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    SEMICOLON       reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)
    RBRACKET        reduce using rule 101 (predictp -> FLOAT RBRACKET RPAREN .)


state 220

    (65) ifp -> ELSE quadsElse statements .

    VAR             reduce using rule 65 (ifp -> ELSE quadsElse statements .)
    FUNCTION        reduce using rule 65 (ifp -> ELSE quadsElse statements .)
    ID              reduce using rule 65 (ifp -> ELSE quadsElse statements .)
    READ            reduce using rule 65 (ifp -> ELSE quadsElse statements .)
    PRINT           reduce using rule 65 (ifp -> ELSE quadsElse statements .)
    IF              reduce using rule 65 (ifp -> ELSE quadsElse statements .)
    WHILE           reduce using rule 65 (ifp -> ELSE quadsElse statements .)
    FOR             reduce using rule 65 (ifp -> ELSE quadsElse statements .)
    MEAN            reduce using rule 65 (ifp -> ELSE quadsElse statements .)
    RBRACE          reduce using rule 65 (ifp -> ELSE quadsElse statements .)
    SEMICOLON       reduce using rule 65 (ifp -> ELSE quadsElse statements .)
    RBRACKET        reduce using rule 65 (ifp -> ELSE quadsElse statements .)


state 221

    (72) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements . forp
    (73) forp -> . RBRACKET
    (74) forp -> . statements forp
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf
    (69) while -> . WHILE LPAREN exp RPAREN statements whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (59) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACKET        shift and go to state 225
    FUNCTION        shift and go to state 10
    ID              shift and go to state 56
    READ            shift and go to state 57
    PRINT           shift and go to state 58
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    MEAN            shift and go to state 71

    var                            shift and go to state 55
    statements                     shift and go to state 223
    forp                           shift and go to state 224
    assign                         shift and go to state 45
    function                       shift and go to state 46
    voidfunction                   shift and go to state 47
    call                           shift and go to state 48
    read                           shift and go to state 49
    print                          shift and go to state 50
    if                             shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    funcesp                        shift and go to state 54
    array                          shift and go to state 62
    matrix                         shift and go to state 63
    mean                           shift and go to state 64
    layers                         shift and go to state 65
    sequential                     shift and go to state 66
    compile                        shift and go to state 67
    fit                            shift and go to state 68
    predict                        shift and go to state 69
    getweights                     shift and go to state 70

state 222

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS . EQUAL INT COMMA VERBOSE EQUAL fitp

    EQUAL           shift and go to state 226


state 223

    (74) forp -> statements . forp
    (73) forp -> . RBRACKET
    (74) forp -> . statements forp
    (44) statements -> . assign
    (45) statements -> . function
    (46) statements -> . voidfunction
    (47) statements -> . call
    (48) statements -> . read
    (49) statements -> . print
    (50) statements -> . if
    (51) statements -> . while
    (52) statements -> . for
    (53) statements -> . funcesp
    (54) assign -> . var EQUAL exp SEMICOLON
    (9) function -> . FUNCTION type decfunc LPAREN param RPAREN LBRACE body RBRACE
    (11) voidfunction -> . FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE
    (60) call -> . ID LPAREN callp RPAREN
    (55) read -> . READ var
    (56) print -> . PRINT LPAREN printp
    (63) if -> . IF LPAREN CTI GT CTI RPAREN quadsIf ifp jumpsIf
    (69) while -> . WHILE LPAREN exp RPAREN statements whilep
    (72) for -> . FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp
    (75) funcesp -> . array
    (76) funcesp -> . matrix
    (77) funcesp -> . mean
    (78) funcesp -> . layers
    (79) funcesp -> . sequential
    (80) funcesp -> . compile
    (81) funcesp -> . fit
    (82) funcesp -> . predict
    (83) funcesp -> . getweights
    (59) var -> . ID
    (84) array -> . ID EQUAL ARRAY LPAREN var arrayp
    (87) matrix -> . ID EQUAL MATRIX LPAREN array matrixp
    (90) mean -> . MEAN LPAREN array RPAREN
    (91) layers -> . ID EQUAL LAYERS LPAREN UNITS EQUAL INT RPAREN
    (92) sequential -> . ID EQUAL SEQUENTIAL LPAREN LBRACKET layers sequentialp
    (95) compile -> . sequential DOT COMPILE LPAREN RPAREN
    (96) fit -> . ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp
    (99) predict -> . ID EQUAL sequential DOT PREDICT LPAREN LBRACKET predictp
    (102) getweights -> . layers DOT GETWEIGHTS LPAREN RPAREN

    RBRACKET        shift and go to state 225
    FUNCTION        shift and go to state 10
    ID              shift and go to state 56
    READ            shift and go to state 57
    PRINT           shift and go to state 58
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    MEAN            shift and go to state 71

    statements                     shift and go to state 223
    forp                           shift and go to state 227
    assign                         shift and go to state 45
    function                       shift and go to state 46
    voidfunction                   shift and go to state 47
    call                           shift and go to state 48
    read                           shift and go to state 49
    print                          shift and go to state 50
    if                             shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    funcesp                        shift and go to state 54
    var                            shift and go to state 55
    array                          shift and go to state 62
    matrix                         shift and go to state 63
    mean                           shift and go to state 64
    layers                         shift and go to state 65
    sequential                     shift and go to state 66
    compile                        shift and go to state 67
    fit                            shift and go to state 68
    predict                        shift and go to state 69
    getweights                     shift and go to state 70

state 224

    (72) for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .

    VAR             reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    FUNCTION        reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    ID              reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    READ            reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    PRINT           reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    IF              reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    WHILE           reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    FOR             reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    MEAN            reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    RBRACE          reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    SEMICOLON       reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)
    RBRACKET        reduce using rule 72 (for -> FOR LPAREN var SEMICOLON exp SEMICOLON exp RPAREN LBRACKET statements forp .)


state 225

    (73) forp -> RBRACKET .

    VAR             reduce using rule 73 (forp -> RBRACKET .)
    FUNCTION        reduce using rule 73 (forp -> RBRACKET .)
    ID              reduce using rule 73 (forp -> RBRACKET .)
    READ            reduce using rule 73 (forp -> RBRACKET .)
    PRINT           reduce using rule 73 (forp -> RBRACKET .)
    IF              reduce using rule 73 (forp -> RBRACKET .)
    WHILE           reduce using rule 73 (forp -> RBRACKET .)
    FOR             reduce using rule 73 (forp -> RBRACKET .)
    MEAN            reduce using rule 73 (forp -> RBRACKET .)
    RBRACE          reduce using rule 73 (forp -> RBRACKET .)
    SEMICOLON       reduce using rule 73 (forp -> RBRACKET .)
    RBRACKET        reduce using rule 73 (forp -> RBRACKET .)


state 226

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL . INT COMMA VERBOSE EQUAL fitp

    INT             shift and go to state 228


state 227

    (74) forp -> statements forp .

    VAR             reduce using rule 74 (forp -> statements forp .)
    FUNCTION        reduce using rule 74 (forp -> statements forp .)
    ID              reduce using rule 74 (forp -> statements forp .)
    READ            reduce using rule 74 (forp -> statements forp .)
    PRINT           reduce using rule 74 (forp -> statements forp .)
    IF              reduce using rule 74 (forp -> statements forp .)
    WHILE           reduce using rule 74 (forp -> statements forp .)
    FOR             reduce using rule 74 (forp -> statements forp .)
    MEAN            reduce using rule 74 (forp -> statements forp .)
    RBRACE          reduce using rule 74 (forp -> statements forp .)
    SEMICOLON       reduce using rule 74 (forp -> statements forp .)
    RBRACKET        reduce using rule 74 (forp -> statements forp .)


state 228

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT . COMMA VERBOSE EQUAL fitp

    COMMA           shift and go to state 229


state 229

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA . VERBOSE EQUAL fitp

    VERBOSE         shift and go to state 230


state 230

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE . EQUAL fitp

    EQUAL           shift and go to state 231


state 231

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL . fitp
    (97) fitp -> . TRUE RPAREN
    (98) fitp -> . FALSE RPAREN

    TRUE            shift and go to state 233
    FALSE           shift and go to state 234

    fitp                           shift and go to state 232

state 232

    (96) fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .

    VAR             reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    FUNCTION        reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    ID              reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    READ            reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    PRINT           reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    IF              reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    WHILE           reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    FOR             reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    MEAN            reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    RBRACE          reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    SEMICOLON       reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)
    RBRACKET        reduce using rule 96 (fit -> ID EQUAL sequential DOT FIT LPAREN array COMMA array COMMA EPOCHS EQUAL INT COMMA VERBOSE EQUAL fitp .)


state 233

    (97) fitp -> TRUE . RPAREN

    RPAREN          shift and go to state 235


state 234

    (98) fitp -> FALSE . RPAREN

    RPAREN          shift and go to state 236


state 235

    (97) fitp -> TRUE RPAREN .

    VAR             reduce using rule 97 (fitp -> TRUE RPAREN .)
    FUNCTION        reduce using rule 97 (fitp -> TRUE RPAREN .)
    ID              reduce using rule 97 (fitp -> TRUE RPAREN .)
    READ            reduce using rule 97 (fitp -> TRUE RPAREN .)
    PRINT           reduce using rule 97 (fitp -> TRUE RPAREN .)
    IF              reduce using rule 97 (fitp -> TRUE RPAREN .)
    WHILE           reduce using rule 97 (fitp -> TRUE RPAREN .)
    FOR             reduce using rule 97 (fitp -> TRUE RPAREN .)
    MEAN            reduce using rule 97 (fitp -> TRUE RPAREN .)
    RBRACE          reduce using rule 97 (fitp -> TRUE RPAREN .)
    SEMICOLON       reduce using rule 97 (fitp -> TRUE RPAREN .)
    RBRACKET        reduce using rule 97 (fitp -> TRUE RPAREN .)


state 236

    (98) fitp -> FALSE RPAREN .

    VAR             reduce using rule 98 (fitp -> FALSE RPAREN .)
    FUNCTION        reduce using rule 98 (fitp -> FALSE RPAREN .)
    ID              reduce using rule 98 (fitp -> FALSE RPAREN .)
    READ            reduce using rule 98 (fitp -> FALSE RPAREN .)
    PRINT           reduce using rule 98 (fitp -> FALSE RPAREN .)
    IF              reduce using rule 98 (fitp -> FALSE RPAREN .)
    WHILE           reduce using rule 98 (fitp -> FALSE RPAREN .)
    FOR             reduce using rule 98 (fitp -> FALSE RPAREN .)
    MEAN            reduce using rule 98 (fitp -> FALSE RPAREN .)
    RBRACE          reduce using rule 98 (fitp -> FALSE RPAREN .)
    SEMICOLON       reduce using rule 98 (fitp -> FALSE RPAREN .)
    RBRACKET        reduce using rule 98 (fitp -> FALSE RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUAL in state 56 resolved as shift
