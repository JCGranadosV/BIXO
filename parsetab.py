
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTLTEGTGTEleftPLUSMINUSleftMULTDIVleftEQUALDIFFleftLPARENRPARENleftLBRACERBRACEleftLBRACKETRBRACKETAND ARRAY ASSIGN CHAR COLON COMMA COMPILE CTF CTI DIFF DIV DOT ELSE END EPOCHS EQUAL FACTORIAL FALSE FIBONACCI FIND FIT FLOAT FUNCESP FUNCTION GETWEIGHTS GT GTE ID IF IFEQUAL INT LAYERS LBRACE LBRACKET LPAREN LT LTE MAIN MATRIX MEAN MINUS MMULT MULT NUMPY OR PLUS PREDICT PRINT PROGRAM QUOTE RBRACE RBRACKET READ RETURN RPAREN SEMICOLON SEQUENTIAL SORT STRING TRUE UNITS VAR VERBOSE VOID WHILEprogram : PROGRAM gotomain ID SEMICOLON decvar modules mainfunctiongotomain : decvar : VAR decvarp\n              | VAR decvarp decvar\n              |decvarp : type decvarpp SEMICOLONdecvarpp : ID COMMA decvarpp\n                | IDtype : INT\n            | FLOATfunction : FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACEdecfunctype : typedecfunc : IDvoidfunction : FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACEdecfuncmain : mainfunction : MAIN decfuncmain LPAREN RPAREN LBRACE body RBRACEmodules : function modules\n               | voidfunction modules\n               | function\n               | voidfunction\n               | body : decvar statements body\n            | statements body\n            | decvar\n            | param : type ID\n             | type ID COMMA param\n             |exp : texp \n           | texp OR exptexp : gexp \n            | gexp AND texpgexp : mexp \n            | mexp gexpp mexpgexpp : LT\n             | GT\n             | IFEQUAL\n             | DIFFmexp : t\n            | mexp PLUS t\n            | mexp MINUS tt : f \n         | t MULT f\n         | t DIV ff : LPAREN exp RPAREN\n         | CTI\n         | CTF\n         | var\n         | callstatements : assign\n                 |  function\n                 |  voidfunction\n                 |  call\n                 |  read\n                 |  print\n                 |  if\n                 |  while \n                 |  array\n                 |  matrix\n                 |  mean\n                 |  layers\n                 |  sequential\n                 |  compile\n                 |  fit\n                 |  predict\n                 |  getweights\n                 |  fibonacci\n                 |  factorial\n                 |  sort\n                 |  find\n                 |  mmultassign : var EQUAL exp SEMICOLON\n              | var LBRACKET exp RBRACKET EQUAL exp SEMICOLONread : READ LPAREN var RPAREN SEMICOLONprint : PRINT LPAREN printp SEMICOLON\n             | PRINT LPAREN var LBRACKET CTI RBRACKET RPAREN SEMICOLONprintp : exp RPAREN\n              | exp COMMA printpvar : ID call : ID LPAREN callp RPARENcallp : exp COMMA callp\n             | exp\n             | if : IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLONifexp : exp  ifelse : \n               | ELSE quadsElse LBRACE body RBRACEquadsIf : jumpsIf : quadsElse :  while : WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLONwhilexp : exp  saveJumps : quadsWhile : jumpsWhile : array : ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLONarrvalues : exp\n                 | exp COMMA arrvaluesmatrix : MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLONmatvalues : exp\n                 | exp COMMA matvaluesmean : MEAN LPAREN ID RPAREN SEMICOLONlayers : LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON sequential : SEQUENTIAL LPAREN RPAREN SEMICOLON compile : COMPILE LPAREN CTF RPAREN SEMICOLON fit : FIT LPAREN ID COMMA ID COMMA EPOCHS EQUAL CTI RPAREN SEMICOLON predict : PREDICT LPAREN CTF RPAREN SEMICOLON getweights : GETWEIGHTS LPAREN RPAREN SEMICOLON fibonacci : FIBONACCI LPAREN exp RPAREN SEMICOLON factorial : FACTORIAL LPAREN exp RPAREN SEMICOLONsort : SORT LPAREN ID RPAREN SEMICOLONfind : FIND LPAREN ID COMMA exp RPAREN SEMICOLONmmult : MMULT LPAREN ID COMMA ID RPAREN SEMICOLONempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,16,92,],[0,-1,-16,]),'ID':([2,3,12,13,14,15,20,21,22,23,30,31,38,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,75,76,89,91,93,95,96,97,98,99,100,104,108,111,112,113,114,115,127,142,143,144,157,158,159,160,161,162,163,164,165,166,167,168,169,170,173,174,176,179,187,189,191,195,196,206,208,215,217,219,220,221,222,228,231,236,237,240,241,243,245,246,247,257,265,266,268,269,270,273,275,279,],[-2,4,-3,25,-9,-10,28,28,-12,-4,-6,25,42,70,70,70,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,102,103,70,70,70,131,131,131,136,131,131,145,149,131,131,154,155,156,131,131,131,131,131,-14,-72,131,131,131,131,131,-35,-36,-37,-38,131,131,-80,131,-75,131,-104,218,-108,131,224,131,-74,-102,-105,-107,-109,-110,-111,70,131,-11,-73,70,131,-103,-112,-113,-76,131,-96,131,-84,70,-91,-106,131,-99,]),'SEMICOLON':([4,24,25,35,120,121,122,123,124,125,126,128,129,130,131,137,147,151,173,175,178,185,188,190,192,193,194,197,198,199,200,201,202,203,204,205,210,226,232,234,235,238,248,254,256,258,261,263,267,276,277,],[5,30,-8,-7,-48,159,-29,-31,-33,-39,-42,-46,-47,-49,-79,176,187,191,-80,208,-77,215,217,219,220,221,222,225,-30,-32,-34,-40,-41,-43,-44,-45,-78,237,243,245,246,247,-86,-89,-95,265,268,270,273,279,-87,]),'VAR':([5,12,30,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[7,7,-6,7,7,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,7,7,7,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,7,-11,-73,7,-103,-112,-113,-76,-96,-84,7,-91,-106,-99,]),'FUNCTION':([5,6,9,10,12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-5,11,11,11,-3,-4,-6,11,11,11,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,11,11,11,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,11,-11,-73,11,-103,-112,-113,-76,-96,-84,11,-91,-106,-99,]),'MAIN':([5,6,8,9,10,12,18,19,23,30,158,236,],[-5,-21,17,-19,-20,-3,-17,-18,-4,-6,-14,-11,]),'INT':([7,11,33,34,90,],[14,14,14,14,14,]),'FLOAT':([7,11,33,34,90,],[15,15,15,15,15,]),'VOID':([11,],[21,]),'READ':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,71,71,71,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,71,71,71,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,71,-11,-73,71,-103,-112,-113,-76,-96,-84,71,-91,-106,-99,]),'PRINT':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,72,72,72,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,72,72,72,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,72,-11,-73,72,-103,-112,-113,-76,-96,-84,72,-91,-106,-99,]),'IF':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,73,73,73,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,73,73,73,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,73,-11,-73,73,-103,-112,-113,-76,-96,-84,73,-91,-106,-99,]),'WHILE':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,74,74,74,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,74,74,74,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,74,-11,-73,74,-103,-112,-113,-76,-96,-84,74,-91,-106,-99,]),'ARRAY':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,75,75,75,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,75,75,75,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,75,-11,-73,75,-103,-112,-113,-76,-96,-84,75,-91,-106,-99,]),'MATRIX':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,76,76,76,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,76,76,76,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,76,-11,-73,76,-103,-112,-113,-76,-96,-84,76,-91,-106,-99,]),'MEAN':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,77,77,77,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,77,77,77,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,77,-11,-73,77,-103,-112,-113,-76,-96,-84,77,-91,-106,-99,]),'LAYERS':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,78,78,78,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,78,78,78,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,78,-11,-73,78,-103,-112,-113,-76,-96,-84,78,-91,-106,-99,]),'SEQUENTIAL':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,79,79,79,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,79,79,79,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,79,-11,-73,79,-103,-112,-113,-76,-96,-84,79,-91,-106,-99,]),'COMPILE':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,80,80,80,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,80,80,80,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,80,-11,-73,80,-103,-112,-113,-76,-96,-84,80,-91,-106,-99,]),'FIT':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,81,81,81,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,81,81,81,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,81,-11,-73,81,-103,-112,-113,-76,-96,-84,81,-91,-106,-99,]),'PREDICT':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,82,82,82,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,82,82,82,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,82,-11,-73,82,-103,-112,-113,-76,-96,-84,82,-91,-106,-99,]),'GETWEIGHTS':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,83,83,83,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,83,83,83,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,83,-11,-73,83,-103,-112,-113,-76,-96,-84,83,-91,-106,-99,]),'FIBONACCI':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,84,84,84,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,84,84,84,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,84,-11,-73,84,-103,-112,-113,-76,-96,-84,84,-91,-106,-99,]),'FACTORIAL':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,85,85,85,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,85,85,85,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,85,-11,-73,85,-103,-112,-113,-76,-96,-84,85,-91,-106,-99,]),'SORT':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,86,86,86,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,86,86,86,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,86,-11,-73,86,-103,-112,-113,-76,-96,-84,86,-91,-106,-99,]),'FIND':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,87,87,87,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,87,87,87,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,87,-11,-73,87,-103,-112,-113,-76,-96,-84,87,-91,-106,-99,]),'MMULT':([12,23,30,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,91,93,158,159,173,176,187,191,208,215,217,219,220,221,222,228,236,237,240,243,245,246,247,265,268,269,270,273,279,],[-3,-4,-6,88,88,88,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,88,88,88,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,88,-11,-73,88,-103,-112,-113,-76,-96,-84,88,-91,-106,-99,]),'RBRACE':([12,23,30,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,91,93,94,118,119,158,159,173,176,187,191,208,215,217,219,220,221,222,225,228,236,237,239,240,243,245,246,247,249,265,268,269,270,273,274,279,],[-3,-4,-6,-5,92,-24,-5,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-5,-5,-23,158,-22,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,236,-5,-11,-73,248,-5,-103,-112,-113,-76,256,-96,-84,-5,-91,-106,277,-99,]),'RETURN':([12,23,30,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,89,93,94,116,119,158,159,173,176,187,191,208,215,217,219,220,221,222,236,237,243,245,246,247,265,268,270,273,279,],[-3,-4,-6,-24,-5,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-5,-5,-23,157,-22,-14,-72,-80,-75,-104,-108,-74,-102,-105,-107,-109,-110,-111,-11,-73,-103,-112,-113,-76,-96,-84,-91,-106,-99,]),'LPAREN':([17,26,27,28,29,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,95,96,97,99,100,101,111,112,127,131,142,143,144,157,160,161,162,163,164,165,166,167,168,169,170,174,179,195,206,231,241,257,266,275,],[-15,32,33,-13,34,97,98,99,100,-93,104,105,106,107,108,109,110,111,112,113,114,115,127,127,127,127,127,142,127,127,127,97,127,127,127,127,127,127,127,127,127,-35,-36,-37,-38,127,127,127,127,127,127,127,127,127,127,127,]),'COMMA':([25,42,120,122,123,124,125,126,128,129,130,131,134,138,139,149,155,156,173,198,199,200,201,202,203,204,205,218,250,271,],[31,90,-48,-29,-31,-33,-39,-42,-46,-47,-49,-79,174,-48,179,189,195,196,-80,-30,-32,-34,-40,-41,-43,-44,-45,233,257,275,]),'RPAREN':([32,33,34,37,39,42,90,97,106,110,117,120,122,123,124,125,126,128,129,130,131,133,134,135,136,138,139,140,141,145,148,150,152,153,154,171,173,174,181,182,198,199,200,201,202,203,204,205,207,216,223,224,227,260,],[36,-28,-28,41,43,-26,-28,-83,147,151,-27,-48,-29,-31,-33,-39,-42,-46,-47,-49,-79,173,-82,175,-79,-48,178,180,-85,185,188,190,192,193,194,205,-80,-83,212,-92,-30,-32,-34,-40,-41,-43,-44,-45,-81,232,234,235,238,267,]),'LBRACE':([36,41,43,180,211,212,229,255,262,],[40,89,91,-88,228,-94,240,-90,269,]),'EQUAL':([69,70,146,172,213,244,252,],[95,-79,186,206,230,253,259,]),'LBRACKET':([69,70,102,103,131,138,214,230,259,],[96,-79,143,144,-79,177,231,241,266,]),'CTI':([95,96,97,99,100,111,112,127,142,143,144,157,160,161,162,163,164,165,166,167,168,169,170,174,177,179,186,195,206,231,241,253,257,266,275,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,-35,-36,-37,-38,128,128,128,209,128,216,128,128,128,128,260,128,128,128,]),'CTF':([95,96,97,99,100,107,109,111,112,127,142,143,144,157,160,161,162,163,164,165,166,167,168,169,170,174,179,195,206,231,241,257,266,275,],[129,129,129,129,129,148,150,129,129,129,129,129,129,129,129,129,129,129,129,-35,-36,-37,-38,129,129,129,129,129,129,129,129,129,129,129,]),'UNITS':([105,],[146,]),'MULT':([120,125,126,128,129,130,131,138,173,201,202,203,204,205,],[-48,169,-42,-46,-47,-49,-79,-48,-80,169,169,-43,-44,-45,]),'DIV':([120,125,126,128,129,130,131,138,173,201,202,203,204,205,],[-48,170,-42,-46,-47,-49,-79,-48,-80,170,170,-43,-44,-45,]),'PLUS':([120,124,125,126,128,129,130,131,138,173,200,201,202,203,204,205,],[-48,163,-39,-42,-46,-47,-49,-79,-48,-80,163,-40,-41,-43,-44,-45,]),'MINUS':([120,124,125,126,128,129,130,131,138,173,200,201,202,203,204,205,],[-48,164,-39,-42,-46,-47,-49,-79,-48,-80,164,-40,-41,-43,-44,-45,]),'LT':([120,124,125,126,128,129,130,131,138,173,201,202,203,204,205,],[-48,165,-39,-42,-46,-47,-49,-79,-48,-80,-40,-41,-43,-44,-45,]),'GT':([120,124,125,126,128,129,130,131,138,173,201,202,203,204,205,],[-48,166,-39,-42,-46,-47,-49,-79,-48,-80,-40,-41,-43,-44,-45,]),'IFEQUAL':([120,124,125,126,128,129,130,131,138,173,201,202,203,204,205,],[-48,167,-39,-42,-46,-47,-49,-79,-48,-80,-40,-41,-43,-44,-45,]),'DIFF':([120,124,125,126,128,129,130,131,138,173,201,202,203,204,205,],[-48,168,-39,-42,-46,-47,-49,-79,-48,-80,-40,-41,-43,-44,-45,]),'AND':([120,123,124,125,126,128,129,130,131,138,173,200,201,202,203,204,205,],[-48,161,-33,-39,-42,-46,-47,-49,-79,-48,-80,-34,-40,-41,-43,-44,-45,]),'OR':([120,122,123,124,125,126,128,129,130,131,138,173,199,200,201,202,203,204,205,],[-48,160,-31,-33,-39,-42,-46,-47,-49,-79,-48,-80,-32,-34,-40,-41,-43,-44,-45,]),'RBRACKET':([120,122,123,124,125,126,128,129,130,131,132,173,183,184,198,199,200,201,202,203,204,205,209,242,250,251,264,271,272,278,],[-48,-29,-31,-33,-39,-42,-46,-47,-49,-79,172,-80,213,214,-30,-32,-34,-40,-41,-43,-44,-45,227,252,-97,258,-98,-100,276,-101,]),'EPOCHS':([233,],[244,]),'ELSE':([248,],[255,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'gotomain':([2,],[3,]),'decvar':([5,12,40,46,89,91,93,228,240,269,],[6,23,45,45,45,45,45,45,45,45,]),'modules':([6,9,10,],[8,18,19,]),'function':([6,9,10,40,45,46,89,91,93,228,240,269,],[9,9,9,48,48,48,48,48,48,48,48,48,]),'voidfunction':([6,9,10,40,45,46,89,91,93,228,240,269,],[10,10,10,49,49,49,49,49,49,49,49,49,]),'decvarp':([7,],[12,]),'type':([7,11,33,34,90,],[13,22,38,38,38,]),'mainfunction':([8,],[16,]),'decfunctype':([11,],[20,]),'decvarpp':([13,31,],[24,35,]),'decfuncmain':([17,],[26,]),'decfunc':([20,21,],[27,29,]),'param':([33,34,90,],[37,39,117,]),'body':([40,46,89,91,93,228,240,269,],[44,94,116,118,119,239,249,274,]),'statements':([40,45,46,89,91,93,228,240,269,],[46,93,46,46,46,46,46,46,46,]),'assign':([40,45,46,89,91,93,228,240,269,],[47,47,47,47,47,47,47,47,47,]),'call':([40,45,46,89,91,93,95,96,97,99,100,111,112,127,142,143,144,157,160,161,162,163,164,169,170,174,179,195,206,228,231,240,241,257,266,269,275,],[50,50,50,50,50,50,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,50,130,50,130,130,130,50,130,]),'read':([40,45,46,89,91,93,228,240,269,],[51,51,51,51,51,51,51,51,51,]),'print':([40,45,46,89,91,93,228,240,269,],[52,52,52,52,52,52,52,52,52,]),'if':([40,45,46,89,91,93,228,240,269,],[53,53,53,53,53,53,53,53,53,]),'while':([40,45,46,89,91,93,228,240,269,],[54,54,54,54,54,54,54,54,54,]),'array':([40,45,46,89,91,93,228,240,269,],[55,55,55,55,55,55,55,55,55,]),'matrix':([40,45,46,89,91,93,228,240,269,],[56,56,56,56,56,56,56,56,56,]),'mean':([40,45,46,89,91,93,228,240,269,],[57,57,57,57,57,57,57,57,57,]),'layers':([40,45,46,89,91,93,228,240,269,],[58,58,58,58,58,58,58,58,58,]),'sequential':([40,45,46,89,91,93,228,240,269,],[59,59,59,59,59,59,59,59,59,]),'compile':([40,45,46,89,91,93,228,240,269,],[60,60,60,60,60,60,60,60,60,]),'fit':([40,45,46,89,91,93,228,240,269,],[61,61,61,61,61,61,61,61,61,]),'predict':([40,45,46,89,91,93,228,240,269,],[62,62,62,62,62,62,62,62,62,]),'getweights':([40,45,46,89,91,93,228,240,269,],[63,63,63,63,63,63,63,63,63,]),'fibonacci':([40,45,46,89,91,93,228,240,269,],[64,64,64,64,64,64,64,64,64,]),'factorial':([40,45,46,89,91,93,228,240,269,],[65,65,65,65,65,65,65,65,65,]),'sort':([40,45,46,89,91,93,228,240,269,],[66,66,66,66,66,66,66,66,66,]),'find':([40,45,46,89,91,93,228,240,269,],[67,67,67,67,67,67,67,67,67,]),'mmult':([40,45,46,89,91,93,228,240,269,],[68,68,68,68,68,68,68,68,68,]),'var':([40,45,46,89,91,93,95,96,97,98,99,100,111,112,127,142,143,144,157,160,161,162,163,164,169,170,174,179,195,206,228,231,240,241,257,266,269,275,],[69,69,69,69,69,69,120,120,120,135,138,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,69,120,69,120,120,120,69,120,]),'saveJumps':([74,],[101,]),'exp':([95,96,97,99,100,111,112,127,142,143,144,157,160,174,179,195,206,231,241,257,266,275,],[121,132,134,139,141,152,153,171,182,183,184,197,198,134,139,223,226,242,250,250,271,271,]),'texp':([95,96,97,99,100,111,112,127,142,143,144,157,160,161,174,179,195,206,231,241,257,266,275,],[122,122,122,122,122,122,122,122,122,122,122,122,122,199,122,122,122,122,122,122,122,122,122,]),'gexp':([95,96,97,99,100,111,112,127,142,143,144,157,160,161,174,179,195,206,231,241,257,266,275,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'mexp':([95,96,97,99,100,111,112,127,142,143,144,157,160,161,162,174,179,195,206,231,241,257,266,275,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,200,124,124,124,124,124,124,124,124,124,]),'t':([95,96,97,99,100,111,112,127,142,143,144,157,160,161,162,163,164,174,179,195,206,231,241,257,266,275,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,201,202,125,125,125,125,125,125,125,125,125,]),'f':([95,96,97,99,100,111,112,127,142,143,144,157,160,161,162,163,164,169,170,174,179,195,206,231,241,257,266,275,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,203,204,126,126,126,126,126,126,126,126,126,]),'callp':([97,174,],[133,207,]),'printp':([99,179,],[137,210,]),'ifexp':([100,],[140,]),'gexpp':([124,],[162,]),'whilexp':([142,],[181,]),'quadsIf':([180,],[211,]),'quadsWhile':([212,],[229,]),'arrvalues':([241,257,],[251,264,]),'ifelse':([248,],[254,]),'jumpsIf':([254,],[261,]),'quadsElse':([255,],[262,]),'jumpsWhile':([256,],[263,]),'matvalues':([266,275,],[272,278,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM gotomain ID SEMICOLON decvar modules mainfunction','program',7,'p_program','bixoParser.py',271),
  ('gotomain -> <empty>','gotomain',0,'p_gotomain','bixoParser.py',279),
  ('decvar -> VAR decvarp','decvar',2,'p_decvar','bixoParser.py',287),
  ('decvar -> VAR decvarp decvar','decvar',3,'p_decvar','bixoParser.py',288),
  ('decvar -> <empty>','decvar',0,'p_decvar','bixoParser.py',289),
  ('decvarp -> type decvarpp SEMICOLON','decvarp',3,'p_decvarp','bixoParser.py',295),
  ('decvarpp -> ID COMMA decvarpp','decvarpp',3,'p_decvarpp','bixoParser.py',334),
  ('decvarpp -> ID','decvarpp',1,'p_decvarpp','bixoParser.py',335),
  ('type -> INT','type',1,'p_type','bixoParser.py',344),
  ('type -> FLOAT','type',1,'p_type','bixoParser.py',345),
  ('function -> FUNCTION decfunctype decfunc LPAREN param RPAREN LBRACE body RETURN exp SEMICOLON RBRACE','function',12,'p_function','bixoParser.py',349),
  ('decfunctype -> type','decfunctype',1,'p_decfunctype','bixoParser.py',376),
  ('decfunc -> ID','decfunc',1,'p_decfunc','bixoParser.py',382),
  ('voidfunction -> FUNCTION VOID decfunc LPAREN param RPAREN LBRACE body RBRACE','voidfunction',9,'p_voidfunction','bixoParser.py',401),
  ('decfuncmain -> <empty>','decfuncmain',0,'p_decfuncmain','bixoParser.py',427),
  ('mainfunction -> MAIN decfuncmain LPAREN RPAREN LBRACE body RBRACE','mainfunction',7,'p_mainfunction','bixoParser.py',448),
  ('modules -> function modules','modules',2,'p_modules','bixoParser.py',471),
  ('modules -> voidfunction modules','modules',2,'p_modules','bixoParser.py',472),
  ('modules -> function','modules',1,'p_modules','bixoParser.py',473),
  ('modules -> voidfunction','modules',1,'p_modules','bixoParser.py',474),
  ('modules -> <empty>','modules',0,'p_modules','bixoParser.py',475),
  ('body -> decvar statements body','body',3,'p_body','bixoParser.py',483),
  ('body -> statements body','body',2,'p_body','bixoParser.py',484),
  ('body -> decvar','body',1,'p_body','bixoParser.py',485),
  ('body -> <empty>','body',0,'p_body','bixoParser.py',486),
  ('param -> type ID','param',2,'p_param','bixoParser.py',490),
  ('param -> type ID COMMA param','param',4,'p_param','bixoParser.py',491),
  ('param -> <empty>','param',0,'p_param','bixoParser.py',492),
  ('exp -> texp','exp',1,'p_exp','bixoParser.py',503),
  ('exp -> texp OR exp','exp',3,'p_exp','bixoParser.py',504),
  ('texp -> gexp','texp',1,'p_texp','bixoParser.py',532),
  ('texp -> gexp AND texp','texp',3,'p_texp','bixoParser.py',533),
  ('gexp -> mexp','gexp',1,'p_gexp','bixoParser.py',561),
  ('gexp -> mexp gexpp mexp','gexp',3,'p_gexp','bixoParser.py',562),
  ('gexpp -> LT','gexpp',1,'p_gexpp','bixoParser.py',685),
  ('gexpp -> GT','gexpp',1,'p_gexpp','bixoParser.py',686),
  ('gexpp -> IFEQUAL','gexpp',1,'p_gexpp','bixoParser.py',687),
  ('gexpp -> DIFF','gexpp',1,'p_gexpp','bixoParser.py',688),
  ('mexp -> t','mexp',1,'p_mexp','bixoParser.py',692),
  ('mexp -> mexp PLUS t','mexp',3,'p_mexp','bixoParser.py',693),
  ('mexp -> mexp MINUS t','mexp',3,'p_mexp','bixoParser.py',694),
  ('t -> f','t',1,'p_t','bixoParser.py',829),
  ('t -> t MULT f','t',3,'p_t','bixoParser.py',830),
  ('t -> t DIV f','t',3,'p_t','bixoParser.py',831),
  ('f -> LPAREN exp RPAREN','f',3,'p_f','bixoParser.py',963),
  ('f -> CTI','f',1,'p_f','bixoParser.py',964),
  ('f -> CTF','f',1,'p_f','bixoParser.py',965),
  ('f -> var','f',1,'p_f','bixoParser.py',966),
  ('f -> call','f',1,'p_f','bixoParser.py',967),
  ('statements -> assign','statements',1,'p_statements','bixoParser.py',979),
  ('statements -> function','statements',1,'p_statements','bixoParser.py',980),
  ('statements -> voidfunction','statements',1,'p_statements','bixoParser.py',981),
  ('statements -> call','statements',1,'p_statements','bixoParser.py',982),
  ('statements -> read','statements',1,'p_statements','bixoParser.py',983),
  ('statements -> print','statements',1,'p_statements','bixoParser.py',984),
  ('statements -> if','statements',1,'p_statements','bixoParser.py',985),
  ('statements -> while','statements',1,'p_statements','bixoParser.py',986),
  ('statements -> array','statements',1,'p_statements','bixoParser.py',987),
  ('statements -> matrix','statements',1,'p_statements','bixoParser.py',988),
  ('statements -> mean','statements',1,'p_statements','bixoParser.py',989),
  ('statements -> layers','statements',1,'p_statements','bixoParser.py',990),
  ('statements -> sequential','statements',1,'p_statements','bixoParser.py',991),
  ('statements -> compile','statements',1,'p_statements','bixoParser.py',992),
  ('statements -> fit','statements',1,'p_statements','bixoParser.py',993),
  ('statements -> predict','statements',1,'p_statements','bixoParser.py',994),
  ('statements -> getweights','statements',1,'p_statements','bixoParser.py',995),
  ('statements -> fibonacci','statements',1,'p_statements','bixoParser.py',996),
  ('statements -> factorial','statements',1,'p_statements','bixoParser.py',997),
  ('statements -> sort','statements',1,'p_statements','bixoParser.py',998),
  ('statements -> find','statements',1,'p_statements','bixoParser.py',999),
  ('statements -> mmult','statements',1,'p_statements','bixoParser.py',1000),
  ('assign -> var EQUAL exp SEMICOLON','assign',4,'p_assign','bixoParser.py',1004),
  ('assign -> var LBRACKET exp RBRACKET EQUAL exp SEMICOLON','assign',7,'p_assign','bixoParser.py',1005),
  ('read -> READ LPAREN var RPAREN SEMICOLON','read',5,'p_read','bixoParser.py',1093),
  ('print -> PRINT LPAREN printp SEMICOLON','print',4,'p_print','bixoParser.py',1110),
  ('print -> PRINT LPAREN var LBRACKET CTI RBRACKET RPAREN SEMICOLON','print',8,'p_print','bixoParser.py',1111),
  ('printp -> exp RPAREN','printp',2,'p_printp','bixoParser.py',1127),
  ('printp -> exp COMMA printp','printp',3,'p_printp','bixoParser.py',1128),
  ('var -> ID','var',1,'p_var','bixoParser.py',1141),
  ('call -> ID LPAREN callp RPAREN','call',4,'p_call','bixoParser.py',1145),
  ('callp -> exp COMMA callp','callp',3,'p_callp','bixoParser.py',1201),
  ('callp -> exp','callp',1,'p_callp','bixoParser.py',1202),
  ('callp -> <empty>','callp',0,'p_callp','bixoParser.py',1203),
  ('if -> IF LPAREN ifexp RPAREN quadsIf LBRACE body RBRACE ifelse jumpsIf SEMICOLON','if',11,'p_if','bixoParser.py',1214),
  ('ifexp -> exp','ifexp',1,'p_ifexp','bixoParser.py',1217),
  ('ifelse -> <empty>','ifelse',0,'p_ifelse','bixoParser.py',1222),
  ('ifelse -> ELSE quadsElse LBRACE body RBRACE','ifelse',5,'p_ifelse','bixoParser.py',1223),
  ('quadsIf -> <empty>','quadsIf',0,'p_quadsIf','bixoParser.py',1231),
  ('jumpsIf -> <empty>','jumpsIf',0,'p_jumpsIf','bixoParser.py',1239),
  ('quadsElse -> <empty>','quadsElse',0,'p_quadsElse','bixoParser.py',1253),
  ('while -> WHILE saveJumps LPAREN whilexp RPAREN quadsWhile LBRACE body RBRACE jumpsWhile SEMICOLON','while',11,'p_while','bixoParser.py',1263),
  ('whilexp -> exp','whilexp',1,'p_whilexp','bixoParser.py',1266),
  ('saveJumps -> <empty>','saveJumps',0,'p_saveJumps','bixoParser.py',1271),
  ('quadsWhile -> <empty>','quadsWhile',0,'p_quadsWhile','bixoParser.py',1276),
  ('jumpsWhile -> <empty>','jumpsWhile',0,'p_jumpsWhile','bixoParser.py',1284),
  ('array -> ARRAY ID LBRACKET exp RBRACKET EQUAL LBRACKET arrvalues RBRACKET SEMICOLON','array',10,'p_array','bixoParser.py',1301),
  ('arrvalues -> exp','arrvalues',1,'p_arrvalues','bixoParser.py',1348),
  ('arrvalues -> exp COMMA arrvalues','arrvalues',3,'p_arrvalues','bixoParser.py',1349),
  ('matrix -> MATRIX ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET EQUAL LBRACKET matvalues RBRACKET SEMICOLON','matrix',13,'p_matrix','bixoParser.py',1360),
  ('matvalues -> exp','matvalues',1,'p_mat_values','bixoParser.py',1428),
  ('matvalues -> exp COMMA matvalues','matvalues',3,'p_mat_values','bixoParser.py',1429),
  ('mean -> MEAN LPAREN ID RPAREN SEMICOLON','mean',5,'p_mean','bixoParser.py',1442),
  ('layers -> LAYERS LPAREN UNITS EQUAL CTI RPAREN SEMICOLON','layers',7,'p_layers','bixoParser.py',1450),
  ('sequential -> SEQUENTIAL LPAREN RPAREN SEMICOLON','sequential',4,'p_sequential','bixoParser.py',1458),
  ('compile -> COMPILE LPAREN CTF RPAREN SEMICOLON','compile',5,'p_compile','bixoParser.py',1470),
  ('fit -> FIT LPAREN ID COMMA ID COMMA EPOCHS EQUAL CTI RPAREN SEMICOLON','fit',11,'p_fit','bixoParser.py',1482),
  ('predict -> PREDICT LPAREN CTF RPAREN SEMICOLON','predict',5,'p_predict','bixoParser.py',1498),
  ('getweights -> GETWEIGHTS LPAREN RPAREN SEMICOLON','getweights',4,'p_getweights','bixoParser.py',1509),
  ('fibonacci -> FIBONACCI LPAREN exp RPAREN SEMICOLON','fibonacci',5,'p_fibonacci','bixoParser.py',1518),
  ('factorial -> FACTORIAL LPAREN exp RPAREN SEMICOLON','factorial',5,'p_factorial','bixoParser.py',1525),
  ('sort -> SORT LPAREN ID RPAREN SEMICOLON','sort',5,'p_sort','bixoParser.py',1532),
  ('find -> FIND LPAREN ID COMMA exp RPAREN SEMICOLON','find',7,'p_find','bixoParser.py',1540),
  ('mmult -> MMULT LPAREN ID COMMA ID RPAREN SEMICOLON','mmult',7,'p_mmult','bixoParser.py',1549),
  ('empty -> <empty>','empty',0,'p_empty','bixoParser.py',1558),
]
